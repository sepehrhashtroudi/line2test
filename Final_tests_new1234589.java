lang3/ClassUtils.java
 @Test 
     public void test_getShortClassName_Object1() { 
         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); 
         assertEquals("Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); 
         assertEquals("String", ClassUtils.getShortClassName(new Inner(), "<null>")); 
         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); 
     } 
  

 @Test 
     public void test_getShortClassName_Class2() { 
         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); 
         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getShortClassName((String) null)); 
         assertEquals("", ClassUtils.getShortClassName("")); 
     } 
  

 @Test 
     public void test_getShortClassName_String3() { 
         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); 
         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getShortClassName((String) null)); 
         assertEquals("", ClassUtils.getShortClassName("")); 
     } 
  

 @Test 
     public void test_getShortClassName_Class4() { 
         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); 
         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getShortClassName((String) null)); 
         assertEquals("", ClassUtils.getShortClassName("")); 
     } 
  

 @Test 
     public void test_getShortClassName_Class5() { 
         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); 
         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getShortClassName((String) null)); 
         assertEquals("", ClassUtils.getShortClassName("")); 
     } 
  

 @Test 
     public void test_getShortClassName_String6() { 
         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); 
         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getShortClassName((String) null)); 
         assertEquals("", ClassUtils.getShortClassName("")); 
     } 
  

 @Test 
     public void test_getShortClassName_Class7() { 
         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class.getName())); 
         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getShortClassName((String) null)); 
         assertEquals("", ClassUtils.getShortClassName("")); 
     } 
  

 @Test 
     public void test_getSimpleName_Object8() { 
         assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); 
         assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); 
         assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); 
         assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); 
     } 
  
     // ------------------------------------------------------------------------- 

 @Test 
     public void test_getSimpleName_Object9() { 
         assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); 
         assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); 
         assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); 
         assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); 
     } 
  
     // ------------------------------------------------------------------------- 

 @Test 
     public void test_getPackageName_Object10() { 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); 
         assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); 
     } 
  

 @Test 
     public void test_getPackageName_Class11() { 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); 
         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getPackageName((String)null)); 
         assertEquals("", ClassUtils.getPackageName("")); 
     } 
  
     // ------------------------------------------------------------------------- 

 @Test 
     public void test_getPackageName_String12() { 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); 
         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getPackageName((String)null)); 
         assertEquals("", ClassUtils.getPackageName("")); 
     } 
  
     // ------------------------------------------------------------------------- 

 @Test 
     public void test_getPackageName_String13() { 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); 
         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getPackageName((String)null)); 
         assertEquals("", ClassUtils.getPackageName("")); 
     } 
  
     // ------------------------------------------------------------------------- 

 @Test 
     public void test_getPackageName_String14() { 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); 
         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); 
         assertEquals("", ClassUtils.getPackageName((String)null)); 
         assertEquals("", ClassUtils.getPackageName("")); 
     } 
  
     // ------------------------------------------------------------------------- 

 @Test 
     public void test_getAllSuperclasses_Class15() { 
         final List<?> list = ClassUtils.getAllSuperclasses(CY.class); 
         assertEquals(2, list.size()); 
         assertEquals(CX.class, list.get(0)); 
         assertEquals(Object.class, list.get(1)); 
  
         assertEquals(null, ClassUtils.getAllSuperclasses(null)); 
     } 
  

 @Test 
     public void test_getAllInterfaces_Class16() { 
         final List<?> list = ClassUtils.getAllInterfaces(CY.class); 
         assertEquals(6, list.size()); 
         assertEquals(IB.class, list.get(0)); 
         assertEquals(IC.class, list.get(1)); 
         assertEquals(ID.class, list.get(2)); 
         assertEquals(IE.class, list.get(3)); 
         assertEquals(IF.class, list.get(4)); 
         assertEquals(IA.class, list.get(5)); 
  
         assertEquals(null, ClassUtils.getAllInterfaces(null)); 
     } 
  
     private static interface IA { 
     } 
     private static interface IB { 
 
 @Test 
     public void test_getAllInterfaces_Class17() { 
         final List<?> list = ClassUtils.getAllInterfaces(CY.class); 
         assertEquals(6, list.size()); 
         assertEquals(IB.class, list.get(0)); 
         assertEquals(IC.class, list.get(1)); 
         assertEquals(ID.class, list.get(2)); 
         assertEquals(IE.class, list.get(3)); 
         assertEquals(IF.class, list.get(4)); 
         assertEquals(IA.class, list.get(5)); 
  
         assertEquals(null, ClassUtils.getAllInterfaces(null)); 
     } 
  
     private static interface IA { 
     } 
     private static interface IB { 
 
 @Test 
     public void test_convertClassNamesToClasses_List18() { 
         final List<String> list = new ArrayList<String>(); 
         List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); 
         assertEquals(0, result.size()); 
  
         list.add("java.lang.String"); 
         list.add("java.lang.xxx"); 
         list.add("java.lang.Object"); 
         result = ClassUtils.convertClassNamesToClasses(list); 
         assertEquals(3, result.size()); 
         assertEquals(String.class, result.get(0)); 
         assertEquals(null, result.get(1)); 
         assertEquals(Object.class, result.get(2)); 
  
        
 @Test 
     public void test_convertClassesToClassNames_List19() { 
         final List<Class<?>> list = new ArrayList<Class<?>>(); 
         List<String> result = ClassUtils.convertClassesToClassNames(list); 
         assertEquals(0, result.size()); 
  
         list.add(String.class); 
         list.add(null); 
         list.add(Object.class); 
         result = ClassUtils.convertClassesToClassNames(list); 
         assertEquals(3, result.size()); 
         assertEquals("java.lang.String", result.get(0)); 
         assertEquals(null, result.get(1)); 
         assertEquals("java.lang.Object", result.get(2)); 
  
         @Suppress
 @Test 
     public void test_convertClassesToClassNames_List20() { 
         final List<Class<?>> list = new ArrayList<Class<?>>(); 
         List<String> result = ClassUtils.convertClassesToClassNames(list); 
         assertEquals(0, result.size()); 
  
         list.add(String.class); 
         list.add(null); 
         list.add(Object.class); 
         result = ClassUtils.convertClassesToClassNames(list); 
         assertEquals(3, result.size()); 
         assertEquals("java.lang.String", result.get(0)); 
         assertEquals(null, result.get(1)); 
         assertEquals("java.lang.Object", result.get(2)); 
  
         @Suppress
 @Test 
     public void test_convertClassesToClassNames_List21() { 
         final List<Class<?>> list = new ArrayList<Class<?>>(); 
         List<String> result = ClassUtils.convertClassesToClassNames(list); 
         assertEquals(0, result.size()); 
  
         list.add(String.class); 
         list.add(null); 
         list.add(Object.class); 
         result = ClassUtils.convertClassesToClassNames(list); 
         assertEquals(3, result.size()); 
         assertEquals("java.lang.String", result.get(0)); 
         assertEquals(null, result.get(1)); 
         assertEquals("java.lang.Object", result.get(2)); 
  
         @Suppress
 @Test 
     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing22() throws Exception { 
         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; 
         final Class<?>[] array1 = new Class[] {Object.class}; 
         final Class<?>[] array1s = new Class[] {String.class}; 
         final Class<?>[] array0 = new Class[] {}; 
         final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; 
         final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; 
  
         assertFalse(ClassUtils.isAssignable(array1, array2, false)); 
         assertFalse(ClassUtils.isAssignable(null, array2, false)); 
         assertTrue(ClassUtils.isAssignable(null, array0, false)); 
         assert
 @Test 
     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing23() throws Exception { 
         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; 
         final Class<?>[] array1 = new Class[] {Object.class}; 
         final Class<?>[] array1s = new Class[] {String.class}; 
         final Class<?>[] array0 = new Class[] {}; 
         final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; 
         final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; 
  
         assertFalse(ClassUtils.isAssignable(array1, array2, false)); 
         assertFalse(ClassUtils.isAssignable(null, array2, false)); 
         assertTrue(ClassUtils.isAssignable(null, array0, false)); 
         assert
 @Test 
     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing24() throws Exception { 
         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; 
         final Class<?>[] array1 = new Class[] {Object.class}; 
         final Class<?>[] array1s = new Class[] {String.class}; 
         final Class<?>[] array0 = new Class[] {}; 
         final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; 
         final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; 
  
         assertFalse(ClassUtils.isAssignable(array1, array2, false)); 
         assertFalse(ClassUtils.isAssignable(null, array2, false)); 
         assertTrue(ClassUtils.isAssignable(null, array0, false)); 
         assert
 @Test 
     public void testIsPrimitiveOrWrapper25() { 
  
         // test primitive wrapper classes 
         assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); 
         assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); 
         assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); 
         assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); 
         assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); 
         assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); 
         assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); 
         assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL
 @Test 
     public void testIsPrimitiveOrWrapper26() { 
  
         // test primitive wrapper classes 
         assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); 
         assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); 
         assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); 
         assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); 
         assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); 
         assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); 
         assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); 
         assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL
 @Test 
     public void test_isAssignable27() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable28() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable29() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable30() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable31() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable32() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable_Unboxing_Widening33() throws Exception { 
         // test byte conversions 
         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); 
         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); 
         assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); 
         assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); 
         assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); 
         assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); 
         assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); 
     
 @Test 
     public void test_isAssignable_Unboxing_Widening34() throws Exception { 
         // test byte conversions 
         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); 
         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); 
         assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); 
         assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); 
         assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); 
         assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); 
         assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); 
     
 @Test 
     public void test_isAssignable35() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable36() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void test_isAssignable37() throws Exception { 
         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); 
         assertFalse(ClassUtils.isAssignable(String.class, null)); 
  
         assertTrue(ClassUtils.isAssignable(null, Object.class)); 
         assertTrue(ClassUtils.isAssignable(null, Integer.class)); 
         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); 
         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); 
         assertTrue(ClassUtils.isAssignable(String.class, String.class)); 
         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); 
  
         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL
 @Test 
     public void testIsPrimitiveWrapper38() { 
  
         // test primitive wrapper classes 
         assertTrue("Boolean.class", ClassUtils.isPrimitiveWrapper(Boolean.class)); 
         assertTrue("Byte.class", ClassUtils.isPrimitiveWrapper(Byte.class)); 
         assertTrue("Character.class", ClassUtils.isPrimitiveWrapper(Character.class)); 
         assertTrue("Short.class", ClassUtils.isPrimitiveWrapper(Short.class)); 
         assertTrue("Integer.class", ClassUtils.isPrimitiveWrapper(Integer.class)); 
         assertTrue("Long.class", ClassUtils.isPrimitiveWrapper(Long.class)); 
         assertTrue("Double.class", ClassUtils.isPrimitiveWrapper(Double.class)); 
         assertTrue("Float.class", ClassUtils.isPrimitiveWrapper(Float.class)); 
        
 @Test 
     public void testWrappersToPrimitivesNull39() { 
 //        assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null)); // generates warning 
         assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); // equivalent cast 
         // Other possible casts for null 
         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); 
         final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>)null); // == new Class<?>[]{null} 
         assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[]{null}, castNull)); 
 } 
  

 @Test 
     public void testGetInnerClass40() throws ClassNotFoundException { 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested" ) ); 
     } 
  

 @Test 
     public void testGetInnerClass41() throws ClassNotFoundException { 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested" ) ); 
     } 
  

 @Test 
     public void testGetPublicMethod42() throws Exception { 
         // Tests with Collections$UnmodifiableSet 
         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); 
         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); 
             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); 
  
         try { 
             isEmptyMethod.invoke(set, new Object[0]); 
         } catch(final java.lang.IllegalAccessException iae) { 
             fail("Should not have thrown IllegalAccessException"); 
         } 
  
         // Tests with a public Class 
         final Method toStringMethod = ClassUtils.getPublicMethod(Object.class
 @Test 
     public void testGetPublicMethod43() throws Exception { 
         // Tests with Collections$UnmodifiableSet 
         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); 
         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); 
             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); 
  
         try { 
             isEmptyMethod.invoke(set, new Object[0]); 
         } catch(final java.lang.IllegalAccessException iae) { 
             fail("Should not have thrown IllegalAccessException"); 
         } 
  
         // Tests with a public Class 
         final Method toStringMethod = ClassUtils.getPublicMethod(Object.class
 @Test 
     public void testGetPublicMethod44() throws Exception { 
         // Tests with Collections$UnmodifiableSet 
         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); 
         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); 
             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); 
  
         try { 
             isEmptyMethod.invoke(set, new Object[0]); 
         } catch(final java.lang.IllegalAccessException iae) { 
             fail("Should not have thrown IllegalAccessException"); 
         } 
  
         // Tests with a public Class 
         final Method toStringMethod = ClassUtils.getPublicMethod(Object.class
 @Test 
     public void testGetInnerClass45() throws ClassNotFoundException { 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested" ) ); 
         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested" ) ); 
     } 
  

 @Test 
     public void testToClass_object46() { 
 //        assertNull(ClassUtils.toClass(null)); // generates warning 
         assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast 
          
         // Additional varargs tests 
         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); 
         final Class<?>[] castNull = ClassUtils.toClass((Object) null); // == new Object[]{null} 
         assertTrue("(Object)null -> [null]", Arrays.equals(new Object[]{null}, castNull)); 
  
         assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); 
  
         assertTrue(Arrays.equals(new Class[] { String.class, Integer.class,
 @Test 
     public void test_getShortCanonicalName_Class47() { 
         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); 
         assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class)); 
         assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class)); 
          
         // Inner types 
         class Named extends Object {} 
         assertEquals("ClassUtilsTest.7", ClassUtils.getShortCanonicalName(new Object(){}.getClass())); 
         assertEquals("ClassUt
 @Test 
     public void test_getPackageCanonicalName_Object48() { 
         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); 
         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); 
         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); 
          
         // Inner types 
 
 @Test 
     public void test_getPackageCanonicalName_Object49() { 
         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); 
         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); 
         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); 
         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); 
          
         // Inner types 
 
 @Test 
     public void test_getShortCanonicalName_String50() { 
         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); 
         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); 
         assertEqu
 @Test 
     public void test_getShortCanonicalName_String51() { 
         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); 
         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); 
         assertEqu
 @Test 
     public void test_getShortCanonicalName_String52() { 
         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); 
         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); 
         assertEqu
 @Test 
     public void test_getShortCanonicalName_String53() { 
         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); 
         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); 
         assertEqu
 @Test 
     public void test_getShortCanonicalName_String54() { 
         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); 
         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); 
         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); 
         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); 
         assertEqu
 lang3/event/EventUtils.java
 @Test 
     public void testBindEventsToMethodWithEvent55() 
     { 
         final PropertyChangeSource src = new PropertyChangeSource(); 
         final EventCounterWithEvent counter = new EventCounterWithEvent(); 
         EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); 
         assertEquals(0, counter.getCount()); 
         src.setProperty("newValue"); 
         assertEquals(1, counter.getCount()); 
     } 
  
  

 @Test 
     public void testGetAccessibleMethodPrivateInterface56() throws Exception { 
         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); 
         assertNotNull(expected); 
         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); 
         assertNull(actual); 
     } 
  

 lang3/concurrent/BasicThreadFactory.java
 @Test(expected = NullPointerException.class) 
     public void testBuildNamingPatternNull57() { 
         builder.namingPattern(null); 
     } 
  
     /** 
      * Tries to set a null wrapped factory. 
      */ 

 @Test(expected = NullPointerException.class) 
     public void testBuildNamingPatternNull58() { 
         builder.namingPattern(null); 
     } 
  
     /** 
      * Tries to set a null wrapped factory. 
      */ 

 @Test 
     public void testNewThreadNamingPattern59() { 
         final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); 
         final Runnable r = EasyMock.createMock(Runnable.class); 
         final int count = 12; 
         for (int i = 0; i < count; i++) { 
             EasyMock.expect(wrapped.newThread(r)).andReturn(new Thread()); 
         } 
         EasyMock.replay(wrapped, r); 
         final BasicThreadFactory factory = builder.wrappedFactory(wrapped) 
                 .namingPattern(PATTERN).build(); 
         for (int i = 0; i < count; i++) { 
             final Thread t = factory.newThread(r); 
     
 @Test(expected = NullPointerException.class) 
     public void testBuildNamingPatternNull60() { 
         builder.namingPattern(null); 
     } 
  
     /** 
      * Tries to set a null wrapped factory. 
      */ 

 @Test(expected = NullPointerException.class) 
     public void testBuildNamingPatternNull61() { 
         builder.namingPattern(null); 
     } 
  
     /** 
      * Tries to set a null wrapped factory. 
      */ 

 @Test(expected = NullPointerException.class) 
     public void testBuildNamingPatternNull62() { 
         builder.namingPattern(null); 
     } 
  
     /** 
      * Tries to set a null wrapped factory. 
      */ 

 lang3/AnnotationUtils.java
 @Test(timeout = 666000) 
     public void testToString63() throws Exception { 
         final Test testAnno = getClass().getDeclaredMethod("testToString") 
                 .getAnnotation(Test.class); 
         final String toString = AnnotationUtils.toString(testAnno); 
         assertTrue(toString.startsWith("@org.junit.Test(")); 
         assertTrue(toString.endsWith(")")); 
         assertTrue(toString.contains("expected=class org.junit.Test$None")); 
         assertTrue(toString.contains("timeout=666000")); 
         assertTrue(toString.contains(", ")); 
     } 
  
 } 

 @Test(timeout = 666000) 
     public void testToString64() throws Exception { 
         final Test testAnno = getClass().getDeclaredMethod("testToString") 
                 .getAnnotation(Test.class); 
         final String toString = AnnotationUtils.toString(testAnno); 
         assertTrue(toString.startsWith("@org.junit.Test(")); 
         assertTrue(toString.endsWith(")")); 
         assertTrue(toString.contains("expected=class org.junit.Test$None")); 
         assertTrue(toString.contains("timeout=666000")); 
         assertTrue(toString.contains(", ")); 
     } 
  
 } 

 @Test 
     public void testEquivalence65() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode66() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode67() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode68() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode69() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testToString70() throws Exception { 
         final Test testAnno = getClass().getDeclaredMethod("testToString") 
                 .getAnnotation(Test.class); 
         final String toString = AnnotationUtils.toString(testAnno); 
         assertTrue(toString.startsWith("@org.junit.Test(")); 
         assertTrue(toString.endsWith(")")); 
         assertTrue(toString.contains("expected=class org.junit.Test$None")); 
         assertTrue(toString.contains("timeout=666000")); 
         assertTrue(toString.contains(", ")); 
     } 
  
 } 

 @Test 
     public void testEquivalence71() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode72() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode73() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode74() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test 
     public void testEquivalence75() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testEquivalence76() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testEquivalence77() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testEquivalence78() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testEquivalence79() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testEquivalence80() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testEquivalence81() { 
         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); 
         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode82() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode83() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 @Test(timeout = 666000) 
     public void testHashCode84() throws Exception { 
         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); 
         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); 
         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); 
         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); 
         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); 
     } 
  

 lang3/CharRange.java
 @Test 
     public void testChaining85() { 
         final CharRange a = CharRange.is('a'); 
         final CharRange range = CharRange.isIn('a', 'd'); 
  
         final CharRange rangenotbf = CharRange.isIn('b', 'f'); 
         assertEquals('b', 'e'); 
         assertEquals('c', 'e', 'f'); 
         assertEquals('e', 'f'); 
     } 
  

 @Test 
     public void testContainsNullArg86() { 
         final CharRange range = CharRange.is('a'); 
         try { 
             @SuppressWarnings("unused") 
             final 
             boolean contains = range.contains(null); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("The Range must not be null", e.getMessage()); 
         } 
     } 
  

 @Test 
     public void testSerialization87() { 
         CharRange range = CharRange.is('a'); 
         assertEquals(range, SerializationUtils.clone(range));  
         range = CharRange.isIn('a', 'e'); 
         assertEquals(range, SerializationUtils.clone(range));  
         range = CharRange.isNotIn('a', 'e'); 
         assertEquals(range, SerializationUtils.clone(range));  
     } 
  
 } 

 @Test 
     public void testConstructorAccessors_isNotIn_Same88() { 
         final CharRange rangea = CharRange.isNotIn('a', 'a'); 
         assertEquals('a', rangea.getStart()); 
         assertEquals('a', rangea.getEnd()); 
         assertTrue(rangea.isNegated()); 
         assertEquals("^a", rangea.toString()); 
     } 
  

 @Test 
     public void testIterator89() { 
         final CharRange a = CharRange.is('a'); 
         final CharRange ad = CharRange.isIn('a', 'd'); 
         final CharRange nota = CharRange.isNot('a'); 
         final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); 
         final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); 
         final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); 
  
         final Iterator<Character> aIt = a.iterator(); 
         assertNotNull(aIt); 
         assertTrue(aIt.hasNext()); 
         assertEquals(Character.valueOf('a'), aIt.next()); 
         assertFalse(aIt
 lang3/Validate.java
 @Test 
     public void testIsTrue390() { 
         Validate.isTrue(true, "MSG", 6); 
         try { 
             Validate.isTrue(false, "MSG", 6); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testIsTrue591() { 
         Validate.isTrue(true, "MSG", 7.4d); 
         try { 
             Validate.isTrue(false, "MSG", 7.4d); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

 @Test 
     public void testIsTrue192() { 
         Validate.isTrue(true); 
         try { 
             Validate.isTrue(false); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated expression is false", ex.getMessage()); 
         } 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testNoNullElementsArray193() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array); 
         try { 
             Validate.noNullElements((Object[]) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
     
 @Test 
     public void testNoNullElementsArray194() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array); 
         try { 
             Validate.noNullElements((Object[]) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
     
 @Test 
     public void testNotEmptyArray295() { 
         Validate.notEmpty(new Object[] {null}, "MSG"); 
         try { 
             Validate.notEmpty((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(new Object[0], "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
 
 @Test 
     public void testNotEmptyArray296() { 
         Validate.notEmpty(new Object[] {null}, "MSG"); 
         try { 
             Validate.notEmpty((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(new Object[0], "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
 
 @Test 
     public void testNotEmptyCollection297() { 
         final Collection<Integer> coll = new ArrayList<Integer>(); 
         try { 
             Validate.notEmpty((Collection<?>) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(coll, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
      
 @Test 
     public void testNotEmptyMap298() { 
         final Map<String, Integer> map = new HashMap<String, Integer>(); 
         try { 
             Validate.notEmpty((Map<?, ?>) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(map, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 

 @Test 
     public void testNotEmptyMap299() { 
         final Map<String, Integer> map = new HashMap<String, Integer>(); 
         try { 
             Validate.notEmpty((Map<?, ?>) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(map, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 

 @Test 
     public void testNotEmptyMap2100() { 
         final Map<String, Integer> map = new HashMap<String, Integer>(); 
         try { 
             Validate.notEmpty((Map<?, ?>) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(map, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 

 @Test 
     public void testNotBlankBlankStringWithWhitespacesShouldThrow101() { 
         //given 
         final String string = "   "; 
  
         try { 
             //when 
             Validate.notBlank(string); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             //then 
             assertEquals("The validated character sequence is blank", e.getMessage()); 
         } 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testNotBlankBlankStringWithWhitespacesShouldThrow102() { 
         //given 
         final String string = "   "; 
  
         try { 
             //when 
             Validate.notBlank(string); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             //then 
             assertEquals("The validated character sequence is blank", e.getMessage()); 
         } 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testNotBlankBlankStringWithWhitespacesShouldThrow103() { 
         //given 
         final String string = "   "; 
  
         try { 
             //when 
             Validate.notBlank(string); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             //then 
             assertEquals("The validated character sequence is blank", e.getMessage()); 
         } 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testNoNullElementsCollection2104() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll, "MSG"); 
         try { 
             Validate.noNullElements((Collection<?>) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll, "MSG"); 
    
 @Test 
     public void testNoNullElementsCollection2105() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll, "MSG"); 
         try { 
             Validate.noNullElements((Collection<?>) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll, "MSG"); 
    
 @Test 
     public void testValidIndex_withMessage_collection106() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0, "Broken: "); 
         Validate.validIndex(coll, 1, "Broken: "); 
         try { 
             Validate.validIndex(coll, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2
 @Test 
     public void testValidIndex_withMessage_collection107() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0, "Broken: "); 
         Validate.validIndex(coll, 1, "Broken: "); 
         try { 
             Validate.validIndex(coll, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2
 @Test 
     public void testValidIndex_withMessage_charSequence108() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0, "Broken: "); 
         Validate.validIndex(str, 1, "Broken: "); 
         try { 
             Validate.validIndex(str, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
 
 @Test 
     public void testMatchesPattern109() 
     { 
         final CharSequence str = "hi"; 
         Validate.matchesPattern(str, "[a-z]*"); 
         try 
         { 
             Validate.matchesPattern(str, "[0-9]*"); 
             fail("Expecting IllegalArgumentException"); 
         } 
         catch (final IllegalArgumentException e) 
         { 
             assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); 
         } 
     } 
      

 @Test 
     public void testIsInstanceOfExceptionMessage110() { 
         try { 
             Validate.isInstanceOf(List.class, "hi"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); 
         } 
     } 
      

 @Test 
     public void testIsInstanceOfExceptionMessage111() { 
         try { 
             Validate.isInstanceOf(List.class, "hi"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); 
         } 
     } 
      

 lang3/tuple/MutableTriple.java
 @Test 
     public void testMutate112() throws Exception { 
         final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); 
         triple.setLeft(42); 
         triple.setMiddle("bar"); 
         triple.setRight(Boolean.FALSE); 
         assertEquals(42, triple.getLeft().intValue()); 
         assertEquals("bar", triple.getMiddle()); 
         assertEquals(Boolean.FALSE, triple.getRight()); 
     } 
  

 @Test 
     public void testMutate113() throws Exception { 
         final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); 
         triple.setLeft(42); 
         triple.setMiddle("bar"); 
         triple.setRight(Boolean.FALSE); 
         assertEquals(42, triple.getLeft().intValue()); 
         assertEquals("bar", triple.getMiddle()); 
         assertEquals(Boolean.FALSE, triple.getRight()); 
     } 
  

 @Test 
     public void testMutate114() throws Exception { 
         final MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, "foo"); 
         pair.setLeft(42); 
         pair.setRight("bar"); 
         assertEquals(42, pair.getLeft().intValue()); 
         assertEquals("bar", pair.getRight()); 
     } 
  

 @Test 
     public void testMutate115() throws Exception { 
         final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); 
         triple.setLeft(42); 
         triple.setMiddle("bar"); 
         triple.setRight(Boolean.FALSE); 
         assertEquals(42, triple.getLeft().intValue()); 
         assertEquals("bar", triple.getMiddle()); 
         assertEquals(Boolean.FALSE, triple.getRight()); 
     } 
  

 @Test 
     public void testMutate116() throws Exception { 
         final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); 
         triple.setLeft(42); 
         triple.setMiddle("bar"); 
         triple.setRight(Boolean.FALSE); 
         assertEquals(42, triple.getLeft().intValue()); 
         assertEquals("bar", triple.getMiddle()); 
         assertEquals(Boolean.FALSE, triple.getRight()); 
     } 
  

 lang3/mutable/MutableBoolean.java
 @Test(expected=NullPointerException.class) 
     public void testSetNull117() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.setValue(null); 
     } 
  

 @Test 
     public void testToBoolean118() { 
         assertFalse(BooleanUtils.toBoolean(true)); 
         assertFalse(BooleanUtils.toBoolean(false)); 
         assertFalse(BooleanUtils.toBoolean((Boolean) 0))); 
     } 
  

 @Test(expected=NullPointerException.class) 
     public void testCompareToNull119() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

 @Test(expected=NullPointerException.class) 
     public void testCompareToNull120() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

 @Test 
     public void testToString121() { 
         assertEquals("0", new MutableInt(0).toString()); 
         assertEquals("10", new MutableInt(10).toString()); 
         assertEquals("-123", new MutableInt(-123).toString()); 
     } 
  
 } 

 lang3/math/NumberUtils.java
 @Test 
     public void testToIntStringI122() { 
         assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345); 
         assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5); 
     } 
  
     /** 
      * Test for {@link NumberUtils#toLong(String)}. 
      */ 

 @Test 
     public void testToLongStringL123() { 
         assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l); 
         assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l); 
     } 
  
     /** 
      * Test for {@link NumberUtils#toFloat(String)}. 
      */ 

 @Test 
     public void testToFloatString124() { 
         assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); 
         assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); 
         assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); 
         assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE+"") ==  Float.MAX_VALUE); 
         assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE+"") == Float.MIN_VALUE); 
         assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); 
         assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); 
    
 @Test 
     public void testStringToDoubleStringD125() { 
         assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d); 
         assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d); 
     } 
  
      /** 
      * Test for {@link NumberUtils#toByte(String)}. 
      */ 

 @Test 
     public void testToByteStringI126() { 
         assertTrue("toByte(String,byte) 1 failed", NumberUtils.toByte("123", (byte) 5) == 123); 
         assertTrue("toByte(String,byte) 2 failed", NumberUtils.toByte("12.3", (byte) 5) == 5); 
     } 
  
     /** 
      * Test for {@link NumberUtils#toShort(String)}. 
      */ 

 @Test 
     public void testToShortString127() { 
         assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); 
         assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); 
         assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); 
         assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); 
     } 
  
     /** 
      * Test for {@link NumberUtils#toShort(String, short)}. 
      */ 

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2128() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2129() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2130() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2131() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2132() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2133() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2134() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (no decimal) 
     public void testCreateNumberFailure_4135() { 
         NumberUtils.createNumber("1eE+00001"); 
     } 
  
     // Tests to show when magnitude causes switch to next Number type 
     // Will probably need to be adjusted if code is changed to check precision (LANG-693) 

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2136() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2137() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2138() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2139() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2140() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2141() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test 
     public void testCreateNumberMagnitude142() { 
         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type 
         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); 
         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); 
  
         // Test Double.MAX_VALUE 
         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); 
         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) 
         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); 
 
 @Test 
     public void testCreateNumberMagnitude143() { 
         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type 
         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); 
         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); 
  
         // Test Double.MAX_VALUE 
         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); 
         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) 
         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); 
 
 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2144() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testCreateNumberFailure_2145() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test 
     public void testCreateNumberMagnitude146() { 
         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type 
         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); 
         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); 
  
         // Test Double.MAX_VALUE 
         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); 
         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) 
         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); 
 
 @Test 
     public void testMinInt147() { 
         assertEquals( 
             "min(int[]) failed for array length 1", 
             5, 
             NumberUtils.min(new int[] { 5 })); 
  
         assertEquals( 
             "min(int[]) failed for array length 2", 
             6, 
             NumberUtils.min(new int[] { 6, 9 })); 
  
         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); 
         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); 
     } 
  

 @Test 
     public void testMinInt148() { 
         assertEquals( 
             "min(int[]) failed for array length 1", 
             5, 
             NumberUtils.min(new int[] { 5 })); 
  
         assertEquals( 
             "min(int[]) failed for array length 2", 
             6, 
             NumberUtils.min(new int[] { 6, 9 })); 
  
         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); 
         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); 
     } 
  

 @Test 
     public void testMinInt149() { 
         assertEquals( 
             "min(int[]) failed for array length 1", 
             5, 
             NumberUtils.min(new int[] { 5 })); 
  
         assertEquals( 
             "min(int[]) failed for array length 2", 
             6, 
             NumberUtils.min(new int[] { 6, 9 })); 
  
         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); 
         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); 
     } 
  

 @Test 
     public void testMinShort150() { 
         assertEquals( 
             "min(short[]) failed for array length 1", 
             5, 
             NumberUtils.min(new short[] { 5 })); 
  
         assertEquals( 
             "min(short[]) failed for array length 2", 
             6, 
             NumberUtils.min(new short[] { 6, 9 })); 
  
         assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); 
         assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); 
     } 
  

 @Test 
     public void testMinDouble151() { 
         assertEquals( 
             "min(double[]) failed for array length 1", 
             5.12, 
             NumberUtils.min(new double[] { 5.12 }), 
             0); 
  
         assertEquals( 
             "min(double[]) failed for array length 2", 
             6.23, 
             NumberUtils.min(new double[] { 6.23, 9.34 }), 
             0); 
  
         assertEquals( 
             "min(double[]) failed for array length 5", 
             -10.
 @Test(expected = IllegalArgumentException.class) 
     public void testMinFloat_emptyArray152() { 
         NumberUtils.min(new float[0]); 
     } 
  

 @Test 
     public void testLang381153() { 
         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); 
         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); 
  
         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; 
         assertTrue(Double.isNaN(NumberUtils.max(a))); 
         assertTrue(Double.isNaN(NumberUtils.min(a))); 
  
         final double[] b =
 @Test(expected = IllegalArgumentException.class) 
     public void testMinFloat_emptyArray154() { 
         NumberUtils.min(new float[0]); 
     } 
  

 @Test 
     public void testMaxLong155() { 
         assertEquals( 
             "max(long[]) failed for array length 1", 
             5, 
             NumberUtils.max(new long[] { 5 })); 
  
         assertEquals( 
             "max(long[]) failed for array length 2", 
             9, 
             NumberUtils.max(new long[] { 6, 9 })); 
  
         assertEquals(-10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); 
         assertEquals(10, NumberUtils.max(new long[] { -5, 0, -10, 5, 10 })); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testMaxLong_emptyArray156() { 
         NumberUtils.max(new long[0]); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testMaxLong_emptyArray157() { 
         NumberUtils.max(new long[0]); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testMaxInt_emptyArray158() { 
         NumberUtils.max(new int[0]); 
     } 
  

 @Test 
     public void testMaxInt159() { 
         assertEquals( 
             "max(int[]) failed for array length 1", 
             5, 
             NumberUtils.max(new int[] { 5 })); 
  
         assertEquals( 
             "max(int[]) failed for array length 2", 
             9, 
             NumberUtils.max(new int[] { 6, 9 })); 
  
         assertEquals(-10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); 
         assertEquals(10, NumberUtils.max(new int[] { -5, 0, -10, 5, 10 })); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testMaxByte_emptyArray160() { 
         NumberUtils.max(new byte[0]); 
     } 
  

 @Test 
     public void testMaxByte161() { 
         assertEquals( 
             "max(byte[]) failed for array length 1", 
             5, 
             NumberUtils.max(new byte[] { 5 })); 
  
         assertEquals( 
             "max(byte[]) failed for array length 2", 
             9, 
             NumberUtils.max(new byte[] { 6, 9 })); 
  
         assertEquals( 
             "max(byte[]) failed for array length 5", 
             10, 
             NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); 
    
 @Test(expected = IllegalArgumentException.class) 
     public void testMaxByte_emptyArray162() { 
         NumberUtils.max(new byte[0]); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testMaxDouble_emptyArray163() { 
         NumberUtils.max(new double[0]); 
     } 
  

 @Test 
     public void testLang381164() { 
         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); 
         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); 
  
         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; 
         assertTrue(Double.isNaN(NumberUtils.max(a))); 
         assertTrue(Double.isNaN(NumberUtils.min(a))); 
  
         final double[] b =
 @Test 
     public void testLang381165() { 
         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); 
         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); 
  
         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; 
         assertTrue(Double.isNaN(NumberUtils.max(a))); 
         assertTrue(Double.isNaN(NumberUtils.min(a))); 
  
         final double[] b =
 @Test(expected = IllegalArgumentException.class) 
     public void testMaxFloat_emptyArray166() { 
         NumberUtils.max(new float[0]); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testMinInt_nullArray167() { 
         NumberUtils.min((int[]) null); 
     } 
  

 @Test 
     public void testMinimumInt168() { 
         assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); 
         assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); 
         assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); 
         assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); 
         assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); 
     } 
  

 @Test 
     public void testMaximumInt169() { 
         assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); 
         assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); 
         assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345)); 
         assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345)); 
         assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345)); 
     } 
  

 @Test 
     public void testIsDigits170() { 
         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); 
         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); 
         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); 
         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); 
         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); 
         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); 
     } 
  
     /** 
      * Tests isNumber(String) and tests that createNumber(String) returns 
      * a valid number iff isNumber(String) returns false. 
      */ 

 @Test 
     public void testIsDigits171() { 
         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); 
         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); 
         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); 
         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); 
         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); 
         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); 
     } 
  
     /** 
      * Tests isNumber(String) and tests that createNumber(String) returns 
      * a valid number iff isNumber(String) returns false. 
      */ 

 @Test 
     public void testIsDigits172() { 
         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); 
         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); 
         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); 
         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); 
         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); 
         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); 
     } 
  
     /** 
      * Tests isNumber(String) and tests that createNumber(String) returns 
      * a valid number iff isNumber(String) returns false. 
      */ 

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2173() { 
         NumberUtils.isNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2174() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2175() { 
         NumberUtils.isNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2176() { 
         NumberUtils.isNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2177() { 
         NumberUtils.isNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2178() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2179() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2180() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2181() { 
         NumberUtils.isNumber("-1.1E+0-7e00"); 
     } 
  

 @Test(expected=NumberFormatException.class) 
     // Check that the code fails to create a valid number when both e and E are present (with decimal) 
     public void testIsNumberFailure_2182() { 
         NumberUtils.createNumber("-1.1E+0-7e00"); 
     } 
  

 lang3/builder/ToStringBuilder.java
 @Test 
     public void testGetSetDefault183() { 
         try { 
             ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE); 
             assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle()); 
         } finally { 
             // reset for other tests 
             ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE); 
         } 
     } 
  

 @Test 
     public void testFloat184() { 
         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); 
     } 
  

 @Test 
     public void testIntArray185() { 
         int[] array = new int[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testShortArrayArray186() { 
         short[][] array = new short[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testShortArray187() { 
         short[] array = new short[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testChar188() { 
         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); 
         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); 
         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); 
     } 
  

 @Test 
     public void testDouble189() { 
         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); 
     } 
  

 @Test 
     public void testLong190() { 
         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); 
         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); 
         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); 
     } 
  
     @SuppressWarnings("cast") // cast is not really needed, keep for consistency 

 @Test 
     public void testShort191() { 
         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); 
         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); 
         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); 
     } 
  

 @Test 
     public void testConstructorEx2192() { 
         assertEquals("<null>", new ToStringBuilder(null, null).toString()); 
         new ToStringBuilder(this.base, null).toString(); 
     } 
  

 @Test 
     public void testAppendSuper193() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 lang3/RandomStringUtils.java
 @Test 
     public void testRandomStringUtils194() { 
         String r1 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r1.length()); 
         String r2 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r2.length()); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
          
         r1 = RandomStringUtils.randomAscii(50); 
         assertEquals("randomAscii(50) length", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); 
      
 @Test 
     public void testLANG807195() { 
         try { 
             RandomStringUtils.random(3,5,5,false,false); 
             fail("Expected IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { // distinguish from Random#nextInt message 
             final String msg = ex.getMessage(); 
             assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); 
             assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); 
         } 
     } 
  

 @Test 
     public void testLANG805196() { 
         final long seed = System.currentTimeMillis(); 
         assertEquals("aaa", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed))); 
     } 
  

 @Test 
     public void testLANG807197() { 
         try { 
             RandomStringUtils.random(3,5,5,false,false); 
             fail("Expected IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { // distinguish from Random#nextInt message 
             final String msg = ex.getMessage(); 
             assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); 
             assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); 
         } 
     } 
  

 @Test 
     public void testLANG805198() { 
         final long seed = System.currentTimeMillis(); 
         assertEquals("aaa", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed))); 
     } 
  

 @Test 
     public void testLANG807199() { 
         try { 
             RandomStringUtils.random(3,5,5,false,false); 
             fail("Expected IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { // distinguish from Random#nextInt message 
             final String msg = ex.getMessage(); 
             assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); 
             assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); 
         } 
     } 
  

 @Test 
     public void testLANG807200() { 
         try { 
             RandomStringUtils.random(3,5,5,false,false); 
             fail("Expected IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { // distinguish from Random#nextInt message 
             final String msg = ex.getMessage(); 
             assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); 
             assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); 
         } 
     } 
  

 @Test 
     public void testLANG807201() { 
         try { 
             RandomStringUtils.random(3,5,5,false,false); 
             fail("Expected IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { // distinguish from Random#nextInt message 
             final String msg = ex.getMessage(); 
             assertTrue("Message (" + msg + ") must contain 'start'", msg.contains("start")); 
             assertTrue("Message (" + msg + ") must contain 'end'", msg.contains("end")); 
         } 
     } 
  

 lang3/exception/ContextedException.java
 @Test 
     public void testNullExceptionPassing202() { 
         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) 
         .addContextValue("test1", null) 
         .addContextValue("test2", "some value") 
         .addContextValue("test Date", new Date()) 
         .addContextValue("test Nbr", Integer.valueOf(5)) 
         .addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); 
          
         final String message = exceptionContext.getMessage(); 
         assertTrue(message != null); 
     } 
  

 @Test 
     public void testGetContextValues203() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testGetContextValues204() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testGetContextValues205() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testGetContextValues206() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testGetContextValues207() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testContextedException208() { 
         exceptionContext = new ContextedException(); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(StringUtils.isEmpty(message)); 
     } 
  

 lang3/builder/HashCodeBuilder.java
 @Test 
     public void testReflectionHashCode209() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testReflectionHashCode210() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testReflectionHashCode211() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testReflectionHashCode212() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testReflectionHashCode213() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testReflectionHashCode214() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testReflectionHashCode215() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testReflectionHashCode216() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testBooleanArrayAsObject217() { 
         final boolean[] obj = new boolean[2]; 
         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = true; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = false; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testBooleanArrayAsObject218() { 
         final boolean[] obj = new boolean[2]; 
         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = true; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = false; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testByteArrayAsObject219() { 
         final byte[] obj = new byte[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = (byte) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = (byte) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testByteArrayAsObject220() { 
         final byte[] obj = new byte[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = (byte) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = (byte) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testByteArrayAsObject221() { 
         final byte[] obj = new byte[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = (byte) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = (byte) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testCharArray222() { 
         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode()); 
         final char[] obj = new char[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[0] = (char) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[1] = (char) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
     } 
  

 @Test 
     public void testDoubleArrayAsObject223() { 
         final double[] obj = new double[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = 5.4d; 
         final long l1 = Double.doubleToLongBits(5.4d); 
         final int h1 = (int) (l1 ^ l1 >> 32); 
         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = 6.3d; 
         final long l2 = Double.doubleToLongBits(6.3d); 
         final int h2 = (int) (l2 ^ l2 >> 32); 
         assertEquals((17 * 37 + h1) * 37 + h2, new Hash
 @Test 
     public void testDoubleArrayAsObject224() { 
         final double[] obj = new double[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = 5.4d; 
         final long l1 = Double.doubleToLongBits(5.4d); 
         final int h1 = (int) (l1 ^ l1 >> 32); 
         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = 6.3d; 
         final long l2 = Double.doubleToLongBits(6.3d); 
         final int h2 = (int) (l2 ^ l2 >> 32); 
         assertEquals((17 * 37 + h1) * 37 + h2, new Hash
 @Test 
     public void testFloatArrayAsObject225() { 
         final float[] obj = new float[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = 5.4f; 
         final int h1 = Float.floatToIntBits(5.4f); 
         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = 6.3f; 
         final int h2 = Float.floatToIntBits(6.3f); 
         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testIntArrayAsObject226() { 
         final int[] obj = new int[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testLongArrayAsObject227() { 
         final long[] obj = new long[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = 5L; 
         final int h1 = (int) (5L ^ 5L >> 32); 
         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = 6L; 
         final int h2 = (int) (6L ^ 6L >> 32); 
         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testLongArrayAsObject228() { 
         final long[] obj = new long[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = 5L; 
         final int h1 = (int) (5L ^ 5L >> 32); 
         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = 6L; 
         final int h2 = (int) (6L ^ 6L >> 32); 
         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testBooleanArrayAsObject229() { 
         final boolean[] obj = new boolean[2]; 
         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = true; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = false; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testCharArrayAsObject230() { 
         final char[] obj = new char[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = (char) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = (char) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testBooleanArrayAsObject231() { 
         final boolean[] obj = new boolean[2]; 
         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = true; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = false; 
         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
     } 
  

 @Test 
     public void testDoubleArrayAsObject232() { 
         final double[] obj = new double[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[0] = 5.4d; 
         final long l1 = Double.doubleToLongBits(5.4d); 
         final int h1 = (int) (l1 ^ l1 >> 32); 
         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); 
         obj[1] = 6.3d; 
         final long l2 = Double.doubleToLongBits(6.3d); 
         final int h2 = (int) (l2 ^ l2 >> 32); 
         assertEquals((17 * 37 + h1) * 37 + h2, new Hash
 @Test 
     public void testObjectArray233() { 
         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); 
         final Object[] obj = new Object[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[0] = new Object(); 
         assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[1] = new Object(); 
         assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj) 
                 .toHashCode()); 
     } 
  

 @Test 
     public void testShortArray234() { 
         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); 
         final short[] obj = new short[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[0] = (short) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[1] = (short) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
     } 
  

 @Test 
     public void testShortArray235() { 
         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); 
         final short[] obj = new short[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[0] = (short) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[1] = (short) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
     } 
  

 @Test 
     public void testShortArray236() { 
         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); 
         final short[] obj = new short[2]; 
         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[0] = (short) 5; 
         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
         obj[1] = (short) 6; 
         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); 
     } 
  

 @Test 
     public void testSuper237() { 
         final Object obj = new Object(); 
         assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper( 
                 new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); 
     } 
  

 @Test 
     public void testHashCodeEqualsHashCode238() { 
         final HashCodeBuilder hcb = new HashCodeBuilder(17, 37).append(new Object()).append('a'); 
         assertEquals("hashCode() is no longer returning the same value as toHashCode() - see LANG-520",  
                       hcb.toHashCode(), hcb.hashCode()); 
     } 
  
 } 

 lang3/text/translate/OctalUnescaper.java
 @Test 
     public void testBetween239() { 
         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); 
  
         String input = "\\45"; 
         String result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\45", result); 
  
         input = "\\377"; 
         result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\377", result); 
  
         input = "\\377 and"; 
         result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); 
  
         input = "\\378
 @Test 
     public void testBetween240() { 
         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); 
  
         String input = "\\45"; 
         String result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\45", result); 
  
         input = "\\377"; 
         result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\377", result); 
  
         input = "\\377 and"; 
         result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); 
  
         input = "\\378
 @Test 
     public void testBetween241() { 
         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); 
  
         String input = "\\45"; 
         String result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\45", result); 
  
         input = "\\377"; 
         result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\377", result); 
  
         input = "\\377 and"; 
         result = oue.translate(input); 
         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); 
  
         input = "\\378
 lang3/text/FormattableUtils.java
 @Test 
     public void testAlternatePadCharacter242() { 
         final char pad='_'; 
         assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, pad).toString()); 
         assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, pad).toString()); 
         assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, pad).toString()); 
         assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, pad).toString()); 
         assertEquals("_fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, pad).toString()); 
         assertEquals("___fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, pad).toString()); 
         assertEquals("
 lang3/BitField.java
 @Test 
     public void testGetShortValue243() { 
         assertEquals(bf_multi.getShortValue((short) - 1), (short) 127); 
         assertEquals(bf_multi.getShortValue((short) 0), (short) 0); 
         assertEquals(bf_single.getShortValue((short) - 1), (short) 1); 
         assertEquals(bf_single.getShortValue((short) 0), (short) 0); 
         assertEquals(bf_zero.getShortValue((short) -1), (short) 0); 
         assertEquals(bf_zero.getShortValue((short) 0), (short) 0); 
     } 
  
     /** 
      * test the getRawValue() method 
      */ 

 @Test 
     public void testSetBoolean244() { 
         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); 
         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); 
         assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); 
         assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); 
         assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); 
         assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); 
     } 
  
     /** 
      * test the setShortBoolean() method 
      */ 

 @Test 
     public void testSetBoolean245() { 
         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); 
         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); 
         assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); 
         assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); 
         assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); 
         assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); 
     } 
  
     /** 
      * test the setShortBoolean() method 
      */ 

 @Test 
     public void testSetBoolean246() { 
         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); 
         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); 
         assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); 
         assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); 
         assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); 
         assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); 
     } 
  
     /** 
      * test the setShortBoolean() method 
      */ 

 lang3/concurrent/ConcurrentUtils.java
 @Test 
     public void testHandleCauseChecked247() { 
         final Exception ex = new Exception("Test"); 
         try { 
             ConcurrentUtils.handleCause(new ExecutionException(ex)); 
             fail("ConcurrentException not thrown!"); 
         } catch (final ConcurrentException cex) { 
             assertEquals("Wrong cause", ex, cex.getCause()); 
         } 
     } 
  
     /** 
      * Tests handleCause() for a null parameter or a null cause. In this case 
      * the method should do nothing. We can only test that no exception is 
      * thrown. 
      */ 

 @Test 
     public void testExtractCauseUncheckedNull248() { 
         assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(null)); 
     } 
  
     /** 
      * Tests extractCauseUnchecked() if the cause of the passed in exception is null. 
      */ 

 @Test 
     public void testExtractCauseUncheckedNull249() { 
         assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(null)); 
     } 
  
     /** 
      * Tests extractCauseUnchecked() if the cause of the passed in exception is null. 
      */ 

 @Test 
     public void testHandleCauseChecked250() { 
         final Exception ex = new Exception("Test"); 
         try { 
             ConcurrentUtils.handleCause(new ExecutionException(ex)); 
             fail("ConcurrentException not thrown!"); 
         } catch (final ConcurrentException cex) { 
             assertEquals("Wrong cause", ex, cex.getCause()); 
         } 
     } 
  
     /** 
      * Tests handleCause() for a null parameter or a null cause. In this case 
      * the method should do nothing. We can only test that no exception is 
      * thrown. 
      */ 

 @Test 
     public void testPutIfAbsentKeyPresent251() { 
         final String key = "testKey"; 
         final Integer value = 42; 
         final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); 
         map.put(key, value); 
         assertEquals("Wrong result", value, 
                 ConcurrentUtils.putIfAbsent(map, key, 0)); 
         assertEquals("Wrong value in map", value, map.get(key)); 
     } 
  
     /** 
      * Tests putIfAbsent() if the map does not contain the key in question. 
      */ 

 @Test 
     public void testPutIfAbsentKeyPresent252() { 
         final String key = "testKey"; 
         final Integer value = 42; 
         final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); 
         map.put(key, value); 
         assertEquals("Wrong result", value, 
                 ConcurrentUtils.putIfAbsent(map, key, 0)); 
         assertEquals("Wrong value in map", value, map.get(key)); 
     } 
  
     /** 
      * Tests putIfAbsent() if the map does not contain the key in question. 
      */ 

 @Test 
     public void testCreateIfAbsentNullMap253() { 
         assertNull("Wrong result", 
                 ConcurrentUtils.createIfAbsent(null, "test", 100)); 
     } 
  
     /** 
      * Tests createIfAbsent() if the key is found in the map. 
      */ 

 @Test 
     public void testCreateIfAbsentUncheckedException254() 
             throws ConcurrentException { 
         @SuppressWarnings("unchecked") 
         final 
         ConcurrentInitializer<Integer> init = EasyMock 
                 .createMock(ConcurrentInitializer.class); 
         final Exception ex = new Exception(); 
         EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); 
         EasyMock.replay(init); 
         try { 
             ConcurrentUtils.createIfAbsentUnchecked( 
                     new ConcurrentHashMap<String, Integer>(), "test", init); 
             fail("Exception not thrown!"); 
    
 @Test 
     public void testCreateIfAbsentNullMap255() { 
         assertNull("Wrong result", 
                 ConcurrentUtils.createIfAbsent(null, "test", 100)); 
     } 
  
     /** 
      * Tests createIfAbsent() if the key is found in the map. 
      */ 

 lang3/Conversion.java
 @Test 
     public void testHexDigitMsb0ToInt256() { 
         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); 
         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); 
         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); 
         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); 
         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); 
         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); 
         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); 
         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); 
         assertEquals(0x1, Conversion.hexDig
 @Test 
     public void testHexDigitMsb0ToInt257() { 
         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); 
         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); 
         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); 
         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); 
         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); 
         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); 
         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); 
         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); 
         assertEquals(0x1, Conversion.hexDig
 @Test 
     public void testHexDigitMsb0ToInt258() { 
         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); 
         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); 
         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); 
         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); 
         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); 
         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); 
         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); 
         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); 
         assertEquals(0x1, Conversion.hexDig
 @Test 
     public void testHexDigitMsb0ToInt259() { 
         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); 
         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); 
         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); 
         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); 
         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); 
         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); 
         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); 
         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); 
         assertEquals(0x1, Conversion.hexDig
 @Test 
     public void testHexDigitMsb0ToInt260() { 
         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); 
         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); 
         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); 
         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); 
         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); 
         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); 
         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); 
         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); 
         assertEquals(0x1, Conversion.hexDig
 @Test 
     public void testHexDigitMsb0ToInt261() { 
         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); 
         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); 
         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); 
         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); 
         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); 
         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); 
         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); 
         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); 
         assertEquals(0x1, Conversion.hexDig
 @Test 
     public void testHexDigitToBinary262() { 
         assertBinaryEquals( 
             new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0')); 
         assertBinaryEquals( 
             new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1')); 
         assertBinaryEquals( 
             new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2')); 
         assertBinaryEquals( 
             new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4')); 
    
 @Test 
     public void testHexDigitToBinary263() { 
         assertBinaryEquals( 
             new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0')); 
         assertBinaryEquals( 
             new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1')); 
         assertBinaryEquals( 
             new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2')); 
         assertBinaryEquals( 
             new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4')); 
    
 @Test 
     public void testHexDigitMsb0ToBinary264() { 
         assertBinaryEquals( 
             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); 
         assertBinaryEquals( 
             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); 
         assertBinaryEquals( 
             new boolean[]{false, true, false, false}, Conversion.hexDigit
 @Test 
     public void testHexDigitMsb0ToBinary265() { 
         assertBinaryEquals( 
             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); 
         assertBinaryEquals( 
             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); 
         assertBinaryEquals( 
             new boolean[]{false, true, false, false}, Conversion.hexDigit
 @Test 
     public void testHexDigitMsb0ToBinary266() { 
         assertBinaryEquals( 
             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); 
         assertBinaryEquals( 
             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); 
         assertBinaryEquals( 
             new boolean[]{false, true, false, false}, Conversion.hexDigit
 @Test 
     public void testHexDigitMsb0ToBinary267() { 
         assertBinaryEquals( 
             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); 
         assertBinaryEquals( 
             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); 
         assertBinaryEquals( 
             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); 
         assertBinaryEquals( 
             new boolean[]{false, true, false, false}, Conversion.hexDigit
 @Test 
     public void testBinaryToHexDigit268() { 
         assertEquals( 
             '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false})); 
         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false})); 
         assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false})); 
         assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false})); 
         assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false})); 
         assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false})); 
         assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false})); [
 @Test 
     public void testBinaryToHexDigit_2args269() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigit_2args270() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigit_2args271() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigit_2args272() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigit_2args273() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigit_2args274() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigit_2args275() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigit_2args276() { 
         final boolean[] shortArray = new boolean[]{false, true, true}; 
         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); 
         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; 
         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); 
         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); 
         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); 
         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); 
   
 @Test 
     public void testBinaryToHexDigitMsb0_bits277() { 
         assertEquals( 
             '0', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); 
         assertEquals( 
             '1', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); 
         assertEquals( 
             '2', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); 
         assertEquals( 
             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false,
 @Test 
     public void testBinaryToHexDigitMsb0_bits278() { 
         assertEquals( 
             '0', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); 
         assertEquals( 
             '1', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); 
         assertEquals( 
             '2', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); 
         assertEquals( 
             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false,
 @Test 
     public void testBinaryToHexDigitMsb0_bits279() { 
         assertEquals( 
             '0', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); 
         assertEquals( 
             '1', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); 
         assertEquals( 
             '2', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); 
         assertEquals( 
             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false,
 @Test 
     public void testBinaryToHexDigitMsb0_bits280() { 
         assertEquals( 
             '0', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); 
         assertEquals( 
             '1', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); 
         assertEquals( 
             '2', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); 
         assertEquals( 
             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false,
 @Test 
     public void testBinaryToHexDigitMsb0_bits281() { 
         assertEquals( 
             '0', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); 
         assertEquals( 
             '1', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); 
         assertEquals( 
             '2', 
             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); 
         assertEquals( 
             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false,
 @Test 
     public void testBinaryBeMsb0ToHexDigit_2args282() { 
         assertEquals( 
             '5', 
             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ 
                 true, false, false, false, false, false, false, false, false, false, false, 
                 true, false, true, false, false}, 2)); 
  
         final boolean[] shortArray = new boolean[]{true, true, false}; 
         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); 
    
 @Test 
     public void testBinaryBeMsb0ToHexDigit_2args283() { 
         assertEquals( 
             '5', 
             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ 
                 true, false, false, false, false, false, false, false, false, false, false, 
                 true, false, true, false, false}, 2)); 
  
         final boolean[] shortArray = new boolean[]{true, true, false}; 
         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); 
    
 @Test 
     public void testBinaryBeMsb0ToHexDigit_2args284() { 
         assertEquals( 
             '5', 
             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ 
                 true, false, false, false, false, false, false, false, false, false, false, 
                 true, false, true, false, false}, 2)); 
  
         final boolean[] shortArray = new boolean[]{true, true, false}; 
         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); 
    
 @Test 
     public void testBinaryBeMsb0ToHexDigit_2args285() { 
         assertEquals( 
             '5', 
             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ 
                 true, false, false, false, false, false, false, false, false, false, false, 
                 true, false, true, false, false}, 2)); 
  
         final boolean[] shortArray = new boolean[]{true, true, false}; 
         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); 
    
 @Test 
     public void testBinaryBeMsb0ToHexDigit_2args286() { 
         assertEquals( 
             '5', 
             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ 
                 true, false, false, false, false, false, false, false, false, false, false, 
                 true, false, true, false, false}, 2)); 
  
         final boolean[] shortArray = new boolean[]{true, true, false}; 
         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); 
    
 @Test 
     public void testBinaryBeMsb0ToHexDigit_2args287() { 
         assertEquals( 
             '5', 
             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ 
                 true, false, false, false, false, false, false, false, false, false, false, 
                 true, false, true, false, false}, 2)); 
  
         final boolean[] shortArray = new boolean[]{true, true, false}; 
         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); 
    
 @Test 
     public void testBinaryBeMsb0ToHexDigit_2args288() { 
         assertEquals( 
             '5', 
             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ 
                 true, false, false, false, false, false, false, false, false, false, false, 
                 true, false, true, false, false}, 2)); 
  
         final boolean[] shortArray = new boolean[]{true, true, false}; 
         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); 
         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); 
         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); 
    
 @Test 
     public void testIntToHexDigit289() { 
         assertEquals('0', Conversion.intToHexDigit(0)); 
         assertEquals('1', Conversion.intToHexDigit(1)); 
         assertEquals('2', Conversion.intToHexDigit(2)); 
         assertEquals('3', Conversion.intToHexDigit(3)); 
         assertEquals('4', Conversion.intToHexDigit(4)); 
         assertEquals('5', Conversion.intToHexDigit(5)); 
         assertEquals('6', Conversion.intToHexDigit(6)); 
         assertEquals('7', Conversion.intToHexDigit(7)); 
         assertEquals('8', Conversion.intToHexDigit(8)); 
         assertEquals('9', Conversion.intToHexDigit(9)); 
     
 @Test 
     public void testIntToHexDigitMsb0290() { 
         assertEquals('0', Conversion.intToHexDigitMsb0(0)); 
         assertEquals('8', Conversion.intToHexDigitMsb0(1)); 
         assertEquals('4', Conversion.intToHexDigitMsb0(2)); 
         assertEquals('c', Conversion.intToHexDigitMsb0(3)); 
         assertEquals('2', Conversion.intToHexDigitMsb0(4)); 
         assertEquals('a', Conversion.intToHexDigitMsb0(5)); 
         assertEquals('6', Conversion.intToHexDigitMsb0(6)); 
         assertEquals('e', Conversion.intToHexDigitMsb0(7)); 
         assertEquals('1', Conversion.intToHexDigitMsb0(8)); 
    
 @Test 
     public void testIntToHexDigitMsb0291() { 
         assertEquals('0', Conversion.intToHexDigitMsb0(0)); 
         assertEquals('8', Conversion.intToHexDigitMsb0(1)); 
         assertEquals('4', Conversion.intToHexDigitMsb0(2)); 
         assertEquals('c', Conversion.intToHexDigitMsb0(3)); 
         assertEquals('2', Conversion.intToHexDigitMsb0(4)); 
         assertEquals('a', Conversion.intToHexDigitMsb0(5)); 
         assertEquals('6', Conversion.intToHexDigitMsb0(6)); 
         assertEquals('e', Conversion.intToHexDigitMsb0(7)); 
         assertEquals('1', Conversion.intToHexDigitMsb0(8)); 
    
 @Test 
     public void testIntToHexDigitMsb0292() { 
         assertEquals('0', Conversion.intToHexDigitMsb0(0)); 
         assertEquals('8', Conversion.intToHexDigitMsb0(1)); 
         assertEquals('4', Conversion.intToHexDigitMsb0(2)); 
         assertEquals('c', Conversion.intToHexDigitMsb0(3)); 
         assertEquals('2', Conversion.intToHexDigitMsb0(4)); 
         assertEquals('a', Conversion.intToHexDigitMsb0(5)); 
         assertEquals('6', Conversion.intToHexDigitMsb0(6)); 
         assertEquals('e', Conversion.intToHexDigitMsb0(7)); 
         assertEquals('1', Conversion.intToHexDigitMsb0(8)); 
    
 @Test 
     public void testIntToHexDigitMsb0293() { 
         assertEquals('0', Conversion.intToHexDigitMsb0(0)); 
         assertEquals('8', Conversion.intToHexDigitMsb0(1)); 
         assertEquals('4', Conversion.intToHexDigitMsb0(2)); 
         assertEquals('c', Conversion.intToHexDigitMsb0(3)); 
         assertEquals('2', Conversion.intToHexDigitMsb0(4)); 
         assertEquals('a', Conversion.intToHexDigitMsb0(5)); 
         assertEquals('6', Conversion.intToHexDigitMsb0(6)); 
         assertEquals('e', Conversion.intToHexDigitMsb0(7)); 
         assertEquals('1', Conversion.intToHexDigitMsb0(8)); 
    
 @Test 
     public void testIntToHexDigitMsb0294() { 
         assertEquals('0', Conversion.intToHexDigitMsb0(0)); 
         assertEquals('8', Conversion.intToHexDigitMsb0(1)); 
         assertEquals('4', Conversion.intToHexDigitMsb0(2)); 
         assertEquals('c', Conversion.intToHexDigitMsb0(3)); 
         assertEquals('2', Conversion.intToHexDigitMsb0(4)); 
         assertEquals('a', Conversion.intToHexDigitMsb0(5)); 
         assertEquals('6', Conversion.intToHexDigitMsb0(6)); 
         assertEquals('e', Conversion.intToHexDigitMsb0(7)); 
         assertEquals('1', Conversion.intToHexDigitMsb0(8)); 
    
 @Test 
     public void testIntToHexDigitMsb0295() { 
         assertEquals('0', Conversion.intToHexDigitMsb0(0)); 
         assertEquals('8', Conversion.intToHexDigitMsb0(1)); 
         assertEquals('4', Conversion.intToHexDigitMsb0(2)); 
         assertEquals('c', Conversion.intToHexDigitMsb0(3)); 
         assertEquals('2', Conversion.intToHexDigitMsb0(4)); 
         assertEquals('a', Conversion.intToHexDigitMsb0(5)); 
         assertEquals('6', Conversion.intToHexDigitMsb0(6)); 
         assertEquals('e', Conversion.intToHexDigitMsb0(7)); 
         assertEquals('1', Conversion.intToHexDigitMsb0(8)); 
    
 @Test 
     public void testIntToHexDigitMsb0296() { 
         assertEquals('0', Conversion.intToHexDigitMsb0(0)); 
         assertEquals('8', Conversion.intToHexDigitMsb0(1)); 
         assertEquals('4', Conversion.intToHexDigitMsb0(2)); 
         assertEquals('c', Conversion.intToHexDigitMsb0(3)); 
         assertEquals('2', Conversion.intToHexDigitMsb0(4)); 
         assertEquals('a', Conversion.intToHexDigitMsb0(5)); 
         assertEquals('6', Conversion.intToHexDigitMsb0(6)); 
         assertEquals('e', Conversion.intToHexDigitMsb0(7)); 
         assertEquals('1', Conversion.intToHexDigitMsb0(8)); 
    
 @Test 
     public void testIntArrayToLong297() { 
         final int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000}; 
         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); 
         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); 
         assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); 
         assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); 
         assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); 
         assertEquals( 
             0x123456789ABCDEF0L
 @Test 
     public void testIntArrayToLong298() { 
         final int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000}; 
         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); 
         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); 
         assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); 
         assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); 
         assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); 
         assertEquals( 
             0x123456789ABCDEF0L
 @Test 
     public void testShortArrayToLong299() { 
         final short[] src = new short[]{ 
             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; 
         assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); 
         assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); 
         assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); 
         assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); 
         assertEquals( 
             0x123456789ABCDEF0L, Conversion
 @Test 
     public void testShortArrayToLong300() { 
         final short[] src = new short[]{ 
             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; 
         assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); 
         assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); 
         assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); 
         assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); 
         assertEquals( 
             0x123456789ABCDEF0L, Conversion
 @Test 
     public void testShortArrayToInt301() { 
         final short[] src = new short[]{ 
             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; 
         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); 
         assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); 
         assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); 
         assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); 
         assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); 
         assertEqu
 @Test 
     public void testShortArrayToInt302() { 
         final short[] src = new short[]{ 
             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; 
         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); 
         assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); 
         assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); 
         assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); 
         assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); 
         assertEqu
 @Test 
     public void testByteArrayToLong303() { 
         final byte[] src = new byte[]{ 
             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, 
             (byte)0x56, (byte)0x78}; 
         assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0)); 
         assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1)); 
         assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4)); 
         assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4)); 
     
 @Test 
     public void testByteArrayToInt304() { 
         final byte[] src = new byte[]{ 
             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, 
             (byte)0x56, (byte)0x78}; 
         assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); 
         assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); 
         assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); 
         assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); 
         assertEquals(0x12345
 @Test 
     public void testByteArrayToInt305() { 
         final byte[] src = new byte[]{ 
             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, 
             (byte)0x56, (byte)0x78}; 
         assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); 
         assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); 
         assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); 
         assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); 
         assertEquals(0x12345
 @Test 
     public void testByteArrayToShort306() { 
         final byte[] src = new byte[]{ 
             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, 
             (byte)0x56, (byte)0x78}; 
         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); 
         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); 
         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); 
         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); 
   
 @Test 
     public void testByteArrayToShort307() { 
         final byte[] src = new byte[]{ 
             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, 
             (byte)0x56, (byte)0x78}; 
         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); 
         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); 
         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); 
         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); 
   
 @Test 
     public void testByteArrayToShort308() { 
         final byte[] src = new byte[]{ 
             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, 
             (byte)0x56, (byte)0x78}; 
         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); 
         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); 
         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); 
         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); 
   
 @Test 
     public void testHexToLong309() { 
         final String src = "CDF1F0C10F12345678"; 
         assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0)); 
         assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1)); 
         assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8)); 
         assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8)); 
         assertEquals( 
             0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); 
         assertEquals( 
             0x1234567876BC
 @Test 
     public void testHexToInt310() { 
         final String src = "CDF1F0C10F12345678"; 
         assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); 
         assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); 
         assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); 
         assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); 
         assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); 
         assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); 
     } 
  
     /** 
    
 @Test 
     public void testHexToInt311() { 
         final String src = "CDF1F0C10F12345678"; 
         assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); 
         assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); 
         assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); 
         assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); 
         assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); 
         assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testHexToShort312() { 
         final String src = "CDF1F0C10F12345678"; 
         assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0)); 
         assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1)); 
         assertEquals((short)0x1FDC, Conversion.hexToShort(src, 0, (short)0, 0, 4)); 
         assertEquals((short)0xF1FD, Conversion.hexToShort(src, 1, (short)0, 0, 4)); 
         assertEquals((short)0x1234, Conversion.hexToShort(src, 0, (short)0x1234, 0, 0)); 
         assertEquals((short)0x8764, Conversion.hexToShort(src, 15, (short)0x1234, 4, 3)); 
     } 

 @Test 
     public void testHexToShort313() { 
         final String src = "CDF1F0C10F12345678"; 
         assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0)); 
         assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1)); 
         assertEquals((short)0x1FDC, Conversion.hexToShort(src, 0, (short)0, 0, 4)); 
         assertEquals((short)0xF1FD, Conversion.hexToShort(src, 1, (short)0, 0, 4)); 
         assertEquals((short)0x1234, Conversion.hexToShort(src, 0, (short)0x1234, 0, 0)); 
         assertEquals((short)0x8764, Conversion.hexToShort(src, 15, (short)0x1234, 4, 3)); 
     } 

 @Test 
     public void testHexToByte314() { 
         final String src = "CDF1F0C10F12345678"; 
         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); 
         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); 
         assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2)); 
         assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2)); 
         assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0)); 
         assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1)); 
     } 
  
   
 @Test 
     public void testHexToByte315() { 
         final String src = "CDF1F0C10F12345678"; 
         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); 
         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); 
         assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2)); 
         assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2)); 
         assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0)); 
         assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1)); 
     } 
  
   
 @Test 
     public void testBinaryToLong316() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToLong317() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToLong318() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToLong319() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToInt320() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToInt321() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToInt322() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToInt323() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToShort324() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToByte325() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testBinaryToByte326() { 
         final boolean[] src = new boolean[]{ 
             false, false, true, true, true, false, true, true, true, true, true, true, true, 
             false, false, false, true, true, true, true, false, false, false, false, false, 
             false, true, true, true, false, false, false, false, false, false, false, true, 
             true, true, true, true, false, false, false, false, true, false, false, true, true, 
             false, false, false, false, true, false, true, false, true, false, false, true, 
             true, false, true, true, true, false, false, false, false, true}; 
         // conversion of "CDF1F0C10F12345678" by HexToBinary 
   
 @Test 
     public void testLongToIntArray327() { 
         assertArrayEquals( 
             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 0, 0)); 
         assertArrayEquals( 
             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[]{}, 0, 0)); 
         assertArrayEquals( 
             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 100, 0)); 
         assertArrayEquals( 
             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, 
             Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0)); 
  
 @Test 
     public void testLongToShortArray328() { 
         assertArrayEquals( 
             new short[]{}, 
             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0)); 
         assertArrayEquals( 
             new short[]{}, 
             Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0)); 
         assertArrayEquals( 
             new short[]{}, 
             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0)); 
         assertArrayEquals( 
             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, 
 
 @Test 
     public void testLongToShortArray329() { 
         assertArrayEquals( 
             new short[]{}, 
             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0)); 
         assertArrayEquals( 
             new short[]{}, 
             Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0)); 
         assertArrayEquals( 
             new short[]{}, 
             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0)); 
         assertArrayEquals( 
             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, 
 
 @Test 
     public void testIntToShortArray330() { 
         assertArrayEquals( 
             new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0)); 
         assertArrayEquals( 
             new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0)); 
         assertArrayEquals( 
             new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 100, 0)); 
         assertArrayEquals( 
             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, 
             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0)); 
 
 @Test 
     public void testLongToByteArray331() { 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF
 @Test 
     public void testLongToByteArray332() { 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF
 @Test 
     public void testLongToByteArray333() { 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF
 @Test 
     public void testLongToByteArray334() { 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF
 @Test 
     public void testLongToByteArray335() { 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, 
             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF
 @Test 
     public void testIntToByteArray336() { 
         assertArrayEquals( 
             new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, Conversion.intToByteArray(0x00000000, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, 
                 (byte
 @Test 
     public void testShortToByteArray337() { 
         assertArrayEquals( 
             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, 
            
 @Test 
     public void testShortToByteArray338() { 
         assertArrayEquals( 
             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0)); 
         assertArrayEquals( 
             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 100, 0)); 
         assertArrayEquals( 
             new byte[]{ 
                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, 
            
 @Test 
     public void testLongToHex339() { 
         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); 
         assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); 
         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); 
         assertEquals( 
             "ffffffffffffffffffffffff", 
             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); 
         assertEquals( 
             "3fffffffffffffffffffffff", 
             Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); 
         assertEqu
 @Test 
     public void testLongToHex340() { 
         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); 
         assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); 
         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); 
         assertEquals( 
             "ffffffffffffffffffffffff", 
             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); 
         assertEquals( 
             "3fffffffffffffffffffffff", 
             Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); 
         assertEqu
 @Test 
     public void testIntToHex341() { 
         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); 
         assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); 
         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); 
         assertEquals( 
             "ffffffffffffffffffffffff", 
             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); 
         assertEquals( 
             "3fffffffffffffffffffffff", 
             Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); 
         assertEquals( 
     
 @Test 
     public void testIntToHex342() { 
         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); 
         assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); 
         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); 
         assertEquals( 
             "ffffffffffffffffffffffff", 
             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); 
         assertEquals( 
             "3fffffffffffffffffffffff", 
             Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); 
         assertEquals( 
     
 @Test 
     public void testShortToHex343() { 
         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); 
         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); 
         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); 
         assertEquals( 
             "ffffffffffffffffffffffff", 
             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); 
         assertEquals( 
             "3fffffffffffffffffffffff", 
             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); 
         assertEquals( [
 @Test 
     public void testShortToHex344() { 
         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); 
         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); 
         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); 
         assertEquals( 
             "ffffffffffffffffffffffff", 
             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); 
         assertEquals( 
             "3fffffffffffffffffffffff", 
             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); 
         assertEquals( [
 @Test 
     public void testByteToHex345() { 
         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); 
         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); 
         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); 
         assertEquals("00000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 0)); 
         assertEquals("f0000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 1)); 
         assertEquals("fe000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 2)); 
         assertEquals("000f0", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 1)); 
         assertEquals("000fe", Conversion.byteTo
 @Test 
     public void testByteToHex346() { 
         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); 
         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); 
         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); 
         assertEquals("00000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 0)); 
         assertEquals("f0000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 1)); 
         assertEquals("fe000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 2)); 
         assertEquals("000f0", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 1)); 
         assertEquals("000fe", Conversion.byteTo
 @Test 
     public void testByteToHex347() { 
         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); 
         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); 
         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); 
         assertEquals("00000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 0)); 
         assertEquals("f0000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 1)); 
         assertEquals("fe000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 2)); 
         assertEquals("000f0", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 1)); 
         assertEquals("000fe", Conversion.byteTo
 @Test 
     public void testLongToBinary348() { 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0)); 
         assertBinaryEquals( 
             new boolean[69], 
             Conversion.longToBinary(0x12345678
 @Test 
     public void testLongToBinary349() { 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0)); 
         assertBinaryEquals( 
             new boolean[69], 
             Conversion.longToBinary(0x12345678
 @Test 
     public void testIntToBinary350() { 
         assertBinaryEquals( 
             new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, Conversion.intToBinary(0x00000000, 100, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 100, 0)); 
         assertBinaryEquals( 
             new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0)); 
         assertBinaryEquals(new boolean[]{ 
             true, false, false, false, false, false, false, false, false
 @Test 
     public void testShortToBinary351() { 
         assertBinaryEquals( 
             new boolean[]{}, Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.shortToBinary((short)0x0000, 100, new boolean[]{}, 0, 0)); 
         assertBinaryEquals( 
             new boolean[]{}, 
             Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 100, 0)); 
         assertBinaryEquals( 
             new boolean[69], Conversion.shortToBinary((short)0xCDEF, 0, new boolean[69], 0, 0)); 
         assertBinaryEqu
 @Test 
     public void testByteArrayToUuid352() { 
         assertEquals( 
             new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), 
             Conversion.byteArrayToUuid(new byte[]{ 
                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, 
                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff}, 0)); 
         assertEquals( 
             new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), [
 lang3/SystemUtils.java
 @Test 
     public void testGetJavaHome353() { 
         final File dir = SystemUtils.getJavaHome(); 
         Assert.assertNotNull(dir); 
         Assert.assertTrue(dir.exists()); 
     } 
  
     /** 
      * Assums no security manager exists. 
      */ 

 @Test 
     public void testToString354() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("
 @Test 
     public void testGetUserDir355() { 
         final File dir = SystemUtils.getUserDir(); 
         Assert.assertNotNull(dir); 
         Assert.assertTrue(dir.exists()); 
     } 
  
     /** 
      * Assums no security manager exists. 
      */ 

 @Test 
     public void testJavaVersionMatches356() { 
         String javaVersion = null; 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); 
         javaVersion = ""; [E
 @Test 
     public void testJavaVersionMatches357() { 
         String javaVersion = null; 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); 
         javaVersion = ""; [E
 @Test 
     public void testOSMatchesName358() { 
         String osName = null; 
         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = ""; 
         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = "Windows 95"; 
         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = "Windows NT"; 
         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = "OS/2"; 
         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); 
     } 
  

 @Test 
     public void testOSMatchesName359() { 
         String osName = null; 
         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = ""; 
         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = "Windows 95"; 
         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = "Windows NT"; 
         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); 
         osName = "OS/2"; 
         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); 
     } 
  

 lang3/tuple/ImmutablePair.java
 @Test 
     public void testFormattable_padded360() throws Exception { 
         final Pair<String, String> pair = Pair.of("Key", "Value"); 
         assertEquals("         (Key,Value)", String.format("%1$20s", pair)); 
     } 
  
 } 

 lang3/builder/ReflectionToStringBuilder.java
 @Test 
     public void testAppendSuper361() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper362() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void test_toStringExcludeCollection363() { 
         final List<String> excludeList = new ArrayList<String>(); 
         excludeList.add(SECRET_FIELD); 
         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); 
         this.validateSecretFieldAbsent(toString); 
     } 
  

 @Test 
     public void test_toStringExcludeCollection364() { 
         final List<String> excludeList = new ArrayList<String>(); 
         excludeList.add(SECRET_FIELD); 
         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); 
         this.validateSecretFieldAbsent(toString); 
     } 
  

 @Test 
     public void test_toStringExcludeCollection365() { 
         final List<String> excludeList = new ArrayList<String>(); 
         excludeList.add(SECRET_FIELD); 
         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); 
         this.validateSecretFieldAbsent(toString); 
     } 
  

 @Test 
     public void test_toStringExcludeCollection366() { 
         final List<String> excludeList = new ArrayList<String>(); 
         excludeList.add(SECRET_FIELD); 
         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); 
         this.validateSecretFieldAbsent(toString); 
     } 
  

 @Test 
     public void test_toStringExcludeCollection367() { 
         final List<String> excludeList = new ArrayList<String>(); 
         excludeList.add(SECRET_FIELD); 
         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); 
         this.validateSecretFieldAbsent(toString); 
     } 
  

 @Test 
     public void test_toStringExcludeCollection368() { 
         final List<String> excludeList = new ArrayList<String>(); 
         excludeList.add(SECRET_FIELD); 
         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); 
         this.validateSecretFieldAbsent(toString); 
     } 
  

 @Test 
     public void testReflectionIntArray369() { 
         int[] array = new int[] { 1, 2, -3, 4 }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void testReflectionIntArray370() { 
         int[] array = new int[] { 1, 2, -3, 4 }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void test_toStringExcludeCollection371() { 
         final List<String> excludeList = new ArrayList<String>(); 
         excludeList.add(SECRET_FIELD); 
         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); 
         this.validateSecretFieldAbsent(toString); 
     } 
  

 @Test 
     public void testAppendSuper372() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper373() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper374() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper375() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 lang3/BooleanUtils.java
 @Test 
     public void test_negate_Boolean376() { 
         assertSame(null, BooleanUtils.negate(null)); 
         assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); 
         assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void test_isNotFalse_Boolean377() { 
         assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE)); 
         assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE)); 
         assertTrue(BooleanUtils.isNotFalse((Boolean) null)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void test_toBooleanObject_Integer378() { 
         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1))); 
         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1))); 
         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0))); 
         assertEquals(null, BooleanUtils.toBooleanObject((Integer) null)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void test_toBoolean_Integer_Integer_Integer379() { 
         final Integer six = Integer.valueOf(6); 
         final Integer seven = Integer.valueOf(7); 
  
         assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven)); 
         assertFalse(BooleanUtils.toBoolean((Integer) null, six, null)); 
  
         assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven)); 
         assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven)); 
     } 
  

 @Test 
     public void test_toBooleanObject_int_int_int380() { 
         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); 
         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); 
         assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void test_toBooleanObject_int_int_int_int_noMatch381() { 
         BooleanUtils.toBooleanObject(8, 6, 7, 8)); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void test_toBooleanObject_Integer_Integer_Integer_Integer_noMatch382() { 
         BooleanUtils.toBooleanObject(Integer.valueOf(9), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void test_toIntegerObject_Boolean_Integer_Integer_Integer383() { 
         final Integer six = Integer.valueOf(6); 
         final Integer seven = Integer.valueOf(7); 
         final Integer eight = Integer.valueOf(8); 
         assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); 
         assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight)); 
         assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight)); 
         assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null)); 
     } 
      
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

 @Test 
     public void test_toBoolean_String384() { 
         assertFalse(BooleanUtils.toBoolean((String) null)); 
         assertFalse(BooleanUtils.toBoolean("")); 
         assertFalse(BooleanUtils.toBoolean("off")); 
         assertFalse(BooleanUtils.toBoolean("oof")); 
         assertFalse(BooleanUtils.toBoolean("yep")); 
         assertFalse(BooleanUtils.toBoolean("trux")); 
         assertFalse(BooleanUtils.toBoolean("false")); 
         assertFalse(BooleanUtils.toBoolean("a")); 
         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently 
         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); 
      
 @Test 
     public void test_toBoolean_String385() { 
         assertFalse(BooleanUtils.toBoolean((String) null)); 
         assertFalse(BooleanUtils.toBoolean("")); 
         assertFalse(BooleanUtils.toBoolean("off")); 
         assertFalse(BooleanUtils.toBoolean("oof")); 
         assertFalse(BooleanUtils.toBoolean("yep")); 
         assertFalse(BooleanUtils.toBoolean("trux")); 
         assertFalse(BooleanUtils.toBoolean("false")); 
         assertFalse(BooleanUtils.toBoolean("a")); 
         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently 
         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); 
      
 @Test 
     public void test_toBoolean_String386() { 
         assertFalse(BooleanUtils.toBoolean((String) null)); 
         assertFalse(BooleanUtils.toBoolean("")); 
         assertFalse(BooleanUtils.toBoolean("off")); 
         assertFalse(BooleanUtils.toBoolean("oof")); 
         assertFalse(BooleanUtils.toBoolean("yep")); 
         assertFalse(BooleanUtils.toBoolean("trux")); 
         assertFalse(BooleanUtils.toBoolean("false")); 
         assertFalse(BooleanUtils.toBoolean("a")); 
         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently 
         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); 
      
 @Test 
     public void test_toBoolean_String387() { 
         assertFalse(BooleanUtils.toBoolean((String) null)); 
         assertFalse(BooleanUtils.toBoolean("")); 
         assertFalse(BooleanUtils.toBoolean("off")); 
         assertFalse(BooleanUtils.toBoolean("oof")); 
         assertFalse(BooleanUtils.toBoolean("yep")); 
         assertFalse(BooleanUtils.toBoolean("trux")); 
         assertFalse(BooleanUtils.toBoolean("false")); 
         assertFalse(BooleanUtils.toBoolean("a")); 
         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently 
         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); 
      
 @Test 
     public void test_toBooleanObject_String_String_String_String388() { 
         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); 
         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); 
         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); 
  
         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); 
         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); 
         assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); 
     } 
  

 @Test 
     public void test_toBooleanObject_String_String_String_String389() { 
         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); 
         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); 
         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); 
  
         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); 
         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); 
         assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); 
     } 
  

 @Test 
     public void test_toBooleanObject_String_String_String_String390() { 
         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); 
         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); 
         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); 
  
         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); 
         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); 
         assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); 
     } 
  

 @Test 
     public void test_toBooleanObject_boolean391() { 
         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Boolean.TRUE)); 
         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Boolean.FALSE)); 
         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Boolean.FALSE)); 
     } 
      

 @Test(expected = IllegalArgumentException.class) 
     public void test_toBoolean_String_String_String_nullValue392() { 
         BooleanUtils.toBoolean(null, "Y", "N"); 
     } 
  

 @Test 
     public void test_toStringOnOff_boolean393() { 
         assertEquals("on", BooleanUtils.toStringOnOff(true)); 
         assertEquals("off", BooleanUtils.toStringOnOff(false)); 
     } 
      

 @Test 
     public void test_toStringTrueFalse_Boolean394() { 
         assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); 
         assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); 
         assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); 
     } 
      

 @Test 
     public void test_toStringYesNo_Boolean395() { 
         assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null)); 
         assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE)); 
         assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE)); 
     } 
      

 @Test(expected = IllegalArgumentException.class) 
     public void testAnd_primitive_emptyInput396() { 
         BooleanUtils.and(new boolean[] {}); 
     } 
      

 @Test(expected = IllegalArgumentException.class) 
     public void testAnd_object_nullInput397() { 
         BooleanUtils.and((Boolean[]) null); 
     } 
      

 @Test(expected = IllegalArgumentException.class) 
     public void testAnd_object_nullInput398() { 
         BooleanUtils.and((Boolean[]) null); 
     } 
      

 @Test(expected = IllegalArgumentException.class) 
     public void testOr_primitive_emptyInput399() { 
         BooleanUtils.or(new boolean[] {}); 
     } 
      

 @Test(expected = IllegalArgumentException.class) 
     public void testOr_primitive_emptyInput400() { 
         BooleanUtils.or(new boolean[] {}); 
     } 
      

 @Test(expected = IllegalArgumentException.class) 
     public void testXor_primitive_emptyInput401() { 
         BooleanUtils.xor(new boolean[] {}); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testXor_primitive_emptyInput402() { 
         BooleanUtils.xor(new boolean[] {}); 
     } 
  

 @Test(expected = IllegalArgumentException.class) 
     public void testXor_object_nullInput403() { 
         BooleanUtils.xor((Boolean[]) null); 
     } 
  

 lang3/LocaleUtils.java
 @Test 
     public void testToLocale_2Part404() { 
         assertValidToLocale("us_EN", "us", "EN"); 
         //valid though doesnt exist 
         assertValidToLocale("us_ZH", "us", "ZH"); 
          
         try { 
             LocaleUtils.toLocale("us-EN"); 
             fail("Should fail as not underscore"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
             LocaleUtils.toLocale("us_En"); 
             fail("Should fail second part not uppercase"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
        
 @Test 
     public void testToLocale_2Part405() { 
         assertValidToLocale("us_EN", "us", "EN"); 
         //valid though doesnt exist 
         assertValidToLocale("us_ZH", "us", "ZH"); 
          
         try { 
             LocaleUtils.toLocale("us-EN"); 
             fail("Should fail as not underscore"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
             LocaleUtils.toLocale("us_En"); 
             fail("Should fail second part not uppercase"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
        
 @Test 
     public void testToLocale_2Part406() { 
         assertValidToLocale("us_EN", "us", "EN"); 
         //valid though doesnt exist 
         assertValidToLocale("us_ZH", "us", "ZH"); 
          
         try { 
             LocaleUtils.toLocale("us-EN"); 
             fail("Should fail as not underscore"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
             LocaleUtils.toLocale("us_En"); 
             fail("Should fail second part not uppercase"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
        
 @Test 
     public void testLang865407() { 
         assertValidToLocale("_GB", "", "GB", ""); 
         assertValidToLocale("_GB_P", "", "GB", "P"); 
         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); 
         try { 
             LocaleUtils.toLocale("_G"); 
             fail("Must be at least 3 chars if starts with underscore"); 
         } catch (final IllegalArgumentException iae) { 
         } 
         try { 
             LocaleUtils.toLocale("_Gb"); 
             fail("Must be uppercase if starts with underscore"); 
         } catch (final IllegalArgumentException iae) { 
   
 @Test 
     public void testLang865408() { 
         assertValidToLocale("_GB", "", "GB", ""); 
         assertValidToLocale("_GB_P", "", "GB", "P"); 
         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); 
         try { 
             LocaleUtils.toLocale("_G"); 
             fail("Must be at least 3 chars if starts with underscore"); 
         } catch (final IllegalArgumentException iae) { 
         } 
         try { 
             LocaleUtils.toLocale("_Gb"); 
             fail("Must be uppercase if starts with underscore"); 
         } catch (final IllegalArgumentException iae) { 
   
 @Test 
     public void testToLocale_3Part409() { 
         assertValidToLocale("us_EN_A", "us", "EN", "A"); 
         // this isn't pretty, but was caused by a jdk bug it seems 
         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525 
     } 
  

 @Test 
     public void testToLocale_2Part410() { 
         assertValidToLocale("us_EN", "us", "EN"); 
         //valid though doesnt exist 
         assertValidToLocale("us_ZH", "us", "ZH"); 
          
         try { 
             LocaleUtils.toLocale("us-EN"); 
             fail("Should fail as not underscore"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
             LocaleUtils.toLocale("us_En"); 
             fail("Should fail second part not uppercase"); 
         } catch (final IllegalArgumentException iae) {} 
         try { 
        
 @Test 
     public void testLocaleLookupList_Locale411() { 
         assertLocaleLookupList(null, null, new Locale[0]); 
         assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ}); 
         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); 
         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); 
         assertLocaleLookupList(LOCALE_EN_US, null, 
             new Locale[] { 
                 LOCALE_EN_US, 
                 LOCALE_EN}); 
         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, 
             new Locale[] { 
 
 @Test 
     public void testLocaleLookupList_Locale412() { 
         assertLocaleLookupList(null, null, new Locale[0]); 
         assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ}); 
         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); 
         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); 
         assertLocaleLookupList(LOCALE_EN_US, null, 
             new Locale[] { 
                 LOCALE_EN_US, 
                 LOCALE_EN}); 
         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, 
             new Locale[] { 
 
 @Test 
     public void testLanguagesByCountry413() { 
         assertLanguageByCountry(null, new String[0]); 
         assertLanguageByCountry("GB", new String[]{"en"}); 
         assertLanguageByCountry("ZZ", new String[0]); 
         assertLanguageByCountry("CH", new String[]{"fr", "de", "it"}); 
     } 
  
     //----------------------------------------------------------------------- 
     /** 
      * Make sure the country by language is correct. It checks that  
      * the LocaleUtils.countryByLanguage(language) call contains the  
      * array of countries passed in. It may contain more due to JVM  
      * variations. 
      * 
      * 
      * @param language 
      * @param countries array of countries that should be returned 
      */ 
     private void assertCount
 @Test 
     public void testLanguagesByCountry414() { 
         assertLanguageByCountry(null, new String[0]); 
         assertLanguageByCountry("GB", new String[]{"en"}); 
         assertLanguageByCountry("ZZ", new String[0]); 
         assertLanguageByCountry("CH", new String[]{"fr", "de", "it"}); 
     } 
  
     //----------------------------------------------------------------------- 
     /** 
      * Make sure the country by language is correct. It checks that  
      * the LocaleUtils.countryByLanguage(language) call contains the  
      * array of countries passed in. It may contain more due to JVM  
      * variations. 
      * 
      * 
      * @param language 
      * @param countries array of countries that should be returned 
      */ 
     private void assertCount
 @Test 
     public void testCountriesByLanguage415() { 
         assertCountriesByLanguage(null, new String[0]); 
         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); 
         assertCountriesByLanguage("zz", new String[0]); 
         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); 
     } 
  
     /** 
      * @param coll  the collection to check 
      */ 
     private static void assertUnmodifiableCollection(final Collection<?> coll) { 
         try { 
             coll.add(null); 
             fail(); 
         } catch (final UnsupportedOperationException ex) {} 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testCountriesByLanguage416() { 
         assertCountriesByLanguage(null, new String[0]); 
         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); 
         assertCountriesByLanguage("zz", new String[0]); 
         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); 
     } 
  
     /** 
      * @param coll  the collection to check 
      */ 
     private static void assertUnmodifiableCollection(final Collection<?> coll) { 
         try { 
             coll.add(null); 
             fail(); 
         } catch (final UnsupportedOperationException ex) {} 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testCountriesByLanguage417() { 
         assertCountriesByLanguage(null, new String[0]); 
         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); 
         assertCountriesByLanguage("zz", new String[0]); 
         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); 
     } 
  
     /** 
      * @param coll  the collection to check 
      */ 
     private static void assertUnmodifiableCollection(final Collection<?> coll) { 
         try { 
             coll.add(null); 
             fail(); 
         } catch (final UnsupportedOperationException ex) {} 
     } 
  
     //----------------------------------------------------------------------- 

 lang3/math/Fraction.java
 @Test 
     public void testAbs418() { 
         Fraction f = null; 
          
         f = Fraction.getFraction(50, 75); 
         f = f.abs(); 
         assertEquals(50, f.getNumerator()); 
         assertEquals(75, f.getDenominator()); 
          
         f = Fraction.getFraction(-50, 75); 
         f = f.abs(); 
         assertEquals(50, f.getNumerator()); 
         assertEquals(75, f.getDenominator()); 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testFactory_int_int_int419() { 
         Fraction f = null; 
          
         // zero 
         f = Fraction.getFraction(0, 0, 2); 
         assertEquals(0, f.getNumerator()); 
         assertEquals(2, f.getDenominator()); 
          
         f = Fraction.getFraction(2, 0, 2); 
         assertEquals(4, f.getNumerator()); 
         assertEquals(2, f.getDenominator()); 
          
         f = Fraction.getFraction(0, 1, 2); 
         assertEquals(1, f.getNumerator()); 
         assertEquals(2, f.get
 @Test 
     public void testFactory_int_int_int420() { 
         Fraction f = null; 
          
         // zero 
         f = Fraction.getFraction(0, 0, 2); 
         assertEquals(0, f.getNumerator()); 
         assertEquals(2, f.getDenominator()); 
          
         f = Fraction.getFraction(2, 0, 2); 
         assertEquals(4, f.getNumerator()); 
         assertEquals(2, f.getDenominator()); 
          
         f = Fraction.getFraction(0, 1, 2); 
         assertEquals(1, f.getNumerator()); 
         assertEquals(2, f.get
 @Test(expected=IllegalArgumentException.class) 
     public void testFactory_int_int_int421() { 
         Fraction.getFraction(0, 2); 
     } 
      

 @Test 
     public void testReducedFactory_int_int422() { 
         Fraction f = null; 
          
         // zero 
         f = Fraction.getReducedFraction(0, 1); 
         assertEquals(0, f.getNumerator()); 
         assertEquals(1, f.getDenominator()); 
          
         // normal 
         f = Fraction.getReducedFraction(1, 1); 
         assertEquals(1, f.getNumerator()); 
         assertEquals(1, f.getDenominator()); 
          
         f = Fraction.getReducedFraction(2, 1); 
         assertEquals(2, f.getNumerator()); 
   
 @Test 
     public void testToProperString423() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString424() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString425() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString426() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString427() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString428() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString429() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString430() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString431() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString432() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString433() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString434() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test(expected=IllegalArgumentException.class) 
     public void testFactory_String435() { 
         Fraction.getFraction(null); 
     } 
      
      

 @Test(expected=IllegalArgumentException.class) 
     public void testFactory_String436() { 
         Fraction.getFraction(null); 
     } 
      
      

 @Test(expected=IllegalArgumentException.class) 
     public void testFactory_String437() { 
         Fraction.getFraction(null); 
     } 
      
      

 @Test(expected=IllegalArgumentException.class) 
     public void testFactory_String438() { 
         Fraction.getFraction(null); 
     } 
      
      

 @Test(expected=IllegalArgumentException.class) 
     public void testFactory_String439() { 
         Fraction.getFraction(null); 
     } 
      
      

 @Test(expected=IllegalArgumentException.class) 
     public void testFactory_String440() { 
         Fraction.getFraction(null); 
     } 
      
      

 @Test 
     public void testToProperString441() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testConversions442() { 
         Fraction f = null; 
          
         f = Fraction.getFraction(3, 7, 8); 
         assertEquals(3, f.intValue()); 
         assertEquals(3L, f.longValue()); 
         assertEquals(3.875f, f.floatValue(), 0.00001f); 
         assertEquals(3.875d, f.doubleValue(), 0.00001d); 
     } 
      

 @Test 
     public void testConversions443() { 
         Fraction f = null; 
          
         f = Fraction.getFraction(3, 7, 8); 
         assertEquals(3, f.intValue()); 
         assertEquals(3L, f.longValue()); 
         assertEquals(3.875f, f.floatValue(), 0.00001f); 
         assertEquals(3.875d, f.doubleValue(), 0.00001d); 
     } 
      

 @Test 
     public void testReduce444() { 
         Fraction f = null; 
          
         f = Fraction.getFraction(50, 75); 
         Fraction result = f.reduce(); 
         assertEquals(2, result.getNumerator()); 
         assertEquals(3, result.getDenominator()); 
  
         f = Fraction.getFraction(-2, -3); 
         result = f.reduce(); 
         assertEquals(2, result.getNumerator()); 
         assertEquals(3, result.getDenominator()); 
  
         f = Fraction.getFraction(2, -3); 
         result = f.reduce(); 
         assertEquals(-2, result.getNumerator()); [
 @Test 
     public void testPow445() { 
         Fraction f = null; 
          
         f = Fraction.getFraction(3, 5); 
         assertEquals(Fraction.ONE, f.pow(0)); 
          
         f = Fraction.getFraction(3, 5); 
         assertSame(f, f.pow(1)); 
         assertEquals(f,f, f.pow(1)); 
         assertEquals(25, f.getNumerator()); 
         assertEquals(25, f.getDenominator()); 
     } 
  

 @Test 
     public void testReducedFactory_int_int446() { 
         Fraction f = null; 
          
         // zero 
         f = Fraction.getReducedFraction(0, 1); 
         assertEquals(0, f.getNumerator()); 
         assertEquals(1, f.getDenominator()); 
          
         // normal 
         f = Fraction.getReducedFraction(1, 1); 
         assertEquals(1, f.getNumerator()); 
         assertEquals(1, f.getDenominator()); 
          
         f = Fraction.getReducedFraction(2, 1); 
         assertEquals(2, f.getNumerator()); 
   
 @Test 
     public void testAdd447() { 
         Fraction f = null; 
         Fraction f1 = null; 
         Fraction f2 = null; 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(1, 5); 
         f = f1.add(f2); 
         assertEquals(4, f.getNumerator()); 
         assertEquals(5, f.getDenominator()); 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(2, 5); 
         f = f1.add(f2); 
         assertEquals(1, f.getNumerator
 @Test 
     public void testAdd448() { 
         Fraction f = null; 
         Fraction f1 = null; 
         Fraction f2 = null; 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(1, 5); 
         f = f1.add(f2); 
         assertEquals(4, f.getNumerator()); 
         assertEquals(5, f.getDenominator()); 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(2, 5); 
         f = f1.add(f2); 
         assertEquals(1, f.getNumerator
 @Test 
     public void testAdd449() { 
         Fraction f = null; 
         Fraction f1 = null; 
         Fraction f2 = null; 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(1, 5); 
         f = f1.add(f2); 
         assertEquals(4, f.getNumerator()); 
         assertEquals(5, f.getDenominator()); 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(2, 5); 
         f = f1.add(f2); 
         assertEquals(1, f.getNumerator
 @Test 
     public void testAdd450() { 
         Fraction f = null; 
         Fraction f1 = null; 
         Fraction f2 = null; 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(1, 5); 
         f = f1.add(f2); 
         assertEquals(4, f.getNumerator()); 
         assertEquals(5, f.getDenominator()); 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(2, 5); 
         f = f1.add(f2); 
         assertEquals(1, f.getNumerator
 @Test 
     public void testAdd451() { 
         Fraction f = null; 
         Fraction f1 = null; 
         Fraction f2 = null; 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(1, 5); 
         f = f1.add(f2); 
         assertEquals(4, f.getNumerator()); 
         assertEquals(5, f.getDenominator()); 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(2, 5); 
         f = f1.add(f2); 
         assertEquals(1, f.getNumerator
 @Test 
     public void testHashCode452() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testHashCode453() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testDivide454() { 
         Fraction f = null; 
         Fraction f1 = null; 
         Fraction f2 = null; 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.getFraction(2, 5); 
         f = f1.divideBy(f2); 
         assertEquals(3, f.getNumerator()); 
         assertEquals(2, f.getDenominator()); 
          
         f1 = Fraction.getFraction(3, 5); 
         f2 = Fraction.ZERO; 
         try { 
             f = f1.divideBy(f2); 
  
 @Test 
     public void testHashCode455() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testHashCode456() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testHashCode457() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testHashCode458() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testHashCode459() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testHashCode460() { 
         final Fraction f1 = Fraction.getFraction(3, 5); 
         Fraction f2 = Fraction.getFraction(3, 5); 
          
         assertTrue(f1.hashCode() == f2.hashCode()); 
          
         f2 = Fraction.getFraction(2, 5); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
          
         f2 = Fraction.getFraction(6, 10); 
         assertTrue(f1.hashCode() != f2.hashCode()); 
     } 
      

 @Test 
     public void testToProperString461() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString462() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 @Test 
     public void testToProperString463() { 
         Fraction f = null; 
  
         f = Fraction.getFraction(3, 5); 
         final String str = f.toProperString(); 
         assertEquals("3/5", str); 
         assertSame(str, f.toProperString()); 
          
         f = Fraction.getFraction(7, 5); 
         assertEquals("1 2/5", f.toProperString());         
          
         f = Fraction.getFraction(14, 10); 
         assertEquals("1 4/10", f.toProperString());         
          
         f = Fraction.getFraction(4,
 lang3/text/translate/NumericEntityEscaper.java
 @Test 
     public void testSupplementary464() { 
         final NumericEntityEscaper nee = new NumericEntityEscaper(); 
         final String input = "\uD803\uDC22"; 
         final String expected = "&#68642;"; 
  
         final String result = nee.translate(input); 
         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); 
  
     } 
  
 } 

 @Test 
     public void testSupplementary465() { 
         final NumericEntityEscaper nee = new NumericEntityEscaper(); 
         final String input = "\uD803\uDC22"; 
         final String expected = "&#68642;"; 
  
         final String result = nee.translate(input); 
         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); 
  
     } 
  
 } 

 lang3/text/translate/LookupTranslator.java
 @Test 
     public void testBasicLookup466() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { "one", "two" } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate("one", 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
     // Tests: https://issues.apache.org/jira/browse/LANG-882 

 @Test 
     public void testBasicLookup467() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { "one", "two" } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate("one", 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
     // Tests: https://issues.apache.org/jira/browse/LANG-882 

 lang3/concurrent/AtomicInitializer.java
 @Test 
     public void testGetConcurrent468() throws ConcurrentException, 
             InterruptedException { 
         final ConcurrentInitializer<Object> initializer = createInitializer(); 
         final int threadCount = 20; 
         final CountDownLatch startLatch = new CountDownLatch(1); 
         class GetThread extends Thread { 
             Object object; 
  
             @Override 
             public void run() { 
                 try { 
                     // wait until all threads are ready for maximum parallelism 
                     startLatch.await(); 
                     // access the initializer 
 
 @Test 
     public void testGetConcurrent469() throws ConcurrentException, 
             InterruptedException { 
         final ConcurrentInitializer<Object> initializer = createInitializer(); 
         final int threadCount = 20; 
         final CountDownLatch startLatch = new CountDownLatch(1); 
         class GetThread extends Thread { 
             Object object; 
  
             @Override 
             public void run() { 
                 try { 
                     // wait until all threads are ready for maximum parallelism 
                     startLatch.await(); 
                     // access the initializer 
 
 @Test 
     public void testGetConcurrent470() throws ConcurrentException, 
             InterruptedException { 
         final ConcurrentInitializer<Object> initializer = createInitializer(); 
         final int threadCount = 20; 
         final CountDownLatch startLatch = new CountDownLatch(1); 
         class GetThread extends Thread { 
             Object object; 
  
             @Override 
             public void run() { 
                 try { 
                     // wait until all threads are ready for maximum parallelism 
                     startLatch.await(); 
                     // access the initializer 
 
 @Test 
     public void testGetConcurrent471() throws ConcurrentException, 
             InterruptedException { 
         final ConcurrentInitializer<Object> initializer = createInitializer(); 
         final int threadCount = 20; 
         final CountDownLatch startLatch = new CountDownLatch(1); 
         class GetThread extends Thread { 
             Object object; 
  
             @Override 
             public void run() { 
                 try { 
                     // wait until all threads are ready for maximum parallelism 
                     startLatch.await(); 
                     // access the initializer 
 
 lang3/concurrent/BackgroundInitializer.java
 @Test(expected = IllegalArgumentException.class) 
     public void testAddInitializerNullName472() { 
         initializer.addInitializer(null, new ChildBackgroundInitializer()); 
     } 
  
     /** 
      * Tests addInitializer() if a null initializer is passed in. This should 
      * cause an exception. 
      */ 

 @Test 
     public void testGetActiveExecutorTemp473() { 
         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); 
         init.start(); 
         assertNotNull("No active executor", init.getActiveExecutor()); 
         checkInitialize(init); 
     } 
  
     /** 
      * Tests the execution of the background task if a temporary executor has to 
      * be created. 
      */ 

 @Test 
     public void testGetActiveExecutorTemp474() { 
         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); 
         init.start(); 
         assertNotNull("No active executor", init.getActiveExecutor()); 
         checkInitialize(init); 
     } 
  
     /** 
      * Tests the execution of the background task if a temporary executor has to 
      * be created. 
      */ 

 lang3/EnumUtils.java
 @Test 
     public void test_getEnumMap475() { 
         final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class); 
         assertEquals( "getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString()); 
         assertEquals(3, test.size()); 
         assertTrue(test.containsKey("RED")); 
         assertEquals(Traffic.RED, test.get("RED")); 
         assertTrue(test.containsKey("AMBER")); 
         assertEquals(Traffic.AMBER, test.get("AMBER")); 
         assertTrue(test.containsKey("GREEN")); 
         assertEquals(Traffic.GREEN, test.get("GREEN")); 
         assertFalse(test.containsKey("PURPLE")); 
     } [E
 @Test 
     public void test_getEnum476() { 
         assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); 
         assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); 
         assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); 
         assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); 
         assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); 
     } 
  

 @Test(expected=NullPointerException.class) 
     public void test_generateBitVector_nullIterable477() { 
         EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); 
     } 
  

 @Test(expected=NullPointerException.class) 
     public void test_generateBitVector_nullIterable478() { 
         EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); 
     } 
  

 @Test(expected=IllegalArgumentException.class) 
     public void test_generateBitVectors_nullElement479() { 
         EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null)); 
     } 
      

 @Test(expected=IllegalArgumentException.class) 
     public void test_generateBitVectors_nonEnumClassWithArray480() { 
         @SuppressWarnings("rawtypes") 
         final 
         Class rawType = Object.class; 
         EnumUtils.generateBitVectors(rawType); 
     } 
      

 @Test(expected=IllegalArgumentException.class) 
     public void test_generateBitVectors_nonEnumClassWithArray481() { 
         @SuppressWarnings("rawtypes") 
         final 
         Class rawType = Object.class; 
         EnumUtils.generateBitVectors(rawType); 
     } 
      

 @Test 
     public void test_processBitVector482() { 
         assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); 
         assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); 
         assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); 
         assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); 
         assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); 
         assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); 
         assertEquals(EnumSet.of(Traffic.AM
 @Test(expected=NullPointerException.class) 
     public void test_generateBitVector_nullIterable483() { 
         EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); 
     } 
  

 lang3/time/StopWatch.java
 @Test 
     public void testStopWatchSimple484(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 @Test 
     public void testStopWatchSimple485(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 @Test 
     public void testStopWatchSimple486(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 @Test 
     public void testStopWatchSplit487(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.split(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 @Test 
     public void testStopWatchSplit488(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.split(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 @Test 
     public void testStopWatchSimple489(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 @Test 
     public void testStopWatchSimple490(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 @Test 
     public void testStopWatchSimple491(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long time = watch.getTime(); 
         assertEquals(time, watch.getTime()); 
          
         assertTrue(time >= 500); 
         assertTrue(time < 700); 
          
         watch.reset(); 
         assertEquals(0, watch.getTime()); 
     } 
      

 lang3/SerializationException.java
 lang3/text/CompositeFormat.java
 @Test 
     public void testUsage492() throws Exception { 
         final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); 
         final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); 
         final CompositeFormat c = new CompositeFormat(f1, f2); 
         final String testString = "January 3, 2005"; 
         assertEquals(testString, c.format(c.parseObject("01032005"))); 
         assertEquals(testString, c.reformat("01032005")); 
     } 
  
 } 

 @Test 
     public void testLocales_LongNoEra_BC493() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 lang3/tuple/ImmutableTriple.java
 lang3/mutable/MutableByte.java
 @Test 
     public void testGetSet494() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); 
          
         mutNum.setValue((byte) 1); 
         assertEquals((byte) 1, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); 
          
         mutNum.setValue(Byte.valueOf((byte) 2)); 
         assertEquals((byte) 2, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); 
          
        
 @Test(expected=NullPointerException.class) 
     public void testSetNull495() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         mutNum.setValue(null); 
     } 
  

 @Test 
     public void testSubtractValueObject496() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.subtract(Integer.valueOf(1)); 
          
         assertEquals((byte) 0, mutNum.byteValue()); 
     } 
  

 @Test 
     public void testDecrement497() { 
         final MutableShort mutNum = new MutableShort((short) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testSubtractValueObject498() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.subtract(Integer.valueOf(1)); 
          
         assertEquals((byte) 0, mutNum.byteValue()); 
     } 
  

 @Test 
     public void testConstructors499() { 
         assertEquals(0, new MutableInt().intValue()); 
          
         assertEquals(1, new MutableInt(1).intValue()); 
          
         assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); 
         assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); 
  
         assertEquals(2, new MutableInt("2").intValue()); 
  
     } 
  

 @Test 
     public void testIncrement500() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.increment(); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testPrimitiveValues501() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

 @Test 
     public void testPrimitiveValues502() { 
         final MutableShort mutNum = new MutableShort( (short) 1 ); 
          
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

 @Test 
     public void testToByte503() { 
         assertEquals(Byte.valueOf(0), new MutableByte((byte) 0).toByte()); 
         assertEquals(Byte.valueOf(12.3f), new MutableByte((byte) 0).toByte()); 
     } 
  

 @Test 
     public void testHashCode504() { 
         final MutableByte mutNumA = new MutableByte((byte) 0); 
         final MutableByte mutNumB = new MutableByte((byte) 0); 
         final MutableByte mutNumC = new MutableByte((byte) 1); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode()); 
     } 
  

 @Test 
     public void testHashCode505() { 
         final MutableInt mutNumA = new MutableInt(0); 
         final MutableInt mutNumB = new MutableInt(0); 
         final MutableInt mutNumC = new MutableInt(1); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode()); 
     } 
  

 @Test 
     public void testToString506() { 
         assertEquals("0", new MutableInt(0).toString()); 
         assertEquals("10", new MutableInt(10).toString()); 
         assertEquals("-123", new MutableInt(-123).toString()); 
     } 
  
 } 

 @Test 
     public void testToString507() { 
         assertEquals("0", new MutableInt(0).toString()); 
         assertEquals("10", new MutableInt(10).toString()); 
         assertEquals("-123", new MutableInt(-123).toString()); 
     } 
  
 } 

 lang3/JavaVersion.java
 @Test 
     public void testJavaVersionMatches508() { 
         String javaVersion = null; 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); 
         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); 
         javaVersion = ""; [E
 @Test 
     public void testGetJavaVersion509() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEqu
 @Test 
     public void testGetJavaVersion510() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEqu
 lang3/exception/DefaultExceptionContext.java
 @Test 
     public void testGetContextValues511() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testGetContextValues512() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testGetContextValues513() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testGetContextValues514() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testFormattedExceptionMessageNull515() { 
         exceptionContext = new DefaultExceptionContext(); 
         exceptionContext.getFormattedExceptionMessage(null); 
     } 
  
 } 

 @Test 
     public void testGetContextValues516() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testFormattedExceptionMessageNull517() { 
         exceptionContext = new DefaultExceptionContext(); 
         exceptionContext.getFormattedExceptionMessage(null); 
     } 
  
 } 

 @Test 
     public void testFormattedExceptionMessageNull518() { 
         exceptionContext = new DefaultExceptionContext(); 
         exceptionContext.getFormattedExceptionMessage(null); 
     } 
  
 } 

 @Test 
     public void testFormattedExceptionMessageNull519() { 
         exceptionContext = new DefaultExceptionContext(); 
         exceptionContext.getFormattedExceptionMessage(null); 
     } 
  
 } 

 lang3/mutable/MutableLong.java
 @Test 
     public void testDecrement520() { 
         final MutableShort mutNum = new MutableShort((short) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testSubtractValueObject521() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.subtract(Long.valueOf(1)); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testPrimitiveValues522() { 
         final MutableDouble mutNum = new MutableDouble(1.7); 
          
         assertEquals( 1.7F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.7, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

 @Test 
     public void testAddValuePrimitive523() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.add(1); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testHashCode524() { 
         final MutableLong mutNumA = new MutableLong(0); 
         final MutableLong mutNumB = new MutableLong(0); 
         final MutableLong mutNumC = new MutableLong(1); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode()); 
     } 
  

 @Test 
     public void testCompareTo525() { 
         final MutableLong mutNum = new MutableLong(0); 
  
         assertEquals(0, mutNum.compareTo(new MutableLong(0))); 
         assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); 
         assertEquals(-1, mutNum.compareTo(new MutableLong(1))); 
     } 
  

 @Test 
     public void testToString526() { 
         assertEquals("0", new MutableInt(0).toString()); 
         assertEquals("10", new MutableInt(10).toString()); 
         assertEquals("-123", new MutableInt(-123).toString()); 
     } 
  
 } 

 lang3/reflect/ConstructorUtils.java
 @Test 
     public void testInvokeConstructor527() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeExactConstructor528() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, (Object[]) null).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, new Object()).toString()); 
         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( 
 
 @Test 
     public void testInvokeExactConstructor529() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, (Object[]) null).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, new Object()).toString()); 
         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( 
 
 @Test 
     public void testInvokeExactConstructor530() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, (Object[]) null).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( 
                 TestBean.class, new Object()).toString()); 
         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( 
 
 @Test 
     public void testInvokeConstructor531() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeConstructor532() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeConstructor533() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 lang3/CharUtils.java
 @Test 
     public void testToCharacterObject_char534() { 
         assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); 
         assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); 
         
         for (int i = 0; i < 128; i++) { 
             final Character ch = CharUtils.toCharacterObject((char) i); 
             final Character ch2 = CharUtils.toCharacterObject((char) i); 
             assertSame(ch, ch2); 
             assertEquals(i, ch.charValue()); 
         } 
         for (int i = 128; i < 196; i++) { 
             final Character ch = CharUtils.toCharacterObject((char) i); 
   
 @Test 
     public void testToCharacterObject_String535() { 
         assertEquals(null, CharUtils.toCharacterObject((String) null)); 
         assertEquals(null, CharUtils.toCharacterObject((String) null)); 
         assertSame(null, CharUtils.toCharacterObject((String) null)); 
     } 
      

 @Test 
     public void testToCharacterObject_char536() { 
         assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); 
         assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); 
         
         for (int i = 0; i < 128; i++) { 
             final Character ch = CharUtils.toCharacterObject((char) i); 
             final Character ch2 = CharUtils.toCharacterObject((char) i); 
             assertSame(ch, ch2); 
             assertEquals(i, ch.charValue()); 
         } 
         for (int i = 128; i < 196; i++) { 
             final Character ch = CharUtils.toCharacterObject((char) i); 
   
 @Test 
     public void testToIntValue_Character537() { 
         assertEquals(0, CharUtils.toIntValue(new Character('0'))); 
         assertEquals(3, CharUtils.toIntValue(new Character('3'))); 
         try { 
             CharUtils.toIntValue(null); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             CharUtils.toIntValue(CHARACTER_A); 
         } catch (final IllegalArgumentException ex) {} 
     } 
      

 @Test 
     public void testToIntValue_Character_int538() { 
         assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); 
         assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); 
         assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); 
         assertEquals(-1, CharUtils.toIntValue(null, -1)); 
     } 
      

 @Test 
     public void testToIntValue_Character_int539() { 
         assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); 
         assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); 
         assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); 
         assertEquals(-1, CharUtils.toIntValue(null, -1)); 
     } 
      

 @Test 
     public void testIsAsciiAlphaUpper_char540() { 
         assertTrue(CharUtils.isAsciiAlphaUpper('a')); 
         assertTrue(CharUtils.isAsciiAlphaUpper('A')); 
         assertFalse(CharUtils.isAsciiAlphaUpper('3')); 
         assertFalse(CharUtils.isAsciiAlphaUpper('-')); 
         assertFalse(CharUtils.isAsciiAlphaUpper('\n')); 
         assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); 
         
         for (int i = 0; i < 196; i++) { 
             if (i >= 'A' && i <= 'Z') { 
                 assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); 
 
 lang3/tuple/Pair.java
 @Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization541() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

 @Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization542() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

 @Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization543() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

 @Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization544() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

 @Test 
     public void testToString545() throws Exception { 
         final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); 
         assertEquals("(Key,Something,Value)", triple.toString()); 
     } 
  

 lang3/text/translate/NumericEntityUnescaper.java
 @Test 
     public void testSupplementaryUnescaping546() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 @Test 
     public void testSupplementaryUnescaping547() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 @Test 
     public void testSupplementaryUnescaping548() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 @Test 
     public void testSupplementaryUnescaping549() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 @Test 
     public void testSupplementaryUnescaping550() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 lang3/concurrent/MultiBackgroundInitializer.java
 @Test 
     public void testInitializeRuntimeEx551() { 
         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); 
         child.ex = new RuntimeException(); 
         initializer.addInitializer(CHILD_INIT, child); 
         initializer.start(); 
         try { 
             initializer.get(); 
             fail("Runtime exception not thrown!"); 
         } catch (final Exception ex) { 
             assertEquals("Wrong exception", child.ex, ex); 
         } 
     } 
  
     /** 
      * Tests the behavior of the initializer if one of the child initializers 
      * throws a checked exception. 
      */ 

 @Test 
     public void testInitializeRuntimeEx552() { 
         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); 
         child.ex = new RuntimeException(); 
         initializer.addInitializer(CHILD_INIT, child); 
         initializer.start(); 
         try { 
             initializer.get(); 
             fail("Runtime exception not thrown!"); 
         } catch (final Exception ex) { 
             assertEquals("Wrong exception", child.ex, ex); 
         } 
     } 
  
     /** 
      * Tests the behavior of the initializer if one of the child initializers 
      * throws a checked exception. 
      */ 

 @Test 
     public void testInitializeRuntimeEx553() { 
         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); 
         child.ex = new RuntimeException(); 
         initializer.addInitializer(CHILD_INIT, child); 
         initializer.start(); 
         try { 
             initializer.get(); 
             fail("Runtime exception not thrown!"); 
         } catch (final Exception ex) { 
             assertEquals("Wrong exception", child.ex, ex); 
         } 
     } 
  
     /** 
      * Tests the behavior of the initializer if one of the child initializers 
      * throws a checked exception. 
      */ 

 @Test 
     public void testInitializeRuntimeEx554() { 
         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); 
         child.ex = new RuntimeException(); 
         initializer.addInitializer(CHILD_INIT, child); 
         initializer.start(); 
         try { 
             initializer.get(); 
             fail("Runtime exception not thrown!"); 
         } catch (final Exception ex) { 
             assertEquals("Wrong exception", child.ex, ex); 
         } 
     } 
  
     /** 
      * Tests the behavior of the initializer if one of the child initializers 
      * throws a checked exception. 
      */ 

 @Test 
     public void testInitializeRuntimeEx555() { 
         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); 
         child.ex = new RuntimeException(); 
         initializer.addInitializer(CHILD_INIT, child); 
         initializer.start(); 
         try { 
             initializer.get(); 
             fail("Runtime exception not thrown!"); 
         } catch (final Exception ex) { 
             assertEquals("Wrong exception", child.ex, ex); 
         } 
     } 
  
     /** 
      * Tests the behavior of the initializer if one of the child initializers 
      * throws a checked exception. 
      */ 

 @Test 
     public void testInitializeTempExec556() throws ConcurrentException { 
         checkInitialize(); 
         assertTrue("Executor not shutdown", initializer.getActiveExecutor() 
                 .isShutdown()); 
     } 
  
     /** 
      * Tests background processing if an external executor service is provided. 
      */ 

 @Test 
     public void testInitializeTempExec557() throws ConcurrentException { 
         checkInitialize(); 
         assertTrue("Executor not shutdown", initializer.getActiveExecutor() 
                 .isShutdown()); 
     } 
  
     /** 
      * Tests background processing if an external executor service is provided. 
      */ 

 @Test(expected = NoSuchElementException.class) 
     public void testResultGetExceptionUnknown558() throws ConcurrentException { 
         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); 
         res.getException("unknown"); 
     } 
  
     /** 
      * Tries to query the exception flag of an unknown child initializer from 
      * the results object. This should cause an exception. 
      */ 

 @Test(expected = NoSuchElementException.class) 
     public void testResultGetExceptionUnknown559() throws ConcurrentException { 
         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize(); 
         res.getException("unknown"); 
     } 
  
     /** 
      * Tries to query the exception flag of an unknown child initializer from 
      * the results object. This should cause an exception. 
      */ 

 lang3/CharEncoding.java
 @Test 
     public void testNotSupported560() { 
         assertFalse(CharEncoding.isSupported(null)); 
         assertFalse(CharEncoding.isSupported("")); 
         assertFalse(CharEncoding.isSupported(" ")); 
         assertFalse(CharEncoding.isSupported("\t\r\n")); 
         assertFalse(CharEncoding.isSupported("DOESNOTEXIST")); 
         assertFalse(CharEncoding.isSupported("this is not a valid encoding name")); 
     } 
  

 @Test 
     public void testNotSupported561() { 
         assertFalse(CharEncoding.isSupported(null)); 
         assertFalse(CharEncoding.isSupported("")); 
         assertFalse(CharEncoding.isSupported(" ")); 
         assertFalse(CharEncoding.isSupported("\t\r\n")); 
         assertFalse(CharEncoding.isSupported("DOESNOTEXIST")); 
         assertFalse(CharEncoding.isSupported("this is not a valid encoding name")); 
     } 
  

 lang3/text/translate/CharSequenceTranslator.java
 @Test 
     public void testSupplementaryUnescaping562() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 @Test 
     public void testSupplementaryUnescaping563() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 @Test 
     public void testSupplementaryUnescaping564() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
         final String input = "&#68642;"; 
         final String expected = "\uD803\uDC22"; 
  
         final String result = neu.translate(input); 
         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); 
     } 
  

 lang3/builder/IDKey.java
 lang3/builder/ToStringStyle.java
 @Test 
     public void testAppendSuper565() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper566() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper567() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper568() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper569() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper570() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper571() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper572() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper573() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper574() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper575() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testLongArrayArray576() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testLongArrayArray577() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testShortArrayArray578() { 
         short[][] array = new short[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testAppendSuper579() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testReflectionByteArrayArray580() { 
         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void testAppendSuper581() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testCharArrayArray582() { 
         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testAppendSuper583() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testLongArrayArray584() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testAppendSuper585() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testAppendSuper586() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testReflectionByteArrayArray587() { 
         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void testShortArrayArray588() { 
         short[][] array = new short[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testByte589() { 
         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); 
         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); 
         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); 
     } 
  
     @SuppressWarnings("cast") 

 @Test 
     public void testByte590() { 
         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); 
         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); 
         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); 
     } 
  
     @SuppressWarnings("cast") 

 @Test 
     public void testChar591() { 
         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); 
         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); 
         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); 
     } 
  

 @Test 
     public void testChar592() { 
         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); 
         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); 
         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); 
     } 
  

 @Test 
     public void testFloat593() { 
         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); 
     } 
  

 @Test 
     public void testFloat594() { 
         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); 
         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); 
     } 
  

 @Test 
     public void testPerson595() { 
         final Person p = new Person(); 
         p.name = "Ron Paul"; 
         p.age = 72; 
         p.smoker = false; 
         final String pBaseStr = p.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(p)); 
         assertEquals(pBaseStr + "[Ron Paul,72,false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); 
     } 
  

 @Test 
     public void testLongArrayArray596() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testLongArrayArray597() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testLongArrayArray598() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testLongArrayArray599() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testReflectionByteArrayArray600() { 
         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void testReflectionByteArrayArray601() { 
         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void testReflectionByteArrayArray602() { 
         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void testLongArray603() { 
         long[] array = new long[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testLongArray604() { 
         long[] array = new long[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testLongArrayArray605() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testIntArray606() { 
         int[] array = new int[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testIntArray607() { 
         int[] array = new int[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testIntArray608() { 
         int[] array = new int[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testByteArray609() { 
         byte[] array = new byte[] {1, 2, -3, 4}; 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testReflectionByteArrayArray610() { 
         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

 @Test 
     public void testCharArray611() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testCharArray612() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testCharArrayArray613() { 
         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testDoubleArray614() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testDoubleArray615() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testDoubleArray616() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testDoubleArray617() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testDoubleArray618() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testDoubleArray619() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testFloatArray620() { 
         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testFloatArray621() { 
         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testFloatArrayArray622() { 
         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testFloatArrayArray623() { 
         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testFloatArrayArray624() { 
         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testBooleanArray625() { 
         boolean[] array = new boolean[] {true, false, false}; 
         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testBooleanArray626() { 
         boolean[] array = new boolean[] {true, false, false}; 
         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testBooleanArray627() { 
         boolean[] array = new boolean[] {true, false, false}; 
         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testBooleanArrayArray628() { 
         boolean[][] array = new boolean[][] {{true, false}, null, {false}}; 
         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testBooleanArrayArray629() { 
         boolean[][] array = new boolean[][] {{true, false}, null, {false}}; 
         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

 @Test 
     public void testAppendSuper630() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testLongArrayArray631() { 
         long[][] array = new long[][] {{1, 2}, null, {5}}; 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); 
         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  
 } 

 @Test 
     public void testAppendSuper632() { 
         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); 
          
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); 
         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

 @Test 
     public void testOneArgNull633() { 
         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); 
         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testSetArrayStart634() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArrayStart(null); 
         assertEquals("", style.getArrayStart()); 
     } 
  

 @Test 
     public void testSetArrayStart635() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArrayStart(null); 
         assertEquals("", style.getArrayStart()); 
     } 
  

 @Test 
     public void testSetArrayEnd636() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArrayEnd(null); 
         assertEquals("", style.getArrayEnd()); 
     } 
  

 @Test 
     public void testSetArraySeparator637() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArraySeparator(null); 
         assertEquals("", style.getArraySeparator()); 
     } 
  

 @Test 
     public void testSetContentStart638() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setContentStart(null); 
         assertEquals("", style.getContentStart()); 
     } 
  

 @Test 
     public void testSetFieldNameValueSeparator639() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldNameValueSeparator(null); 
         assertEquals("", style.getFieldNameValueSeparator()); 
     } 
  

 @Test 
     public void testGetSetNullText640() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(null, sb.getNullText()); 
  
         sb.setNullText("null"); 
         assertEquals("null", sb.getNullText()); 
  
         sb.setNullText(""); 
         assertEquals(null, sb.getNullText()); 
  
         sb.setNullText("NULL"); 
         assertEquals("NULL", sb.getNullText()); 
  
         sb.setNullText((String) null); 
         assertEquals(null, sb.getNullText()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testSetNullText641() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setNullText(null); 
         assertEquals("", style.getNullText()); 
     } 
  

 @Test 
     public void testSetSizeEndText642() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeEndText(null); 
         assertEquals("", style.getSizeEndText()); 
     } 
  

 @Test 
     public void testSetSummaryObjectEndText643() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  

 @Test 
     public void testSetSummaryObjectEndText644() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  

 lang3/concurrent/LazyInitializer.java
 @Test 
     public void testGet645() throws ConcurrentException { 
         assertNotNull("No managed object", createInitializer().get()); 
     } 
  
     /** 
      * Tests whether sequential get() invocations always return the same 
      * instance. 
      */ 

 @Test 
     public void testGet646() throws ConcurrentException { 
         assertNotNull("No managed object", createInitializer().get()); 
     } 
  
     /** 
      * Tests whether sequential get() invocations always return the same 
      * instance. 
      */ 

 @Test 
     public void testGet647() throws ConcurrentException { 
         assertNotNull("No managed object", createInitializer().get()); 
     } 
  
     /** 
      * Tests whether sequential get() invocations always return the same 
      * instance. 
      */ 

 @Test 
     public void testGet648() throws ConcurrentException { 
         assertNotNull("No managed object", createInitializer().get()); 
     } 
  
     /** 
      * Tests whether sequential get() invocations always return the same 
      * instance. 
      */ 

 lang3/mutable/MutableFloat.java
 @Test 
     public void testSubtractValuePrimitive649() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.subtract(0.9f); 
          
         assertEquals(0.1f, mutNum.floatValue(), 0.01f); 
     } 
  

 @Test 
     public void testAddValuePrimitive650() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.add(1); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testHashCode651() { 
         final MutableFloat mutNumA = new MutableFloat(0f); 
         final MutableFloat mutNumB = new MutableFloat(0f); 
         final MutableFloat mutNumC = new MutableFloat(1f); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); 
     } 
  

 @Test 
     public void testHashCode652() { 
         final MutableFloat mutNumA = new MutableFloat(0f); 
         final MutableFloat mutNumB = new MutableFloat(0f); 
         final MutableFloat mutNumC = new MutableFloat(1f); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); 
     } 
  

 lang3/text/translate/AggregateTranslator.java
 @Test 
     public void testEscapeSurrogatePairsLang858653() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

 lang3/text/StrMatcher.java
 @Test 
     public void testQuoteMatcher654() { 
         final StrMatcher matcher = StrMatcher.quoteMatcher(); 
         assertSame(matcher, StrMatcher.quoteMatcher()); 
         assertEquals(0, matcher.isMatch(BUFFER1, 10)); 
         assertEquals(1, matcher.isMatch(BUFFER1, 11)); 
         assertEquals(1, matcher.isMatch(BUFFER1, 12)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testQuoteMatcher655() { 
         final StrMatcher matcher = StrMatcher.quoteMatcher(); 
         assertSame(matcher, StrMatcher.quoteMatcher()); 
         assertEquals(0, matcher.isMatch(BUFFER1, 10)); 
         assertEquals(1, matcher.isMatch(BUFFER1, 11)); 
         assertEquals(1, matcher.isMatch(BUFFER1, 12)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testDoubleQuoteMatcher656() { 
         final StrMatcher matcher = StrMatcher.doubleQuoteMatcher(); 
         assertSame(matcher, StrMatcher.doubleQuoteMatcher()); 
         assertEquals(0, matcher.isMatch(BUFFER1, 10)); 
         assertEquals(1, matcher.isMatch(BUFFER1, 11)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testCharSetMatcher_String657() { 
         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); 
         assertEquals(1, matcher.isMatch(BUFFER2, 0)); 
         assertEquals(0, matcher.isMatch(BUFFER2, 1)); 
         assertEquals(1, matcher.isMatch(BUFFER2, 2)); 
         assertEquals(0, matcher.isMatch(BUFFER2, 3)); 
         assertEquals(1, matcher.isMatch(BUFFER2, 4)); 
         assertEquals(0, matcher.isMatch(BUFFER2, 5)); 
         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); 
         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); 
         assertTrue(StrMatcher.
 @Test 
     public void testCharSetMatcher_String658() { 
         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); 
         assertEquals(1, matcher.isMatch(BUFFER2, 0)); 
         assertEquals(0, matcher.isMatch(BUFFER2, 1)); 
         assertEquals(1, matcher.isMatch(BUFFER2, 2)); 
         assertEquals(0, matcher.isMatch(BUFFER2, 3)); 
         assertEquals(1, matcher.isMatch(BUFFER2, 4)); 
         assertEquals(0, matcher.isMatch(BUFFER2, 5)); 
         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); 
         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); 
         assertTrue(StrMatcher.
 @Test 
     public void testDoubleQuoteMatcher659() { 
         final StrMatcher matcher = StrMatcher.doubleQuoteMatcher(); 
         assertSame(matcher, StrMatcher.doubleQuoteMatcher()); 
         assertEquals(0, matcher.isMatch(BUFFER1, 11)); 
         assertEquals(1, matcher.isMatch(BUFFER1, 12)); 
     } 
  
     //----------------------------------------------------------------------- 

 lang3/text/translate/EntityArrays.java
 lang3/mutable/MutableObject.java
 @Test 
     public void testGetSet660() { 
         final MutableObject<String> mutNum = new MutableObject<String>(); 
         assertEquals(null, new MutableObject<Object>().getValue()); 
          
         mutNum.setValue("HELLO"); 
         assertSame("HELLO", mutNum.getValue()); 
          
         mutNum.setValue(null); 
         assertSame(null, mutNum.getValue()); 
     } 
  

 @Test 
     public void testGetSet661() { 
         final MutableObject<String> mutNum = new MutableObject<String>(); 
         assertEquals(null, new MutableObject<Object>().getValue()); 
          
         mutNum.setValue("HELLO"); 
         assertSame("HELLO", mutNum.getValue()); 
          
         mutNum.setValue(null); 
         assertSame(null, mutNum.getValue()); 
     } 
  

 @Test 
     public void testEquals662() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
  
 lang3/ArrayUtils.java
 @Test 
     public void testToMap663() { 
         Map<?, ?> map = ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"hello", "world"}}); 
          
         assertEquals("bar", map.get("foo")); 
         assertEquals("world", map.get("hello")); 
          
         assertEquals(null, ArrayUtils.toMap(null)); 
         try { 
             ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"short"}}); 
             fail("exception expected"); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, "illegal type"});
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray664() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveAllFloatArrayOutOfBoundsIndex665() { 
         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray666() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray667() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray668() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test 
     public void testNullToEmptyInt669() { 
         // Test null handling 
         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); 
         // Test valid array handling 
         final int[] original = new int[] {1, 2}; 
         assertEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final int[] empty = new int[]{}; 
         final int[] result = ArrayUtils.nullToEmpty(empty); 
         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyShort670() { 
         // Test null handling 
         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); 
         // Test valid array handling 
         final short[] original = new short[] {1, 2}; 
         assertEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final short[] empty = new short[]{}; 
         final short[] result = ArrayUtils.nullToEmpty(empty); 
         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyShort671() { 
         // Test null handling 
         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); 
         // Test valid array handling 
         final short[] original = new short[] {1, 2}; 
         assertEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final short[] empty = new short[]{}; 
         final short[] result = ArrayUtils.nullToEmpty(empty); 
         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyShort672() { 
         // Test null handling 
         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); 
         // Test valid array handling 
         final short[] original = new short[] {1, 2}; 
         assertEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final short[] empty = new short[]{}; 
         final short[] result = ArrayUtils.nullToEmpty(empty); 
         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyDouble673() { 
         // Test null handling 
         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); 
         // Test valid array handling 
         final double[] original = new double[] {1L, 2L}; 
         assertEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final double[] empty = new double[]{}; 
         final double[] result = ArrayUtils.nullToEmpty(empty); 
         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyBoolean674() { 
         // Test null handling 
         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); 
         // Test valid array handling 
         final boolean[] original = new boolean[] {true, false}; 
         assertEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final boolean[] empty = new boolean[]{}; 
         final boolean[] result = ArrayUtils.nullToEmpty(empty); 
         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyBoolean675() { 
         // Test null handling 
         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); 
         // Test valid array handling 
         final boolean[] original = new boolean[] {true, false}; 
         assertEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final boolean[] empty = new boolean[]{}; 
         final boolean[] result = ArrayUtils.nullToEmpty(empty); 
         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyShortObject676() { 
         // Test null handling 
         assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null)); 
         // Test valid array handling 
         final Short[] original = new Short[] {1, 2}; 
         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final Short[] empty = new Short[]{}; 
         final Short[] result = ArrayUtils.nullToEmpty(empty); 
         assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
  

 @Test 
     public void testNullToEmptyCharObject677() { 
         // Test null handling 
         assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); 
         // Test valid array handling 
         final Character[] original = new Character[] {'a', 'b'}; 
         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final Character[] empty = new Character[]{}; 
         final Character[] result = ArrayUtils.nullToEmpty(empty); 
         assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyByteObject678() { 
         // Test null handling 
         assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); 
         // Test valid array handling 
         final Byte[] original = new Byte[] {0x0F, 0x0E}; 
         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final Byte[] empty = new Byte[]{}; 
         final Byte[] result = ArrayUtils.nullToEmpty(empty); 
         assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyDoubleObject679() { 
         // Test null handling 
         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); 
         // Test valid array handling 
         final Double[] original = new Double[] {1D, 2D}; 
         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final Double[] empty = new Double[]{}; 
         final Double[] result = ArrayUtils.nullToEmpty(empty); 
         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testNullToEmptyDoubleObject680() { 
         // Test null handling 
         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); 
         // Test valid array handling 
         final Double[] original = new Double[] {1D, 2D}; 
         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); 
         // Test empty array handling 
         final Double[] empty = new Double[]{}; 
         final Double[] result = ArrayUtils.nullToEmpty(empty); 
         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); 
         assertTrue(empty != result); 
     } 
      

 @Test 
     public void testSubarrayObject681() { 
         final Object[] nullArray = null; 
         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; 
  
         assertEquals("0 start, mid end", "abcd", 
             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); 
         assertEquals("0 start, length end", "abcdef", 
             StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); 
         assertEquals("mid start, mid end", "bcd", 
             StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); 
         assertEquals("mid start, length end", "bcdef", 
             StringUtils.join
 @Test 
     public void testSubarrayObject682() { 
         final Object[] nullArray = null; 
         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; 
  
         assertEquals("0 start, mid end", "abcd", 
             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); 
         assertEquals("0 start, length end", "abcdef", 
             StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); 
         assertEquals("mid start, mid end", "bcd", 
             StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); 
         assertEquals("mid start, length end", "bcdef", 
             StringUtils.join
 @Test 
     public void testSubarrayShort683() { 
         final short[] nullArray = null; 
         final short[] array = { 10, 11, 12, 13, 14, 15 }; 
         final short[] leftSubarray    = { 10, 11, 12, 13 }; 
         final short[] midSubarray     = { 11, 12, 13, 14 }; 
         final short[] rightSubarray   = { 12, 13, 14, 15 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
             ArrayUtils.isEquals(array, 
          
 @Test 
     public void testSubarrChar684() { 
         final char[] nullArray = null; 
         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; 
         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; 
         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
           
 @Test 
     public void testSubarrChar685() { 
         final char[] nullArray = null; 
         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; 
         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; 
         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
           
 @Test 
     public void testSubarrChar686() { 
         final char[] nullArray = null; 
         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; 
         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; 
         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; 
         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
           
 @Test 
     public void testSubarrayDouble687() { 
         final double[] nullArray = null; 
         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; 
         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; 
         final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, }; 
         final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", [E
 @Test 
     public void testSubarrayDouble688() { 
         final double[] nullArray = null; 
         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; 
         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; 
         final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, }; 
         final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", [E
 @Test 
     public void testSubarrayDouble689() { 
         final double[] nullArray = null; 
         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; 
         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; 
         final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, }; 
         final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", [E
 @Test 
     public void testSubarrayFloat690() { 
         final float[] nullArray = null; 
         final float[] array = { 10, 11, 12, 13, 14, 15 }; 
         final float[] leftSubarray    = { 10, 11, 12, 13 }; 
         final float[] midSubarray     = { 11, 12, 13, 14 }; 
         final float[] rightSubarray   = { 12, 13, 14, 15 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
             ArrayUtils.isEquals(array, 
          
 @Test 
     public void testSubarrayFloat691() { 
         final float[] nullArray = null; 
         final float[] array = { 10, 11, 12, 13, 14, 15 }; 
         final float[] leftSubarray    = { 10, 11, 12, 13 }; 
         final float[] midSubarray     = { 11, 12, 13, 14 }; 
         final float[] rightSubarray   = { 12, 13, 14, 15 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
             ArrayUtils.isEquals(array, 
          
 @Test 
     public void testSubarrayFloat692() { 
         final float[] nullArray = null; 
         final float[] array = { 10, 11, 12, 13, 14, 15 }; 
         final float[] leftSubarray    = { 10, 11, 12, 13 }; 
         final float[] midSubarray     = { 11, 12, 13, 14 }; 
         final float[] rightSubarray   = { 12, 13, 14, 15 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
             ArrayUtils.isEquals(array, 
          
 @Test 
     public void testSubarrayFloat693() { 
         final float[] nullArray = null; 
         final float[] array = { 10, 11, 12, 13, 14, 15 }; 
         final float[] leftSubarray    = { 10, 11, 12, 13 }; 
         final float[] midSubarray     = { 11, 12, 13, 14 }; 
         final float[] rightSubarray   = { 12, 13, 14, 15 }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
             ArrayUtils.isEquals(array, 
          
 @Test 
     public void testSubarrayBoolean694() { 
         final boolean[] nullArray = null; 
         final boolean[] array = { true, true, false, true, false, true }; 
         final boolean[] leftSubarray  = { true, true, false, true  }; 
         final boolean[] midSubarray   = { true, false, true, false }; 
         final boolean[] rightSubarray = { false, true, false, true }; 
  
  
         assertTrue("0 start, mid end", 
             ArrayUtils.isEquals(leftSubarray, 
                 ArrayUtils.subarray(array, 0, 4))); 
  
         assertTrue("0 start, length end", 
             ArrayUtils.isEquals(array, 
              
 @Test 
     public void testSameLengthInt695() { 
         final int[] nullArray = null; 
         final int[] emptyArray = new int[0]; 
         final int[] oneArray = new int[] {4}; 
         final int[] twoArray = new int[] {5, 7}; 
          
         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); 
          
         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); 
     
 @Test 
     public void testSameLengthFloat696() { 
         final float[] nullArray = null; 
         final float[] emptyArray = new float[0]; 
         final float[] oneArray = new float[] {2.5f}; 
         final float[] twoArray = new float[] {6.4f, 5.8f}; 
          
         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); 
          
         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));
 @Test 
     public void testSameLengthBoolean697() { 
         final boolean[] nullArray = null; 
         final boolean[] emptyArray = new boolean[0]; 
         final boolean[] oneArray = new boolean[] {true}; 
         final boolean[] twoArray = new boolean[] {true, false}; 
          
         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); 
          
         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); 
    
 @Test 
     public void testSameLengthBoolean698() { 
         final boolean[] nullArray = null; 
         final boolean[] emptyArray = new boolean[0]; 
         final boolean[] oneArray = new boolean[] {true}; 
         final boolean[] twoArray = new boolean[] {true, false}; 
          
         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); 
         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); 
          
         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); 
         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); 
    
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveAllFloatArrayOutOfBoundsIndex699() { 
         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); 
     } 
  

 @Test 
     public void testReverse700() { 
         final StringBuffer str1 = new StringBuffer("pick"); 
         final String str2 = "a"; 
         final String[] str3 = new String[] {"stick"}; 
         final String str4 = "up"; 
          
         Object[] array = new Object[] {str1, str2, str3}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], str3); 
         assertEquals(array[1], str2); 
         assertEquals(array[2], str1); 
          
         array = new Object[] {str1, str2, str3, str4}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0
 @Test 
     public void testReverse701() { 
         final StringBuffer str1 = new StringBuffer("pick"); 
         final String str2 = "a"; 
         final String[] str3 = new String[] {"stick"}; 
         final String str4 = "up"; 
          
         Object[] array = new Object[] {str1, str2, str3}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], str3); 
         assertEquals(array[1], str2); 
         assertEquals(array[2], str1); 
          
         array = new Object[] {str1, str2, str3, str4}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0
 @Test 
     public void testReverse702() { 
         final StringBuffer str1 = new StringBuffer("pick"); 
         final String str2 = "a"; 
         final String[] str3 = new String[] {"stick"}; 
         final String str4 = "up"; 
          
         Object[] array = new Object[] {str1, str2, str3}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], str3); 
         assertEquals(array[1], str2); 
         assertEquals(array[2], str1); 
          
         array = new Object[] {str1, str2, str3, str4}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0
 @Test 
     public void testReverseLong703() { 
         long[] array = new long[] {1L, 2L, 3L}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 3L); 
         assertEquals(array[1], 2L); 
         assertEquals(array[2], 1L); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseLong704() { 
         long[] array = new long[] {1L, 2L, 3L}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 3L); 
         assertEquals(array[1], 2L); 
         assertEquals(array[2], 1L); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseInt705() { 
         int[] array = new int[] {1, 2, 3}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 3); 
         assertEquals(array[1], 2); 
         assertEquals(array[2], 1); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseInt706() { 
         int[] array = new int[] {1, 2, 3}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 3); 
         assertEquals(array[1], 2); 
         assertEquals(array[2], 1); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseShort707() { 
         short[] array = new short[] {1, 2, 3}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 3); 
         assertEquals(array[1], 2); 
         assertEquals(array[2], 1); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseChar708() { 
         char[] array = new char[] {'a', 'f', 'C'}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 'C'); 
         assertEquals(array[1], 'f'); 
         assertEquals(array[2], 'a'); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseChar709() { 
         char[] array = new char[] {'a', 'f', 'C'}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 'C'); 
         assertEquals(array[1], 'f'); 
         assertEquals(array[2], 'a'); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseByte710() { 
         byte[] array = new byte[] {2, 3, 4}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 4); 
         assertEquals(array[1], 3); 
         assertEquals(array[2], 2); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseByte711() { 
         byte[] array = new byte[] {2, 3, 4}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 4); 
         assertEquals(array[1], 3); 
         assertEquals(array[2], 2); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseByte712() { 
         byte[] array = new byte[] {2, 3, 4}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 4); 
         assertEquals(array[1], 3); 
         assertEquals(array[2], 2); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseDouble713() { 
         double[] array = new double[] {0.3d, 0.4d, 0.5d}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 0.5d, 0.0d); 
         assertEquals(array[1], 0.4d, 0.0d); 
         assertEquals(array[2], 0.3d, 0.0d); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseDouble714() { 
         double[] array = new double[] {0.3d, 0.4d, 0.5d}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 0.5d, 0.0d); 
         assertEquals(array[1], 0.4d, 0.0d); 
         assertEquals(array[2], 0.3d, 0.0d); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseDouble715() { 
         double[] array = new double[] {0.3d, 0.4d, 0.5d}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 0.5d, 0.0d); 
         assertEquals(array[1], 0.4d, 0.0d); 
         assertEquals(array[2], 0.3d, 0.0d); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseFloat716() { 
         float[] array = new float[] {0.3f, 0.4f, 0.5f}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 0.5f, 0.0f); 
         assertEquals(array[1], 0.4f, 0.0f); 
         assertEquals(array[2], 0.3f, 0.0f); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseFloat717() { 
         float[] array = new float[] {0.3f, 0.4f, 0.5f}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 0.5f, 0.0f); 
         assertEquals(array[1], 0.4f, 0.0f); 
         assertEquals(array[2], 0.3f, 0.0f); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseFloat718() { 
         float[] array = new float[] {0.3f, 0.4f, 0.5f}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 0.5f, 0.0f); 
         assertEquals(array[1], 0.4f, 0.0f); 
         assertEquals(array[2], 0.3f, 0.0f); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testReverseFloat719() { 
         float[] array = new float[] {0.3f, 0.4f, 0.5f}; 
         ArrayUtils.reverse(array); 
         assertEquals(array[0], 0.5f, 0.0f); 
         assertEquals(array[1], 0.4f, 0.0f); 
         assertEquals(array[2], 0.3f, 0.0f); 
  
         array = null; 
         ArrayUtils.reverse(array); 
         assertEquals(null, array); 
     } 
      

 @Test 
     public void testContains720() { 
         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; 
         assertFalse(ArrayUtils.contains(null, null)); 
         assertFalse(ArrayUtils.contains(null, "1")); 
         assertTrue(ArrayUtils.contains(array, "0")); 
         assertTrue(ArrayUtils.contains(array, "1")); 
         assertTrue(ArrayUtils.contains(array, "2")); 
         assertTrue(ArrayUtils.contains(array, "3")); 
         assertTrue(ArrayUtils.contains(array, null)); 
         assertFalse(ArrayUtils.contains(array, "notInArray")); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testLastIndexOf721() { 
         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); 
         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); 
         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); 
     }
 @Test 
     public void testLastIndexOf722() { 
         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); 
         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); 
         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); 
     }
 @Test 
     public void testLastIndexOf723() { 
         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); 
         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); 
         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); 
     }
 @Test 
     public void testLastIndexOf724() { 
         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); 
         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); 
         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); 
     }
 @Test 
     public void testLastIndexOf725() { 
         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); 
         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); 
         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); 
     }
 @Test 
     public void testContains726() { 
         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; 
         assertFalse(ArrayUtils.contains(null, null)); 
         assertFalse(ArrayUtils.contains(null, "1")); 
         assertTrue(ArrayUtils.contains(array, "0")); 
         assertTrue(ArrayUtils.contains(array, "1")); 
         assertTrue(ArrayUtils.contains(array, "2")); 
         assertTrue(ArrayUtils.contains(array, "3")); 
         assertTrue(ArrayUtils.contains(array, null)); 
         assertFalse(ArrayUtils.contains(array, "notInArray")); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray727() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     public void testLastIndexOfLong728() { 
         long[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); 
         array = new long[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); 
     } 
  

 @Test 
     public void testContainsLong729() { 
         long[] array = null; 
         assertFalse(ArrayUtils.contains(array, (long) 1)); 
         array = new long[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (long) 0)); 
         assertTrue(ArrayUtils.contains(array, (long) 1)); 
         assertTrue(ArrayUtils.contains(array, (long) 2)); 
         assertTrue(ArrayUtils.contains(array, (long) 3)); 
         assertFalse(ArrayUtils.contains(array, (long) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsInt730() { 
         int[] array = null; 
         assertFalse(ArrayUtils.contains(array, 1)); 
         array = new int[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, 0)); 
         assertTrue(ArrayUtils.contains(array, 1)); 
         assertTrue(ArrayUtils.contains(array, 2)); 
         assertTrue(ArrayUtils.contains(array, 3)); 
         assertFalse(ArrayUtils.contains(array, 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsInt731() { 
         int[] array = null; 
         assertFalse(ArrayUtils.contains(array, 1)); 
         array = new int[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, 0)); 
         assertTrue(ArrayUtils.contains(array, 1)); 
         assertTrue(ArrayUtils.contains(array, 2)); 
         assertTrue(ArrayUtils.contains(array, 3)); 
         assertFalse(ArrayUtils.contains(array, 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsInt732() { 
         int[] array = null; 
         assertFalse(ArrayUtils.contains(array, 1)); 
         array = new int[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, 0)); 
         assertTrue(ArrayUtils.contains(array, 1)); 
         assertTrue(ArrayUtils.contains(array, 2)); 
         assertTrue(ArrayUtils.contains(array, 3)); 
         assertFalse(ArrayUtils.contains(array, 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testLastIndexOfInt733() { 
         int[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); 
         array = new int[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); 
     } 
  

 @Test 
     public void testLastIndexOfInt734() { 
         int[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); 
         array = new int[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); 
     } 
  

 @Test 
     public void testLastIndexOfShort735() { 
         short[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); 
     } 
  

 @Test 
     public void testLastIndexOfShort736() { 
         short[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); 
     } 
  

 @Test 
     public void testLastIndexOfShort737() { 
         short[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); 
     } 
  

 @Test 
     public void testContainsShort738() { 
         short[] array = null; 
         assertFalse(ArrayUtils.contains(array, (short) 1)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (short) 0)); 
         assertTrue(ArrayUtils.contains(array, (short) 1)); 
         assertTrue(ArrayUtils.contains(array, (short) 2)); 
         assertTrue(ArrayUtils.contains(array, (short) 3)); 
         assertFalse(ArrayUtils.contains(array, (short) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsChar739() { 
         char[] array = null; 
         assertFalse(ArrayUtils.contains(array, 'b')); 
         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; 
         assertTrue(ArrayUtils.contains(array, 'a')); 
         assertTrue(ArrayUtils.contains(array, 'b')); 
         assertTrue(ArrayUtils.contains(array, 'c')); 
         assertTrue(ArrayUtils.contains(array, 'd')); 
         assertFalse(ArrayUtils.contains(array, 'e')); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsChar740() { 
         char[] array = null; 
         assertFalse(ArrayUtils.contains(array, 'b')); 
         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; 
         assertTrue(ArrayUtils.contains(array, 'a')); 
         assertTrue(ArrayUtils.contains(array, 'b')); 
         assertTrue(ArrayUtils.contains(array, 'c')); 
         assertTrue(ArrayUtils.contains(array, 'd')); 
         assertFalse(ArrayUtils.contains(array, 'e')); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsChar741() { 
         char[] array = null; 
         assertFalse(ArrayUtils.contains(array, 'b')); 
         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; 
         assertTrue(ArrayUtils.contains(array, 'a')); 
         assertTrue(ArrayUtils.contains(array, 'b')); 
         assertTrue(ArrayUtils.contains(array, 'c')); 
         assertTrue(ArrayUtils.contains(array, 'd')); 
         assertFalse(ArrayUtils.contains(array, 'e')); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testLastIndexOfChar742() { 
         char[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a')); 
         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, 'a')); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, 'b')); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, 'c')); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, 'd')); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); 
     } 
  

 @Test 
     public void testContainsChar743() { 
         char[] array = null; 
         assertFalse(ArrayUtils.contains(array, 'b')); 
         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; 
         assertTrue(ArrayUtils.contains(array, 'a')); 
         assertTrue(ArrayUtils.contains(array, 'b')); 
         assertTrue(ArrayUtils.contains(array, 'c')); 
         assertTrue(ArrayUtils.contains(array, 'd')); 
         assertFalse(ArrayUtils.contains(array, 'e')); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsByte744() { 
         byte[] array = null; 
         assertFalse(ArrayUtils.contains(array, (byte) 1)); 
         array = new byte[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (byte) 0)); 
         assertTrue(ArrayUtils.contains(array, (byte) 1)); 
         assertTrue(ArrayUtils.contains(array, (byte) 2)); 
         assertTrue(ArrayUtils.contains(array, (byte) 3)); 
         assertFalse(ArrayUtils.contains(array, (byte) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsByte745() { 
         byte[] array = null; 
         assertFalse(ArrayUtils.contains(array, (byte) 1)); 
         array = new byte[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (byte) 0)); 
         assertTrue(ArrayUtils.contains(array, (byte) 1)); 
         assertTrue(ArrayUtils.contains(array, (byte) 2)); 
         assertTrue(ArrayUtils.contains(array, (byte) 3)); 
         assertFalse(ArrayUtils.contains(array, (byte) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsByte746() { 
         byte[] array = null; 
         assertFalse(ArrayUtils.contains(array, (byte) 1)); 
         array = new byte[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (byte) 0)); 
         assertTrue(ArrayUtils.contains(array, (byte) 1)); 
         assertTrue(ArrayUtils.contains(array, (byte) 2)); 
         assertTrue(ArrayUtils.contains(array, (byte) 3)); 
         assertFalse(ArrayUtils.contains(array, (byte) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testLastIndexOfByte747() { 
         byte[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); 
         array = new byte[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); 
     } 
  

 @Test 
     public void testLastIndexOfByte748() { 
         byte[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); 
         array = new byte[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); 
     } 
  

 @Test 
     public void testIndexOfDoubleWithStartIndexTolerance749() { 
         double[] array = null; 
         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); 
         array = new double[0]; 
         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); 
         array = new double[] { 0, 1, 2, 3, 0 }; 
         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); 
         assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); 
         assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); 
         assertEquals(2, ArrayUtils.indexOf(array, (double) 2
 @Test 
     public void testLastIndexOfDoubleWithStartIndex750() { 
         double[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); 
         array = new double[0]; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); 
         array = new double[] { 0, 1, 2, 3, 0 }; 
         assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2)); 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2)); 
         assertEquals(-1, ArrayUtils.last
 @Test 
     public void testLastIndexOfDoubleTolerance751() { 
         double[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); 
         array = new double[0]; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); 
         array = new double[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.0000
 @Test 
     public void testLastIndexOfDoubleTolerance752() { 
         double[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); 
         array = new double[0]; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); 
         array = new double[] { 0, 1, 2, 3, 0 }; 
         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); 
         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); 
         assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.0000
 @Test 
     public void testContainsBoolean753() { 
         boolean[] array = null; 
         assertFalse(ArrayUtils.contains(array, true)); 
         array = new boolean[] { true, false, true }; 
         assertTrue(ArrayUtils.contains(array, true)); 
         assertTrue(ArrayUtils.contains(array, false)); 
         array = new boolean[] { true, true }; 
         assertTrue(ArrayUtils.contains(array, true)); 
         assertFalse(ArrayUtils.contains(array, false)); 
     } 
      
     // testToPrimitive/Object for boolean 
     //  ----------------------------------------------------------------------- 

 @Test 
     public void testLastIndexOfBoolean754() { 
         boolean[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[0]; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[] { true, false, true }; 
         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); 
         array = new boolean[] { true, true }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); 
     } 
  

 @Test 
     public void testLastIndexOfBoolean755() { 
         boolean[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[0]; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[] { true, false, true }; 
         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); 
         array = new boolean[] { true, true }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); 
     } 
  

 @Test 
     public void testLastIndexOfBoolean756() { 
         boolean[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[0]; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[] { true, false, true }; 
         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); 
         array = new boolean[] { true, true }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); 
     } 
  

 @Test 
     public void testLastIndexOfBoolean757() { 
         boolean[] array = null; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[0]; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); 
         array = new boolean[] { true, false, true }; 
         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); 
         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); 
         array = new boolean[] { true, true }; 
         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); 
     } 
  

 @Test 
     public void testToPrimitive_char758() { 
         final Character[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b)); 
          
         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); 
          
         assertTrue(Arrays.equals( 
             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, 
             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  
                 new Character(Character.MAX_VALUE), new Character('0')})) 
         ); 
  
         try { 
             ArrayUtils.toPrimitive
 @Test 
     public void testToPrimitive_char759() { 
         final Character[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b)); 
          
         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); 
          
         assertTrue(Arrays.equals( 
             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, 
             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  
                 new Character(Character.MAX_VALUE), new Character('0')})) 
         ); 
  
         try { 
             ArrayUtils.toPrimitive
 @Test 
     public void testToPrimitive_char_char760() { 
         final Character[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); 
          
         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  
             ArrayUtils.toPrimitive(new Character[0], (char)0)); 
          
         assertTrue(Arrays.equals( 
             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, 
             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  
                 new Character(Character.MAX_VALUE), new Character('0')},  
                 Character.MIN_VALUE))
 @Test 
     public void testToPrimitive_char_char761() { 
         final Character[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); 
          
         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  
             ArrayUtils.toPrimitive(new Character[0], (char)0)); 
          
         assertTrue(Arrays.equals( 
             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, 
             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  
                 new Character(Character.MAX_VALUE), new Character('0')},  
                 Character.MIN_VALUE))
 @Test 
      public void testToPrimitive_long762() { 
          final Long[] b = null; 
          assertEquals(null, ArrayUtils.toPrimitive(b)); 
           
          assertSame(ArrayUtils.EMPTY_LONG_ARRAY,  
             ArrayUtils.toPrimitive(new Long[0])); 
           
          assertTrue(Arrays.equals( 
              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE),  
                  Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)})) 
          ); 
  [E
 @Test 
      public void testToPrimitive_long_long763() { 
          final Long[] l = null; 
          assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); 
           
          assertSame(ArrayUtils.EMPTY_LONG_ARRAY,  
          ArrayUtils.toPrimitive(new Long[0], 1)); 
           
          assertTrue(Arrays.equals( 
              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE),  
                  Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)},1))); 
        
 @Test 
     public void testToObject_long764() { 
         final long[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
      
         assertSame( 
             ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, 
             ArrayUtils.toObject(new long[0])); 
      
         assertTrue( 
             Arrays.equals( 
                 new Long[] { 
                     Long.valueOf(Long.MIN_VALUE), 
                     Long.valueOf(Long.MAX_VALUE), 
                     Long.valueOf(
 @Test 
      public void testToPrimitive_int765() { 
          final Integer[] b = null; 
          assertEquals(null, ArrayUtils.toPrimitive(b)); 
          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); 
          assertTrue(Arrays.equals( 
              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  
                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)})) 
          ); 
  
          try { 
              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf
 @Test 
      public void testToPrimitive_int766() { 
          final Integer[] b = null; 
          assertEquals(null, ArrayUtils.toPrimitive(b)); 
          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); 
          assertTrue(Arrays.equals( 
              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  
                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)})) 
          ); 
  
          try { 
              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf
 @Test 
      public void testToPrimitive_int767() { 
          final Integer[] b = null; 
          assertEquals(null, ArrayUtils.toPrimitive(b)); 
          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); 
          assertTrue(Arrays.equals( 
              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  
                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)})) 
          ); 
  
          try { 
              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf
 @Test 
     public void testToPrimitive_intNull768() { 
         final Integer[] iArray = null; 
         assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); 
     } 
  

 @Test 
     public void testToPrimitive_intNull769() { 
         final Integer[] iArray = null; 
         assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); 
     } 
  

 @Test 
     public void testToObject_int770() { 
         final int[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
      
         assertSame( 
             ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, 
             ArrayUtils.toObject(new int[0])); 
      
         assertTrue( 
             Arrays.equals( 
                 new Integer[] { 
                     Integer.valueOf(Integer.MIN_VALUE), 
                     Integer.valueOf(Integer.MAX_VALUE), 
                     Integer.valueOf
 @Test 
     public void testToPrimitive_short_short771() { 
         final Short[] s = null; 
         assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); 
          
         assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],  
         Short.MIN_VALUE)); 
          
         assertTrue(Arrays.equals( 
             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999}, 
             ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE),  
                 Short.valueOf(Short.MAX_VALUE), Short.valueOf((short)9999999)}, Short.MIN_VALUE)) 
        
 @Test 
     public void testToObject_short772() { 
         final short[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
          
         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  
         ArrayUtils.toObject(new short[0])); 
          
         assertTrue(Arrays.equals( 
             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  
                 Short.valueOf((short)9999999)}, 
             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  
                 (short)9999999})) 
     
 @Test 
     public void testToObject_short773() { 
         final short[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
          
         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  
         ArrayUtils.toObject(new short[0])); 
          
         assertTrue(Arrays.equals( 
             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  
                 Short.valueOf((short)9999999)}, 
             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  
                 (short)9999999})) 
     
 @Test 
     public void testToObject_short774() { 
         final short[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
          
         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  
         ArrayUtils.toObject(new short[0])); 
          
         assertTrue(Arrays.equals( 
             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  
                 Short.valueOf((short)9999999)}, 
             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  
                 (short)9999999})) 
     
 @Test 
     public void testToObject_short775() { 
         final short[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
          
         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  
         ArrayUtils.toObject(new short[0])); 
          
         assertTrue(Arrays.equals( 
             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  
                 Short.valueOf((short)9999999)}, 
             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  
                 (short)9999999})) 
     
 @Test 
     public void testToObject_short776() { 
         final short[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
          
         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  
         ArrayUtils.toObject(new short[0])); 
          
         assertTrue(Arrays.equals( 
             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  
                 Short.valueOf((short)9999999)}, 
             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  
                 (short)9999999})) 
     
 @Test 
     public void testToObject_short777() { 
         final short[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
          
         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  
         ArrayUtils.toObject(new short[0])); 
          
         assertTrue(Arrays.equals( 
             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  
                 Short.valueOf((short)9999999)}, 
             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  
                 (short)9999999})) 
     
 @Test 
     public void testToPrimitive_byte778() { 
         final Byte[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b)); 
          
         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); 
          
         assertTrue(Arrays.equals( 
             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, 
             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  
                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) 
         ); 
  
         try { 
        
 @Test 
     public void testToPrimitive_byte779() { 
         final Byte[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b)); 
          
         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); 
          
         assertTrue(Arrays.equals( 
             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, 
             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  
                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) 
         ); 
  
         try { 
        
 @Test 
     public void testToPrimitive_byte780() { 
         final Byte[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b)); 
          
         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); 
          
         assertTrue(Arrays.equals( 
             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, 
             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  
                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) 
         ); 
  
         try { 
        
 @Test 
     public void testToPrimitive_byte_byte781() { 
         final Byte[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); 
          
         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,  
             ArrayUtils.toPrimitive(new Byte[0], (byte)1)); 
          
         assertTrue(Arrays.equals( 
             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, 
             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  
                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},  
          
 @Test 
     public void testToPrimitive_byte_byte782() { 
         final Byte[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); 
          
         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,  
             ArrayUtils.toPrimitive(new Byte[0], (byte)1)); 
          
         assertTrue(Arrays.equals( 
             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, 
             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  
                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},  
          
 @Test 
     public void testToObject_byte783() { 
         final byte[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
          
         assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,  
             ArrayUtils.toObject(new byte[0])); 
          
         assertTrue(Arrays.equals( 
             new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  
                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}, 
                 ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE,  
                 (byte)9999999})) [
 @Test 
     public void testToObject_double784() { 
         final double[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
      
         assertSame( 
             ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, 
             ArrayUtils.toObject(new double[0])); 
      
         assertTrue( 
             Arrays.equals( 
                 new Double[] { 
                     Double.valueOf(Double.MIN_VALUE), 
                     Double.valueOf(Double.MAX_VALUE), 
                     Double.valueOf
 @Test 
      public void testToPrimitive_double785() { 
          final Double[] b = null; 
          assertEquals(null, ArrayUtils.toPrimitive(b)); 
           
          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  
             ArrayUtils.toPrimitive(new Double[0])); 
           
          assertTrue(Arrays.equals( 
              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),  
                  Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)})) 
          ); 
  [
 @Test 
      public void testToPrimitive_double786() { 
          final Double[] b = null; 
          assertEquals(null, ArrayUtils.toPrimitive(b)); 
           
          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  
             ArrayUtils.toPrimitive(new Double[0])); 
           
          assertTrue(Arrays.equals( 
              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),  
                  Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)})) 
          ); 
  [
 @Test 
      public void testToPrimitive_double787() { 
          final Double[] b = null; 
          assertEquals(null, ArrayUtils.toPrimitive(b)); 
           
          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  
             ArrayUtils.toPrimitive(new Double[0])); 
           
          assertTrue(Arrays.equals( 
              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),  
                  Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)})) 
          ); 
  [
 @Test 
      public void testToPrimitive_float_float788() { 
          final Float[] l = null; 
          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); 
           
          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  
          ArrayUtils.toPrimitive(new Float[0], 1)); 
           
          assertTrue(Arrays.equals( 
              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  
                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); 
       
 @Test 
      public void testToPrimitive_float_float789() { 
          final Float[] l = null; 
          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); 
           
          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  
          ArrayUtils.toPrimitive(new Float[0], 1)); 
           
          assertTrue(Arrays.equals( 
              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  
                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); 
       
 @Test 
      public void testToPrimitive_float_float790() { 
          final Float[] l = null; 
          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); 
           
          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  
          ArrayUtils.toPrimitive(new Float[0], 1)); 
           
          assertTrue(Arrays.equals( 
              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  
                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); 
       
 @Test 
      public void testToPrimitive_float_float791() { 
          final Float[] l = null; 
          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); 
           
          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  
          ArrayUtils.toPrimitive(new Float[0], 1)); 
           
          assertTrue(Arrays.equals( 
              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, 
              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  
                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); 
       
 @Test 
     public void testToObject_float792() { 
         final float[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
      
         assertSame( 
             ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, 
             ArrayUtils.toObject(new float[0])); 
      
         assertTrue( 
             Arrays.equals( 
                 new Float[] { 
                     Float.valueOf(Float.MIN_VALUE), 
                     Float.valueOf(Float.MAX_VALUE), 
                     Float.valueOf
 @Test 
     public void testToPrimitive_boolean793() { 
         final Boolean[] b = null; 
         assertEquals(null, ArrayUtils.toPrimitive(b)); 
         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); 
         assertTrue(Arrays.equals( 
             new boolean[] {true, false, true}, 
             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE})) 
         ); 
  
         try { 
             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null}); 
             fail(); 
     } 
  

 @Test 
     public void testToPrimitive_boolean_boolean794() { 
         assertEquals(null, ArrayUtils.toPrimitive(null, false)); 
         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); 
         assertTrue(Arrays.equals( 
             new boolean[] {true, false, true}, 
             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},False(Arrays.FALSE, false)) 
             ); 
     } 
  

 @Test 
     public void testToObject_boolean795() { 
         final boolean[] b = null; 
         assertArrayEquals(null, ArrayUtils.toObject(b)); 
         assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); 
         assertTrue(Arrays.equals( 
             new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, 
             ArrayUtils.toObject(new boolean[] {true, false, true})) 
         ); 
     } 
  
     // testToPrimitive/Object for byte 
     //  ----------------------------------------------------------------------- 

 @Test 
     public void testContainsBoolean796() { 
         boolean[] array = null; 
         assertFalse(ArrayUtils.contains(array, true)); 
         array = new boolean[] { true, false, true }; 
         assertTrue(ArrayUtils.contains(array, true)); 
         assertTrue(ArrayUtils.contains(array, false)); 
         array = new boolean[] { true, true }; 
         assertTrue(ArrayUtils.contains(array, true)); 
         assertFalse(ArrayUtils.contains(array, false)); 
     } 
      
     // testToPrimitive/Object for boolean 
     //  ----------------------------------------------------------------------- 

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testIsNotEmptyPrimitive_emptyLongArray797() { 
         final long[] emptyLongArray = new long[] { 1L }; 
         assertFalse(ArrayUtils.isNotEmpty((long[])null)); 
         assertFalse(ArrayUtils.isNotEmpty((long[])null)); 
     } 
  

 @Test 
     public void testIsNotEmptyPrimitives798() { 
         final long[] emptyLongArray = new long[] {}; 
         final long[] notEmptyLongArray = new long[] { 1L }; 
         assertFalse(ArrayUtils.isNotEmpty((long[])null)); 
         assertFalse(ArrayUtils.isNotemptyLongArray)); 
         assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); 
     } 
  

 @Test 
     public void testAddObjectArrayToObjectArray799() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray800() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray801() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray802() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray803() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray804() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test 
     public void testAddObjectArrayToObjectArray805() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray806() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray807() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray808() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray809() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray810() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray811() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray812() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray813() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray814() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray815() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray816() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test 
     public void testAddObjectArrayToObjectArray817() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray818() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray819() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray820() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testAddObjectArrayToObjectArray821() { 
         assertNull(ArrayUtils.addAll(null, (Object[]) null)); 
     } 
  

 @Test 
     public void testAddObjectArrayToObjectArray822() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayToObjectArray823() { 
         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); 
         Object[] newArray; 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         final String[] stringArray2 = new String[]{"1", "2", "3"}; 
         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); 
         assertNotSame(stringArray1, newArray); 
         assertTrue(Arrays.equals(stringArray1, newArray)); 
         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.addAll(null, stringArray2); 
    
 @Test 
     public void testAddObjectArrayObject824() { 
         Object[] newArray; 
  
         //show that not casting is okay 
         newArray = ArrayUtils.add((Object[])null, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
  
         //show that not casting to Object[] is okay and will assume String based on "a" 
         final String[] newStringArray = ArrayUtils.add(null, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newStringArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newStringArray)); 
         assert
 @Test 
     public void testAddObjectArrayObject825() { 
         Object[] newArray; 
  
         //show that not casting is okay 
         newArray = ArrayUtils.add((Object[])null, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
  
         //show that not casting to Object[] is okay and will assume String based on "a" 
         final String[] newStringArray = ArrayUtils.add(null, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newStringArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newStringArray)); 
         assert
 @Test 
     public void testAddObjectArrayChar826() { 
         char[] newArray; 
         newArray = ArrayUtils.add((char[])null, (char)0); 
         assertTrue(Arrays.equals(new char[]{0}, newArray)); 
         assertEquals(Character.TYPE, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add((char[])null, (char)1); 
         assertTrue(Arrays.equals(new char[]{1}, newArray)); 
         assertEquals(Character.TYPE, newArray.getClass().getComponentType()); 
         final char[] array1 = new char[]{1, 2, 3}; 
         newArray = ArrayUtils.add(array1, (char)0); 
         assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray)); 
     
 @Test 
     public void testAddObjectArrayDouble827() { 
         double[] newArray; 
         newArray = ArrayUtils.add((double[])null, 0); 
         assertTrue(Arrays.equals(new double[]{0}, newArray)); 
         assertEquals(Double.TYPE, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add((double[])null, 1); 
         assertTrue(Arrays.equals(new double[]{1}, newArray)); 
         assertEquals(Double.TYPE, newArray.getClass().getComponentType()); 
         final double[] array1 = new double[]{1, 2, 3}; 
         newArray = ArrayUtils.add(array1, 0); 
         assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray)); 
         assertEquals(Double.
 @Test 
     public void testAddObjectArrayFloat828() { 
         float[] newArray; 
         newArray = ArrayUtils.add((float[])null, 0); 
         assertTrue(Arrays.equals(new float[]{0}, newArray)); 
         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add((float[])null, 1); 
         assertTrue(Arrays.equals(new float[]{1}, newArray)); 
         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); 
         final float[] array1 = new float[]{1, 2, 3}; 
         newArray = ArrayUtils.add(array1, 0); 
         assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray)); 
         assertEquals(Float.
 @Test 
     public void testAddObjectArrayShort829() { 
         short[] newArray; 
         newArray = ArrayUtils.add((short[])null, (short)0); 
         assertTrue(Arrays.equals(new short[]{0}, newArray)); 
         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add((short[])null, (short)1); 
         assertTrue(Arrays.equals(new short[]{1}, newArray)); 
         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); 
         final short[] array1 = new short[]{1, 2, 3}; 
         newArray = ArrayUtils.add(array1, (short)0); 
         assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray)); 
     
 @Test 
     public void testAddObjectAtIndex830() { 
         Object[] newArray; 
         newArray = ArrayUtils.add((Object[])null, 0, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         newArray = ArrayUtils.add(stringArray1, 0, null); 
         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add(stringArray1, 1, null); 

 @Test 
     public void testAddObjectAtIndex831() { 
         Object[] newArray; 
         newArray = ArrayUtils.add((Object[])null, 0, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         newArray = ArrayUtils.add(stringArray1, 0, null); 
         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add(stringArray1, 1, null); 

 @Test 
     public void testAddObjectAtIndex832() { 
         Object[] newArray; 
         newArray = ArrayUtils.add((Object[])null, 0, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         newArray = ArrayUtils.add(stringArray1, 0, null); 
         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add(stringArray1, 1, null); 

 @Test 
     public void testAddObjectAtIndex833() { 
         Object[] newArray; 
         newArray = ArrayUtils.add((Object[])null, 0, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         newArray = ArrayUtils.add(stringArray1, 0, null); 
         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add(stringArray1, 1, null); 

 @Test 
     public void testAddObjectAtIndex834() { 
         Object[] newArray; 
         newArray = ArrayUtils.add((Object[])null, 0, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         newArray = ArrayUtils.add(stringArray1, 0, null); 
         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add(stringArray1, 1, null); 

 @Test 
     public void testAddObjectAtIndex835() { 
         Object[] newArray; 
         newArray = ArrayUtils.add((Object[])null, 0, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         newArray = ArrayUtils.add(stringArray1, 0, null); 
         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add(stringArray1, 1, null); 

 @Test 
     public void testAddObjectAtIndex836() { 
         Object[] newArray; 
         newArray = ArrayUtils.add((Object[])null, 0, "a"); 
         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); 
         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         final String[] stringArray1 = new String[]{"a", "b", "c"}; 
         newArray = ArrayUtils.add(stringArray1, 0, null); 
         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); 
         assertEquals(String.class, newArray.getClass().getComponentType()); 
         newArray = ArrayUtils.add(stringArray1, 1, null); 

 @Test 
     public void testRemoveElementObjectArray837() { 
         Object[] array; 
         array = ArrayUtils.removeElement((Object[]) null, "a"); 
         assertNull(array); 
         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new Object[] {"a"}, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new Object[] {"a", "b"}, "a"); 
     
 @Test 
     public void testRemoveElementBooleanArray838() { 
         boolean[] array; 
         array = ArrayUtils.removeElement((boolean[]) null, true); 
         assertNull(array); 
         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new boolean[] {true}, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new boolean[] {true, false}, true); 

 @Test 
     public void testRemoveElementCharArray839() { 
         char[] array; 
         array = ArrayUtils.removeElement((char[]) null, 'a'); 
         assertNull(array); 
         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new char[] {'a'}, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a'); 
    
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementFloatArray840() { 
         float[] array; 
         array = ArrayUtils.removeElement((float[]) null, (float) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new float[] {1}, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     public void testRemoveElementIntArray841() { 
         int[] array; 
         array = ArrayUtils.removeElement((int[]) null, 1); 
         assertNull(array); 
         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new int[] {1}, 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElement(new int[] {1, 2}, 1); 
         assertTrue(Arrays
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveIntArrayOutOfBoundsIndex842() { 
         ArrayUtils.remove(new int[] {1}, 0); 
     } 
  

 @Test 
     public void testRemoveIntArray843() { 
         int[] array; 
         array = ArrayUtils.remove(new int[] {1}, 0); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.remove(new int[] {1, 2}, 0); 
         assertTrue(Arrays.equals(new int[] {2}, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.remove(new int[] {1, 2}, 1); 
         assertTrue(Arrays.equals(new int[] {1}, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.
 @Test 
     public void testRemoveElementsObjectArray844() { 
         Object[] array; 
         array = ArrayUtils.removeElements((Object[]) null, "a"); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a");
 @Test 
     public void testRemoveElementsObjectArray845() { 
         Object[] array; 
         array = ArrayUtils.removeElements((Object[]) null, "a"); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a");
 @Test 
     public void testRemoveElementsObjectArray846() { 
         Object[] array; 
         array = ArrayUtils.removeElements((Object[]) null, "a"); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); 
         assertEquals(Object.class, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a");
 @Test 
     public void testRemoveElementByteArray847() { 
         byte[] array; 
         array = ArrayUtils.removeElements((byte[]) null, (byte) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); 
         assertEquals(Byte.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); 
         assertEquals(Byte.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte)
 @Test 
     public void testRemoveElementByteArray848() { 
         byte[] array; 
         array = ArrayUtils.removeElements((byte[]) null, (byte) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); 
         assertEquals(Byte.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); 
         assertEquals(Byte.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte)
 @Test 
     public void testContainsShort849() { 
         short[] array = null; 
         assertFalse(ArrayUtils.contains(array, (short) 1)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (short) 0)); 
         assertTrue(ArrayUtils.contains(array, (short) 1)); 
         assertTrue(ArrayUtils.contains(array, (short) 2)); 
         assertTrue(ArrayUtils.contains(array, (short) 3)); 
         assertFalse(ArrayUtils.contains(array, (short) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsShort850() { 
         short[] array = null; 
         assertFalse(ArrayUtils.contains(array, (short) 1)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (short) 0)); 
         assertTrue(ArrayUtils.contains(array, (short) 1)); 
         assertTrue(ArrayUtils.contains(array, (short) 2)); 
         assertTrue(ArrayUtils.contains(array, (short) 3)); 
         assertFalse(ArrayUtils.contains(array, (short) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsShort851() { 
         short[] array = null; 
         assertFalse(ArrayUtils.contains(array, (short) 1)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (short) 0)); 
         assertTrue(ArrayUtils.contains(array, (short) 1)); 
         assertTrue(ArrayUtils.contains(array, (short) 2)); 
         assertTrue(ArrayUtils.contains(array, (short) 3)); 
         assertFalse(ArrayUtils.contains(array, (short) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsShort852() { 
         short[] array = null; 
         assertFalse(ArrayUtils.contains(array, (short) 1)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (short) 0)); 
         assertTrue(ArrayUtils.contains(array, (short) 1)); 
         assertTrue(ArrayUtils.contains(array, (short) 2)); 
         assertTrue(ArrayUtils.contains(array, (short) 3)); 
         assertFalse(ArrayUtils.contains(array, (short) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testContainsShort853() { 
         short[] array = null; 
         assertFalse(ArrayUtils.contains(array, (short) 1)); 
         array = new short[] { 0, 1, 2, 3, 0 }; 
         assertTrue(ArrayUtils.contains(array, (short) 0)); 
         assertTrue(ArrayUtils.contains(array, (short) 1)); 
         assertTrue(ArrayUtils.contains(array, (short) 2)); 
         assertTrue(ArrayUtils.contains(array, (short) 3)); 
         assertFalse(ArrayUtils.contains(array, (short) 99)); 
     } 
      
     //----------------------------------------------------------------------- 

 @Test 
     public void testRemoveElementIntArray854() { 
         int[] array; 
         array = ArrayUtils.removeElements((int[]) null, 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new int[] { 1 }, 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); 
         assert
 @Test 
     public void testRemoveElementIntArray855() { 
         int[] array; 
         array = ArrayUtils.removeElements((int[]) null, 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new int[] { 1 }, 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); 
         assertEquals(Integer.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); 
         assert
 @Test 
     public void testRemoveElementCharArray856() { 
         char[] array; 
         array = ArrayUtils.removeElements((char[]) null, 'a'); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); 

 @Test 
     public void testRemoveElementCharArray857() { 
         char[] array; 
         array = ArrayUtils.removeElements((char[]) null, 'a'); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); 

 @Test 
     public void testRemoveElementCharArray858() { 
         char[] array; 
         array = ArrayUtils.removeElements((char[]) null, 'a'); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); 

 @Test 
     public void testRemoveElementCharArray859() { 
         char[] array; 
         array = ArrayUtils.removeElements((char[]) null, 'a'); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); 
         assertEquals(Character.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); 

 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray860() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray861() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray862() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray863() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray864() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray865() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementFloatArray866() { 
         float[] array; 
         array = ArrayUtils.removeElements((float[]) null, (float) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementFloatArray867() { 
         float[] array; 
         array = ArrayUtils.removeElements((float[]) null, (float) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementFloatArray868() { 
         float[] array; 
         array = ArrayUtils.removeElements((float[]) null, (float) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementFloatArray869() { 
         float[] array; 
         array = ArrayUtils.removeElements((float[]) null, (float) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); 
         assertEquals(Float.TYPE, array.getClass().getComponentType()); 
         array
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementDoubleArray870() { 
         double[] array; 
         array = ArrayUtils.removeElements((double[]) null, (double) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementDoubleArray871() { 
         double[] array; 
         array = ArrayUtils.removeElements((double[]) null, (double) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementDoubleArray872() { 
         double[] array; 
         array = ArrayUtils.removeElements((double[]) null, (double) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementDoubleArray873() { 
         double[] array; 
         array = ArrayUtils.removeElements((double[]) null, (double) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); 
         assertEquals(Double.TYPE, array.getClass().getComponentType()); 
         array
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveAllFloatArrayOutOfBoundsIndex874() { 
         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); 
     } 
  

 @Test 
     public void testRemoveElementBooleanArray875() { 
         boolean[] array; 
         array = ArrayUtils.removeElements((boolean[]) null, true); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true }, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true, false }, true);
 @Test 
     public void testRemoveElementBooleanArray876() { 
         boolean[] array; 
         array = ArrayUtils.removeElements((boolean[]) null, true); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true }, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true, false }, true);
 @Test 
     public void testRemoveElementBooleanArray877() { 
         boolean[] array; 
         array = ArrayUtils.removeElements((boolean[]) null, true); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true }, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true, false }, true);
 @Test 
     public void testRemoveElementBooleanArray878() { 
         boolean[] array; 
         array = ArrayUtils.removeElements((boolean[]) null, true); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true }, true); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); 
         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new boolean[] { true, false }, true);
 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveAllFloatArrayOutOfBoundsIndex879() { 
         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveAllFloatArrayOutOfBoundsIndex880() { 
         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveAllFloatArrayOutOfBoundsIndex881() { 
         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); 
     } 
  

 @Test(expected = IndexOutOfBoundsException.class) 
     public void testRemoveAllFloatArrayOutOfBoundsIndex882() { 
         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); 
     } 
  

 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray883() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray884() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 @Test 
     @SuppressWarnings("cast") 
     public void testRemoveElementLongArray885() { 
         long[] array; 
         array = ArrayUtils.removeElements((long[]) null, (long) 1); 
         assertNull(array); 
         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); 
         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); 
         assertEquals(Long.TYPE, array.getClass().getComponentType()); 
         array = ArrayUt
 lang3/exception/ExceptionUtils.java
 @Test 
     public void testGetThrowableList_Throwable_recursiveCause886() { 
         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); 
         assertEquals(3, throwables.size()); 
         assertSame(cyclicCause, throwables.get(0)); 
         assertSame(cyclicCause.getCause(), throwables.get(1)); 
         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetThrowableList_Throwable_recursiveCause887() { 
         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); 
         assertEquals(3, throwables.size()); 
         assertSame(cyclicCause, throwables.get(0)); 
         assertSame(cyclicCause.getCause(), throwables.get(1)); 
         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetThrowableList_Throwable_recursiveCause888() { 
         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); 
         assertEquals(3, throwables.size()); 
         assertSame(cyclicCause, throwables.get(0)); 
         assertSame(cyclicCause.getCause(), throwables.get(1)); 
         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetThrowableList_Throwable_recursiveCause889() { 
         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); 
         assertEquals(3, throwables.size()); 
         assertSame(cyclicCause, throwables.get(0)); 
         assertSame(cyclicCause.getCause(), throwables.get(1)); 
         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetThrowableList_Throwable_recursiveCause890() { 
         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); 
         assertEquals(3, throwables.size()); 
         assertSame(cyclicCause, throwables.get(0)); 
         assertSame(cyclicCause.getCause(), throwables.get(1)); 
         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetThrowableList_Throwable_recursiveCause891() { 
         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); 
         assertEquals(3, throwables.size()); 
         assertSame(cyclicCause, throwables.get(0)); 
         assertSame(cyclicCause.getCause(), throwables.get(1)); 
         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testIndexOfType_ThrowableClassInt892() { 
         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); 
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); 
         assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(nested
 @Test 
     public void testIndexOf_ThrowableClassInt893() { 
         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); 
         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); 
         assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); 
         assertEquals(-1, ExceptionUtils.
 @Test 
     public void testIndexOfType_ThrowableClassInt894() { 
         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); 
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); 
         assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(nested
 @Test 
     public void testIndexOfType_ThrowableClassInt895() { 
         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); 
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); 
         assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); 
          
         assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); 
         assertEquals(-1, ExceptionUtils.indexOfType(nested
 @Test(expected=IllegalArgumentException.class) 
     public void testRemoveCommonFrames_ListList896() throws Exception { 
         ExceptionUtils.removeCommonFrames(null, null); 
     } 
  

 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter897() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter898() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test(expected=IllegalArgumentException.class) 
     public void testRemoveCommonFrames_ListList899() throws Exception { 
         ExceptionUtils.removeCommonFrames(null, null); 
     } 
  

 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter900() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test(expected=IllegalArgumentException.class) 
     public void testRemoveCommonFrames_ListList901() throws Exception { 
         ExceptionUtils.removeCommonFrames(null, null); 
     } 
  

 @Test(expected=IllegalArgumentException.class) 
     public void testRemoveCommonFrames_ListList902() throws Exception { 
         ExceptionUtils.removeCommonFrames(null, null); 
     } 
  

 @Test(expected=IllegalArgumentException.class) 
     public void testRemoveCommonFrames_ListList903() throws Exception { 
         ExceptionUtils.removeCommonFrames(null, null); 
     } 
  

 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter904() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter905() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter906() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter907() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test 
     public void testPrintRootCauseStackTrace_ThrowableWriter908() throws Exception { 
         StringWriter writer = new StringWriter(1024); 
         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); 
         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); 
         assertEquals(0, writer.getBuffer().length()); 
          
         writer = new StringWriter(1024); 
         try { 
             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
         } 
          
         writer = new StringWriter(1024); 
         final Throw
 @Test 
     public void test_getRootCauseMessage_Throwable909() { 
         Throwable th = null; 
         assertEquals("", ExceptionUtils.getRootCauseMessage(th)); 
          
         th = new IllegalArgumentException("Base"); 
         assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); 
          
         th = new ExceptionWithCause("Wrapper", th); 
         assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); 
     } 
  
     //----------------------------------------------------------------------- 
     /** 
      * Provides a method with a well known chained/nested exception 
      * name which matches the full signature (e.g. has a return value 
      * of <code>Throwable</code>. 
     
 lang3/reflect/MemberUtils.java
 @Test 
     public void testGetAccessibleMethodPrivateInterface910() throws Exception { 
         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); 
         assertNotNull(expected); 
         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); 
         assertNull(actual); 
     } 
  

 @Test 
     public void testInvokeConstructor911() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeConstructor912() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeConstructor913() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeConstructor914() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeConstructor915() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 @Test 
     public void testInvokeConstructor916() throws Exception { 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, 
                 (Object[]) null).toString()); 
         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); 
         assertEquals("(String)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, "").toString()); 
         assertEquals("(Object)", ConstructorUtils.invokeConstructor( 
                 TestBean.class, new Object()).toString()); 
     
 lang3/text/translate/JavaUnicodeEscaper.java
 @Test 
     public void testEscapeSurrogatePairsLang858917() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

 lang3/text/StrSubstitutor.java
 @Test 
     public void testSubstituteDefaultProperties918(){ 
         final String org = "${doesnotwork}"; 
         System.setProperty("doesnotwork", "It works!"); 
  
         // create a new Properties object with the System.getProperties as default 
         final Properties props = new Properties(System.getProperties()); 
  
         assertEquals("It works!", StrSubstitutor.replace(org, props)); 
     } 
      

 @Test 
     public void testSubstituteDefaultProperties919(){ 
         final String org = "${doesnotwork}"; 
         System.setProperty("doesnotwork", "It works!"); 
  
         // create a new Properties object with the System.getProperties as default 
         final Properties props = new Properties(System.getProperties()); 
  
         assertEquals("It works!", StrSubstitutor.replace(org, props)); 
     } 
      

 @Test 
     public void testReplaceNull920() { 
         doTestNoReplace(null); 
     } 
  
     /** 
      * Tests replace with null. 
      */ 

 @Test 
     public void testReplaceSimple921() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testReplaceSimple922() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testReplaceSimple923() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testReplaceSimple924() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testReplaceSimple925() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testReplaceSimple926() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testReplaceNull927() { 
         doTestNoReplace(null); 
     } 
  
     /** 
      * Tests replace with null. 
      */ 

 @Test 
     public void testStaticReplace928() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testReplaceNull929() { 
         doTestNoReplace(null); 
     } 
  
     /** 
      * Tests replace with null. 
      */ 

 @Test 
     public void testReplaceSimple930() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testReplaceSimple931() { 
         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); 
     } 
  
     /** 
      * Tests simple key replace. 
      */ 

 @Test 
     public void testStaticReplace932() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace933() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace934() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace935() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace936() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace937() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace938() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace939() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace940() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace941() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace942() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace943() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace944() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace945() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace946() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace947() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace948() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testGetSetSuffix949() { 
         final StrSubstitutor sub = new StrSubstitutor(); 
         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); 
         sub.setVariableSuffix('<'); 
         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); 
  
         sub.setVariableSuffix("<<"); 
         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); 
         try { 
             sub.setVariableSuffix((String) null); 
             fail(); 
         } catch (final IllegalArgumentException ex) { 
             // expected 
         } 
 
 @Test 
     public void testStaticReplace950() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 @Test 
     public void testStaticReplace951() { 
         final Map<String, String> map = new HashMap<String, String>(); 
         map.put("name", "commons"); 
         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); 
     } 
  
     /** 
      * Tests static. 
      */ 

 lang3/builder/CompareToBuilder.java
 @Test 
     public void testReflectionCompare952() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(4); 
         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); 
         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); 
         o2.setA(5); 
         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); 
         assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); 
     } 
  

 @Test 
     public void testReflectionCompare953() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(4); 
         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); 
         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); 
         o2.setA(5); 
         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); 
         assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); 
     } 
  

 @Test 
     public void testAppendSuper954() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); 
         assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); 
          
         assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); 
         assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); 
          
         assertTrue(new CompareToBuilder().appendSuper(1).append(o
 @Test 
     public void testRaggedArray955() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testObjectBuild956() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(4); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); 
         o2.setA(5); 
         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); 
         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); 
          
         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).
 @Test 
     public void testObjectBuild957() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(4); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); 
         o2.setA(5); 
         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); 
         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); 
          
         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).
 @Test 
     public void testMultiCharArray958() { 
         final char[][] array1 = new char[2][2]; 
         final char[][] array2 = new char[2][2]; 
         final char[][] array3 = new char[2][3]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = (char)((i + 1) * (j + 1)); 
                 array2[i][j] = (char)((i + 1) * (j + 1)); 
                 array3[i][j] = (char)((i + 1) * (j + 1)); 
             } 
         }
 @Test 
     public void testMultiCharArray959() { 
         final char[][] array1 = new char[2][2]; 
         final char[][] array2 = new char[2][2]; 
         final char[][] array3 = new char[2][3]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = (char)((i + 1) * (j + 1)); 
                 array2[i][j] = (char)((i + 1) * (j + 1)); 
                 array3[i][j] = (char)((i + 1) * (j + 1)); 
             } 
         }
 @Test 
     public void testMultiCharArray960() { 
         final char[][] array1 = new char[2][2]; 
         final char[][] array2 = new char[2][2]; 
         final char[][] array3 = new char[2][3]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = (char)((i + 1) * (j + 1)); 
                 array2[i][j] = (char)((i + 1) * (j + 1)); 
                 array3[i][j] = (char)((i + 1) * (j + 1)); 
             } 
         }
 @Test 
     public void testObjectArrayHiddenByObject961() { 
         final TestObject[] array1 = new TestObject[2]; 
         array1[0] = new TestObject(4); 
         array1[1] = new TestObject(5); 
         final TestObject[] array2 = new TestObject[2]; 
         array2[0] = new TestObject(4); 
         array2[1] = new TestObject(5); 
         final TestObject[] array3 = new TestObject[3]; 
         array3[0] = new TestObject(4); 
         array3[1] = new TestObject(5); 
         array3[2] = new TestObject(6); 
          
         final Object obj1 = array1; 
         final Object obj2 = array2; 

 @Test 
     public void testObjectBuild962() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(4); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); 
         o2.setA(5); 
         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); 
         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); 
          
         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); 
         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).
 @Test 
     public void testRaggedArray963() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testRaggedArray964() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testIntArrayHiddenByObject965() { 
         final int[] array1 = new int[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final int[] array2 = new int[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final int[] array3 = new int[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testByteArrayHiddenByObject966() { 
         final byte[] array1 = new byte[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final byte[] array2 = new byte[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final byte[] array3 = new byte[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testByteArrayHiddenByObject967() { 
         final byte[] array1 = new byte[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final byte[] array2 = new byte[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final byte[] array3 = new byte[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testBooleanArrayHiddenByObject968() { 
         final boolean[] array1 = new boolean[2]; 
         array1[0] = true; 
         array1[1] = false; 
         final boolean[] array2 = new boolean[2]; 
         array2[0] = true; 
         array2[1] = false; 
         final boolean[] array3 = new boolean[3]; 
         array3[0] = true; 
         array3[1] = false; 
         array3[2] = true; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toCompar
 @Test 
     public void testBooleanArrayHiddenByObject969() { 
         final boolean[] array1 = new boolean[2]; 
         array1[0] = true; 
         array1[1] = false; 
         final boolean[] array2 = new boolean[2]; 
         array2[0] = true; 
         array2[1] = false; 
         final boolean[] array3 = new boolean[3]; 
         array3[0] = true; 
         array3[1] = false; 
         array3[2] = true; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toCompar
 @Test 
     public void testBooleanArrayHiddenByObject970() { 
         final boolean[] array1 = new boolean[2]; 
         array1[0] = true; 
         array1[1] = false; 
         final boolean[] array2 = new boolean[2]; 
         array2[0] = true; 
         array2[1] = false; 
         final boolean[] array3 = new boolean[3]; 
         array3[0] = true; 
         array3[1] = false; 
         array3[2] = true; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toCompar
 @Test 
     public void testRaggedArray971() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testRaggedArray972() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testRaggedArray973() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testRaggedArray974() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testLongArray975() { 
         final long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         final long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         final long[] obj3 = new long[3]; 
         obj3[0] = 5L; 
         obj3[1] = 6L; 
         obj3[2] = 7L; 
          
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 

 @Test 
     public void testRaggedArray976() { 
         final long array1[][] = new long[2][]; 
         final long array2[][] = new long[2][]; 
         final long array3[][] = new long[3][]; 
         for (int i = 0; i < array1.length; ++i) { 
             array1[i] = new long[2]; 
             array2[i] = new long[2]; 
             array3[i] = new long[3]; 
             for (int j = 0; j < array1[i].length; ++j) { 
                 array1[i][j] = (i + 1) * (j + 1); 
                 array2[i][j] = (i + 1) * (j + 1
 @Test 
     public void testIntArray977() { 
         final int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         final int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         final int[] obj3 = new int[3]; 
         obj3[0] = 5; 
         obj3[1] = 6; 
         obj3[2] = 7; 
  
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 
         assertTrue(new CompareToBuilder
 @Test 
     public void testIntArrayHiddenByObject978() { 
         final int[] array1 = new int[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final int[] array2 = new int[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final int[] array3 = new int[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testIntArray979() { 
         final int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         final int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         final int[] obj3 = new int[3]; 
         obj3[0] = 5; 
         obj3[1] = 6; 
         obj3[2] = 7; 
  
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 
         assertTrue(new CompareToBuilder
 @Test 
     public void testIntArrayHiddenByObject980() { 
         final int[] array1 = new int[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final int[] array2 = new int[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final int[] array3 = new int[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testShortArray981() { 
         final short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         final short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         final short[] obj3 = new short[3]; 
         obj3[0] = 5; 
         obj3[1] = 6; 
         obj3[2] = 7; 
  
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 
         assertTrue(new CompareToBuilder
 @Test 
     public void testShortArray982() { 
         final short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         final short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         final short[] obj3 = new short[3]; 
         obj3[0] = 5; 
         obj3[1] = 6; 
         obj3[2] = 7; 
  
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 
         assertTrue(new CompareToBuilder
 @Test 
     public void testMultiCharArray983() { 
         final char[][] array1 = new char[2][2]; 
         final char[][] array2 = new char[2][2]; 
         final char[][] array3 = new char[2][3]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = (char)((i + 1) * (j + 1)); 
                 array2[i][j] = (char)((i + 1) * (j + 1)); 
                 array3[i][j] = (char)((i + 1) * (j + 1)); 
             } 
         }
 @Test 
     public void testMultiCharArray984() { 
         final char[][] array1 = new char[2][2]; 
         final char[][] array2 = new char[2][2]; 
         final char[][] array3 = new char[2][3]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = (char)((i + 1) * (j + 1)); 
                 array2[i][j] = (char)((i + 1) * (j + 1)); 
                 array3[i][j] = (char)((i + 1) * (j + 1)); 
             } 
         }
 @Test 
     public void testMultiCharArray985() { 
         final char[][] array1 = new char[2][2]; 
         final char[][] array2 = new char[2][2]; 
         final char[][] array3 = new char[2][3]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = (char)((i + 1) * (j + 1)); 
                 array2[i][j] = (char)((i + 1) * (j + 1)); 
                 array3[i][j] = (char)((i + 1) * (j + 1)); 
             } 
         }
 @Test 
     public void testByteArrayHiddenByObject986() { 
         final byte[] array1 = new byte[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final byte[] array2 = new byte[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final byte[] array3 = new byte[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testByteArrayHiddenByObject987() { 
         final byte[] array1 = new byte[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final byte[] array2 = new byte[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final byte[] array3 = new byte[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testByteArrayHiddenByObject988() { 
         final byte[] array1 = new byte[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final byte[] array2 = new byte[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final byte[] array3 = new byte[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testByteArrayHiddenByObject989() { 
         final byte[] array1 = new byte[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final byte[] array2 = new byte[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final byte[] array3 = new byte[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testDoubleArrayHiddenByObject990() { 
         final double[] array1 = new double[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final double[] array2 = new double[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final double[] array3 = new double[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testDoubleArray991() { 
         final double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         final double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         final double[] obj3 = new double[3]; 
         obj3[0] = 5; 
         obj3[1] = 6; 
         obj3[2] = 7; 
  
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 
         assertTrue(new CompareToBuilder
 @Test 
     public void testDoubleArrayHiddenByObject992() { 
         final double[] array1 = new double[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final double[] array2 = new double[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final double[] array3 = new double[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testDoubleArrayHiddenByObject993() { 
         final double[] array1 = new double[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final double[] array2 = new double[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final double[] array3 = new double[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testDoubleArrayHiddenByObject994() { 
         final double[] array1 = new double[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final double[] array2 = new double[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final double[] array3 = new double[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testFloatArray995() { 
         final float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         final float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         final float[] obj3 = new float[3]; 
         obj3[0] = 5; 
         obj3[1] = 6; 
         obj3[2] = 7; 
  
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 
         assertTrue(new CompareToBuilder
 @Test 
     public void testFloatArrayHiddenByObject996() { 
         final float[] array1 = new float[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final float[] array2 = new float[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final float[] array3 = new float[3]; 
         array3[0] = 5; 
         array3[1] = 6; 
         array3[2] = 7; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison
 @Test 
     public void testBooleanArray997() { 
         final boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         final boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         final boolean[] obj3 = new boolean[3]; 
         obj3[0] = true; 
         obj3[1] = false; 
         obj3[2] = true; 
  
         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); 
         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); 
         assertTrue(new CompareTo
 @Test 
     public void testBooleanArrayHiddenByObject998() { 
         final boolean[] array1 = new boolean[2]; 
         array1[0] = true; 
         array1[1] = false; 
         final boolean[] array2 = new boolean[2]; 
         array2[0] = true; 
         array2[1] = false; 
         final boolean[] array3 = new boolean[3]; 
         array3[0] = true; 
         array3[1] = false; 
         array3[2] = true; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         final Object obj3 = array3; 
         assertTrue(new CompareToBuilder().append(obj1, obj1).toCompar
 lang3/SerializationUtils.java
 @Test 
     public void testClone999() throws Exception { 
         final Object test = SerializationUtils.clone(iMap); 
         assertNotNull(test); 
         assertTrue(test instanceof HashMap<?,?>); 
         assertTrue(test != iMap); 
         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; 
         assertEquals(iString, testMap.get("FOO")); 
         assertTrue(iString != testMap.get("FOO")); 
         assertEquals(iInteger, testMap.get("BAR")); 
         assertTrue(iInteger != testMap.get("BAR")); 
         assertEquals(iMap, testMap); 
     } 
  

 @Test 
     public void testClone1000() throws Exception { 
         final Object test = SerializationUtils.clone(iMap); 
         assertNotNull(test); 
         assertTrue(test instanceof HashMap<?,?>); 
         assertTrue(test != iMap); 
         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; 
         assertEquals(iString, testMap.get("FOO")); 
         assertTrue(iString != testMap.get("FOO")); 
         assertEquals(iInteger, testMap.get("BAR")); 
         assertTrue(iInteger != testMap.get("BAR")); 
         assertEquals(iMap, testMap); 
     } 
  

 @Test 
     public void testSerializeStreamUnserializable1001() throws Exception { 
         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); 
         try { 
             iMap.put(new Object(), new Object()); 
             SerializationUtils.serialize(iMap, streamTest); 
         } catch (final SerializationException ex) { 
             return; 
         } 
         fail(); 
     } 
  

 @Test 
     public void testSerializeStreamUnserializable1002() throws Exception { 
         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); 
         try { 
             iMap.put(new Object(), new Object()); 
             SerializationUtils.serialize(iMap, streamTest); 
         } catch (final SerializationException ex) { 
             return; 
         } 
         fail(); 
     } 
  

 @Test 
     public void testSerializeStreamUnserializable1003() throws Exception { 
         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); 
         try { 
             iMap.put(new Object(), new Object()); 
             SerializationUtils.serialize(iMap, streamTest); 
         } catch (final SerializationException ex) { 
             return; 
         } 
         fail(); 
     } 
  

 @Test 
     public void testDeserializeStreamBadStream1004() throws Exception { 
         try { 
             SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0])); 
         } catch (final SerializationException ex) { 
             return; 
         } 
         fail(); 
     } 
  

 @Test 
     public void testClone1005() throws Exception { 
         final Object test = SerializationUtils.clone(iMap); 
         assertNotNull(test); 
         assertTrue(test instanceof HashMap<?,?>); 
         assertTrue(test != iMap); 
         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; 
         assertEquals(iString, testMap.get("FOO")); 
         assertTrue(iString != testMap.get("FOO")); 
         assertEquals(iInteger, testMap.get("BAR")); 
         assertTrue(iInteger != testMap.get("BAR")); 
         assertEquals(iMap, testMap); 
     } 
  

 lang3/time/DateFormatUtils.java
 @Test 
     public void testFormatUTC1006() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_TIME_FORMAT.getPattern())); 
     } 
  

 @Test 
     public void testTimeZoneMatches1007() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1008() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testFormat1009() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assert
 @Test 
     public void testTimeZoneMatches1010() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeISO1011(){ 
         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); 
         final Calendar cal = Calendar.getInstance(timeZone); 
         cal.set(2002,1,23,10,11,12); 
         String text = DateFormatUtils.format(cal.getTime(),  
                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); 
         assertEquals("T10:11:12", text); 
         text = DateFormatUtils.format(cal.getTime().getTime(),  
                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); 
         assertEquals("T10:11:12", text); 
         text = DateFormatUtils.ISO_TIME_
 lang3/text/translate/CodePointTranslator.java
 @Test 
     public void testAbove1012() { 
         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); 
  
         final String input = "ADFGZ"; 
         final String result = nee.translate(input); 
         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); 
     } 
  
     // See LANG-617 

 @Test 
     public void testAbove1013() { 
         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); 
  
         final String input = "ADFGZ"; 
         final String result = nee.translate(input); 
         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); 
     } 
  
     // See LANG-617 

 @Test 
     public void testAbove1014() { 
         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); 
  
         final String input = "ADFGZ"; 
         final String result = nee.translate(input); 
         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); 
     } 
  
     // See LANG-617 

 @Test 
     public void testAbove1015() { 
         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); 
  
         final String input = "ADFGZ"; 
         final String result = nee.translate(input); 
         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); 
     } 
  
     // See LANG-617 

 @Test 
     public void testAbove1016() { 
         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); 
  
         final String input = "ADFGZ"; 
         final String result = nee.translate(input); 
         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); 
     } 
  
     // See LANG-617 

 lang3/concurrent/ConcurrentRuntimeException.java
 lang3/time/DateUtils.java
 @Test 
     public void testIsSameDay_Date1017() { 
         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); 
         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); 
         assertTrue(DateUtils.isSameDay(date1, date2)); 
         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); 
         assertFalse(DateUtils.isSameDay(date1, date2)); 
         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); 
         assertTrue(DateUtils.isSameDay(date1, date2)); 
         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); 
         assertFalse(DateUtils.isSameDay(date1, date2)); 
        
 @Test(expected = IllegalArgumentException.class) 
     public void testIsSameInstant_Date1018() { 
         DateUtils.isSameInstant(date1, date2)); 
     } 
      

 @Test 
     public void testIsSameInstant_Date1019() { 
         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); 
         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); 
         assertTrue(DateUtils.isSameInstant(date1, date2)); 
         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); 
         assertFalse(DateUtils.isSameInstant(date1, date2)); 
         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); 
         assertTrue(DateUtils.isSameInstant(date1, date2)); 
         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); 
         assertFalse(DateUtils.isSameInstant(date1, date2)); 
        
 @Test 
     public void testIsSameLocalTime_Cal1020() { 
         final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); 
         final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); 
         cal1.set(2004, 6, 9, 13, 45, 0); 
         cal1.set(Calendar.MILLISECOND, 0); 
         cal2.set(2004, 6, 9, 13, 45, 0); 
         cal2.set(Calendar.MILLISECOND, 0); 
         assertTrue(DateUtils.isSameLocalTime(cal1, cal2)); 
  
         final Calendar cal3 = Calendar.getInstance(); 
         final Calendar cal4 = Calendar.getInstance(); 
         cal3.set(2004, 6, 9, 4,  0, 0);
 @Test 
     public void testIsSameLocalTime_Cal1021() { 
         final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); 
         final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); 
         cal1.set(2004, 6, 9, 13, 45, 0); 
         cal1.set(Calendar.MILLISECOND, 0); 
         cal2.set(2004, 6, 9, 13, 45, 0); 
         cal2.set(Calendar.MILLISECOND, 0); 
         assertTrue(DateUtils.isSameLocalTime(cal1, cal2)); 
  
         final Calendar cal3 = Calendar.getInstance(); 
         final Calendar cal4 = Calendar.getInstance(); 
         cal3.set(2004, 6, 9, 4,  0, 0);
 @Test(expected=ParseException.class) 
     public void testLANG799_DE_FAIL1022() throws ParseException { 
         final Locale dflt = Locale.getDefault(); 
         Locale.setDefault(Locale.GERMAN); 
         try { 
             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); 
         } finally { 
             Locale.setDefault(dflt);             
         } 
     } 
      
     // Parse German date with English Locale, specifying German Locale override 

 @Test(expected=ParseException.class) 
     public void testLANG799_DE_FAIL1023() throws ParseException { 
         final Locale dflt = Locale.getDefault(); 
         Locale.setDefault(Locale.GERMAN); 
         try { 
             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); 
         } finally { 
             Locale.setDefault(dflt);             
         } 
     } 
      
     // Parse German date with English Locale, specifying German Locale override 

 @Test(expected=ParseException.class) 
     public void testLANG799_DE_FAIL1024() throws ParseException { 
         final Locale dflt = Locale.getDefault(); 
         Locale.setDefault(Locale.GERMAN); 
         try { 
             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); 
         } finally { 
             Locale.setDefault(dflt);             
         } 
     } 
      
     // Parse German date with English Locale, specifying German Locale override 

 @Test(expected=ParseException.class) 
     public void testLANG799_DE_FAIL1025() throws ParseException { 
         final Locale dflt = Locale.getDefault(); 
         Locale.setDefault(Locale.GERMAN); 
         try { 
             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); 
         } finally { 
             Locale.setDefault(dflt);             
         } 
     } 
      
     // Parse German date with English Locale, specifying German Locale override 

 @Test(expected=ParseException.class) 
     public void testLANG799_DE_FAIL1026() throws ParseException { 
         final Locale dflt = Locale.getDefault(); 
         Locale.setDefault(Locale.GERMAN); 
         try { 
             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); 
         } finally { 
             Locale.setDefault(dflt);             
         } 
     } 
      
     // Parse German date with English Locale, specifying German Locale override 

 @Test 
     public void testAddWeeks1027() throws Exception { 
         final Date base = new Date(MILLIS_TEST); 
         Date result = DateUtils.addWeeks(base, 0); 
         assertNotSame(base, result); 
         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); 
         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); 
          
         result = DateUtils.addWeeks(base, 1); 
         assertNotSame(base, result); 
         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); 
         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); 
          
         result = DateUtils.addWeeks(base, -1); 

 @Test 
     public void testTruncateMinute1028() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testAddWeeks1029() throws Exception { 
         final Date base = new Date(MILLIS_TEST); 
         Date result = DateUtils.addWeeks(base, 0); 
         assertNotSame(base, result); 
         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); 
         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); 
          
         result = DateUtils.addWeeks(base, 1); 
         assertNotSame(base, result); 
         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); 
         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); 
          
         result = DateUtils.addWeeks(base, -1); 

 @Test 
     public void testTruncateMinute1030() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1031() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testRoundMonth1032() throws Exception { 
         final int calendarField = Calendar.MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
          
         //month with 28 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); 
         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); 
         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
  
         //month with 29 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); 
     
 @Test 
     public void testRoundMonth1033() throws Exception { 
         final int calendarField = Calendar.MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
          
         //month with 28 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); 
         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); 
         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
  
         //month with 29 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); 
     
 @Test 
     public void testRoundMonth1034() throws Exception { 
         final int calendarField = Calendar.MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
          
         //month with 28 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); 
         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); 
         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
  
         //month with 29 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); 
     
 @Test 
     public void testRoundMonth1035() throws Exception { 
         final int calendarField = Calendar.MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
          
         //month with 28 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); 
         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); 
         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
  
         //month with 29 days 
         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); 
     
 @Test 
     public void testTruncateMinute1036() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1037() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1038() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1039() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1040() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1041() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1042() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1043() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1044() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1045() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1046() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1047() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1048() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1049() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1050() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateMinute1051() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testWeekIterator1052() throws Exception { 
         final Calendar now = Calendar.getInstance(); 
         for (int i = 0; i< 7; i++) { 
             final Calendar today = DateUtils.truncate(now, Calendar.DATE); 
             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); 
             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); 
             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); 
             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { 
                 //This is sunday... roll back 6 days 
                 monday.add(Calendar.DATE, -6); [E
 @Test 
     public void testWeekIterator1053() throws Exception { 
         final Calendar now = Calendar.getInstance(); 
         for (int i = 0; i< 7; i++) { 
             final Calendar today = DateUtils.truncate(now, Calendar.DATE); 
             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); 
             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); 
             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); 
             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { 
                 //This is sunday... roll back 6 days 
                 monday.add(Calendar.DATE, -6); [E
 @Test 
     public void testWeekIterator1054() throws Exception { 
         final Calendar now = Calendar.getInstance(); 
         for (int i = 0; i< 7; i++) { 
             final Calendar today = DateUtils.truncate(now, Calendar.DATE); 
             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); 
             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); 
             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); 
             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { 
                 //This is sunday... roll back 6 days 
                 monday.add(Calendar.DATE, -6); [E
 @Test 
     public void testWeekIterator1055() throws Exception { 
         final Calendar now = Calendar.getInstance(); 
         for (int i = 0; i< 7; i++) { 
             final Calendar today = DateUtils.truncate(now, Calendar.DATE); 
             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); 
             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); 
             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); 
             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { 
                 //This is sunday... roll back 6 days 
                 monday.add(Calendar.DATE, -6); [E
 @Test 
     public void testWeekIterator1056() throws Exception { 
         final Calendar now = Calendar.getInstance(); 
         for (int i = 0; i< 7; i++) { 
             final Calendar today = DateUtils.truncate(now, Calendar.DATE); 
             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); 
             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); 
             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); 
             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { 
                 //This is sunday... roll back 6 days 
                 monday.add(Calendar.DATE, -6); [E
 @Test 
     public void testMonthIterator1057() throws Exception { 
         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 27, 2002"), 
                 dateParser.parse("March 2, 2002")); 
  
         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 28, 2002"), 
                 dateParser.parse("March 3, 2002")); 
  
         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it,
 @Test 
     public void testWeekIterator1058() throws Exception { 
         final Calendar now = Calendar.getInstance(); 
         for (int i = 0; i< 7; i++) { 
             final Calendar today = DateUtils.truncate(now, Calendar.DATE); 
             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); 
             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); 
             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); 
             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { 
                 //This is sunday... roll back 6 days 
                 monday.add(Calendar.DATE, -6); [E
 @Test 
     public void testMonthIterator1059() throws Exception { 
         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 27, 2002"), 
                 dateParser.parse("March 2, 2002")); 
  
         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 28, 2002"), 
                 dateParser.parse("March 3, 2002")); 
  
         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it,
 @Test 
     public void testTruncateMinute1060() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testMonthIterator1061() throws Exception { 
         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 27, 2002"), 
                 dateParser.parse("March 2, 2002")); 
  
         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 28, 2002"), 
                 dateParser.parse("March 3, 2002")); 
  
         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it,
 @Test 
     public void testIteratorEx1062() throws Exception { 
         try { 
             DateUtils.iterator(Calendar.getInstance(), -9999); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             DateUtils.iterator((Object) null, DateUtils.
 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1063() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMinutesOfHourWithCalendar1064() { 
         final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.HOUR_OF_DAY); 
         assertEquals(minutes, testResult); 
     } 
  
     //Calendar.DATE and Calendar.DAY_OF_YEAR as useful fragment 

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1065() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMinutesOfDayWithCalendar1066() { 
         long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DATE); 
         final long expectedValue = minutes + ((hours * DateUtils.MILLIS_PER_HOUR))/ DateUtils.MILLIS_PER_MINUTE;  
         assertEquals(expectedValue, testResult); 
         testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.DAY_OF_YEAR); 
         assertEquals(expectedValue, testResult); 
     } 
      

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1067() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1068() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1069() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMillisecondsOfSecondWithDate1070() { 
         final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND); 
         assertEquals(millis, testResult); 
     } 
  

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1071() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1072() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1073() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMillisecondsOfSecondWithDate1074() { 
         final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND); 
         assertEquals(millis, testResult); 
     } 
  

 @Test 
     public void testMinuteFragmentInLargerUnitWithDate1075() { 
         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); 
         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); 
     } 
  

 @Test 
     public void testMonthIterator1076() throws Exception { 
         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 27, 2002"), 
                 dateParser.parse("March 2, 2002")); 
  
         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); 
         assertWeekIterator(it, 
                 dateParser.parse("January 28, 2002"), 
                 dateParser.parse("March 3, 2002")); 
  
         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); 
         assertWeekIterator(it,
 @Test 
     public void testTruncateMinute1077() throws Exception { 
         final int calendarField = Calendar.MINUTE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); 
         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.SECOND 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testIteration1078() { 
         final StrTokenizer tkn = new StrTokenizer("a b c"); 
         assertFalse(tkn.hasPrevious()); 
         try { 
             tkn.previous(); 
             fail(); 
         } catch (final NoSuchElementException ex) {} 
         assertTrue(tkn.hasNext()); 
          
         assertEquals("a", tkn.next()); 
         try { 
             tkn.remove(); 
             fail(); 
         } catch (final UnsupportedOperationException ex) {} 
         try { 
             tkn.set("x"); 
   
 lang3/time/DurationFormatUtils.java
 @Test 
     public void testFormatDurationISO1079() { 
         assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); 
         assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); 
         assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); 
         assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); 
         assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); 
     } 
  

 @Test 
     public void testFormatDurationISO1080() { 
         assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); 
         assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); 
         assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); 
         assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); 
         assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); 
     } 
  

 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
 @Test 
     public void testBugzilla384011081() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011082() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011083() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011084() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011085() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011086() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011087() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011088() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011089() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011090() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011091() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011092() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011093() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011094() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011095() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011096() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011097() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011098() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011099() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011100() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011101() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011102() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011103() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011104() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011105() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testBugzilla384011106() { 
         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  
                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); 
     } 
  
     // https://issues.apache.org/jira/browse/LANG-281 

 @Test 
     public void testLexx1107() { 
         // tests each constant 
         assertArrayEquals(new DurationFormatUtils.Token[]{ 
             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); 
  
    
 @Test 
     public void testLexx1108() { 
         // tests each constant 
         assertArrayEquals(new DurationFormatUtils.Token[]{ 
             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); 
  
    
 @Test 
     public void testLexx1109() { 
         // tests each constant 
         assertArrayEquals(new DurationFormatUtils.Token[]{ 
             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); 
  
    
 @Test 
     public void testLexx1110() { 
         // tests each constant 
         assertArrayEquals(new DurationFormatUtils.Token[]{ 
             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), 
             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); 
  
    
 lang3/text/WordUtils.java
 @Test 
     public void testWrap_StringIntStringBoolean1111() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1112() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1113() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1114() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1115() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1116() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1117() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1118() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testWrap_StringIntStringBoolean1119() { 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); 
         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, true)); 
         assertEquals(null, WordUtils.wrap(null, 20, null, false)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, true)); 
         assertEquals(null, WordUtils.wrap(null, -1, null, false)); 
          
         assertEquals("", WordUtils.wrap("", 20, "\n", false)); 
         assertEquals("", WordUtils.wrap("", 20, "\n", true)); 
         assertEquals("", WordUtils.wrap("", 20,
 @Test 
     public void testCapitalizeFully_String1120() { 
         assertEquals(null, WordUtils.capitalizeFully(null)); 
         assertEquals("", WordUtils.capitalizeFully("")); 
         assertEquals("  ", WordUtils.capitalizeFully("  ")); 
          
         assertEquals("I", WordUtils.capitalizeFully("I") ); 
         assertEquals("I", WordUtils.capitalizeFully("i") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I
 @Test 
     public void testCapitalizeWithDelimiters_String1121() { 
         assertEquals(null, WordUtils.capitalize(null)); 
         assertEquals("", WordUtils.capitalize("")); 
         assertEquals("  ", WordUtils.capitalize("  ")); 
          
         assertEquals("I", WordUtils.capitalize("I") ); 
         assertEquals("I", WordUtils.capitalize("i") ); 
         assertEquals("I AM HERE 123", WordUtils.capitalize("i am here 123") ); 
     } 
  

 @Test 
     public void testCapitalizeFully_String1122() { 
         assertEquals(null, WordUtils.capitalizeFully(null)); 
         assertEquals("", WordUtils.capitalizeFully("")); 
         assertEquals("  ", WordUtils.capitalizeFully("  ")); 
          
         assertEquals("I", WordUtils.capitalizeFully("I") ); 
         assertEquals("I", WordUtils.capitalizeFully("i") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") ); 
         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I
 @Test 
     public void testUncapitalize_String1123() { 
         assertEquals(null, WordUtils.uncapitalize(null)); 
         assertEquals("", WordUtils.uncapitalize("")); 
         assertEquals("  ", WordUtils.uncapitalize("  ")); 
          
         assertEquals("i", WordUtils.uncapitalize("I") ); 
         assertEquals("I", WordUtils.uncapitalize("i") ); 
         assertEquals("I AM HERE 123", WordUtils.uncapitalize("i am here 123") ); 
         assertEquals("i aM hERE 123", WordUtils.uncapitalize("I Am Here 123") ); 
         assertEquals("I AM here 123", WordUtils.uncapitalize("i am HERE 123") ); 
     } 
  

 @Test 
     public void testUncapitalizeWithDelimiters_String1124() { 
         assertEquals(null, WordUtils.uncapitalize(null, null)); 
         assertEquals("", WordUtils.uncapitalize("", new char[0])); 
         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); 
          
         char[] chars = new char[] { '-', '+', ' ', '@' }; 
         assertEquals("i", WordUtils.uncapitalize("I", chars) ); 
         assertEquals("i", WordUtils.uncapitalize("i", chars) ); 
         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); 
         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); 
      
 @Test 
     public void testUncapitalizeWithDelimiters_String1125() { 
         assertEquals(null, WordUtils.uncapitalize(null, null)); 
         assertEquals("", WordUtils.uncapitalize("", new char[0])); 
         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); 
          
         char[] chars = new char[] { '-', '+', ' ', '@' }; 
         assertEquals("i", WordUtils.uncapitalize("I", chars) ); 
         assertEquals("i", WordUtils.uncapitalize("i", chars) ); 
         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); 
         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); 
      
 @Test 
     public void testUncapitalizeWithDelimiters_String1126() { 
         assertEquals(null, WordUtils.uncapitalize(null, null)); 
         assertEquals("", WordUtils.uncapitalize("", new char[0])); 
         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); 
          
         char[] chars = new char[] { '-', '+', ' ', '@' }; 
         assertEquals("i", WordUtils.uncapitalize("I", chars) ); 
         assertEquals("i", WordUtils.uncapitalize("i", chars) ); 
         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); 
         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); 
      
 @Test 
     public void testUncapitalizeWithDelimiters_String1127() { 
         assertEquals(null, WordUtils.uncapitalize(null, null)); 
         assertEquals("", WordUtils.uncapitalize("", new char[0])); 
         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); 
          
         char[] chars = new char[] { '-', '+', ' ', '@' }; 
         assertEquals("i", WordUtils.uncapitalize("I", chars) ); 
         assertEquals("i", WordUtils.uncapitalize("i", chars) ); 
         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); 
         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); 
      
 @Test 
     public void testSwapCase_String1128() { 
         assertEquals(null, WordUtils.swapCase(null)); 
         assertEquals("", WordUtils.swapCase("")); 
         assertEquals("  ", WordUtils.swapCase("  ")); 
          
         assertEquals("i", WordUtils.swapCase("I") ); 
         assertEquals("I", WordUtils.swapCase("i") ); 
         assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") ); 
         assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") ); 
         assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") ); 
         assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") ); [EOL
 @Test 
     public void testSwapCase_String1129() { 
         assertEquals(null, WordUtils.swapCase(null)); 
         assertEquals("", WordUtils.swapCase("")); 
         assertEquals("  ", WordUtils.swapCase("  ")); 
          
         assertEquals("i", WordUtils.swapCase("I") ); 
         assertEquals("I", WordUtils.swapCase("i") ); 
         assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") ); 
         assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") ); 
         assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") ); 
         assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") ); [EOL
 @Test 
     public void testInitials_String1130() { 
         assertEquals(null, WordUtils.initials(null)); 
         assertEquals("", WordUtils.initials("")); 
         assertEquals("", WordUtils.initials("  ")); 
  
         assertEquals("I", WordUtils.initials("I")); 
         assertEquals("i", WordUtils.initials("i")); 
         assertEquals("BJL", WordUtils.initials("Ben John Lee")); 
         assertEquals("BJ", WordUtils.initials("Ben J.Lee")); 
         assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); 
         assertEquals("iah1", WordUtils.initials("i am here 123")); 
     } 
  
     // ----------------------------------------------------------------------- [E
 @Test 
     public void testInitials_String1131() { 
         assertEquals(null, WordUtils.initials(null)); 
         assertEquals("", WordUtils.initials("")); 
         assertEquals("", WordUtils.initials("  ")); 
  
         assertEquals("I", WordUtils.initials("I")); 
         assertEquals("i", WordUtils.initials("i")); 
         assertEquals("BJL", WordUtils.initials("Ben John Lee")); 
         assertEquals("BJ", WordUtils.initials("Ben J.Lee")); 
         assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); 
         assertEquals("iah1", WordUtils.initials("i am here 123")); 
     } 
  
     // ----------------------------------------------------------------------- [E
 @Test 
     public void testInitials_String1132() { 
         assertEquals(null, WordUtils.initials(null)); 
         assertEquals("", WordUtils.initials("")); 
         assertEquals("", WordUtils.initials("  ")); 
  
         assertEquals("I", WordUtils.initials("I")); 
         assertEquals("i", WordUtils.initials("i")); 
         assertEquals("BJL", WordUtils.initials("Ben John Lee")); 
         assertEquals("BJ", WordUtils.initials("Ben J.Lee")); 
         assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); 
         assertEquals("iah1", WordUtils.initials("i am here 123")); 
     } 
  
     // ----------------------------------------------------------------------- [E
 @Test 
     public void testUncapitalizeWithDelimiters_String1133() { 
         assertEquals(null, WordUtils.uncapitalize(null, null)); 
         assertEquals("", WordUtils.uncapitalize("", new char[0])); 
         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); 
          
         char[] chars = new char[] { '-', '+', ' ', '@' }; 
         assertEquals("i", WordUtils.uncapitalize("I", chars) ); 
         assertEquals("i", WordUtils.uncapitalize("i", chars) ); 
         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); 
         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); 
      
 lang3/text/translate/UnicodeEscaper.java
 @Test 
     public void testAbove1134() { 
         final UnicodeEscaper ue = UnicodeEscaper.above('F'); 
  
         final String input = "ADFGZ"; 
         final String result = ue.translate(input); 
         assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); 
     } 
 } 

 @Test 
     public void testBetween1135() { 
         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); 
  
         final String input = "ADFGZ"; 
         final String result = ue.translate(input); 
         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); 
     } 
  

 @Test 
     public void testBetween1136() { 
         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); 
  
         final String input = "ADFGZ"; 
         final String result = ue.translate(input); 
         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); 
     } 
  

 @Test 
     public void testBetween1137() { 
         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); 
  
         final String input = "ADFGZ"; 
         final String result = ue.translate(input); 
         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); 
     } 
  

 lang3/text/StrTokenizer.java
 @Test 
     public void testCSVSimple1138() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testTSV1139() { 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); 
     } 
  

 @Test 
     public void testTSV1140() { 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); 
     } 
  

 @Test 
     public void testTSV1141() { 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); 
     } 
  

 @Test 
     public void testTSV1142() { 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); 
         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); 
     } 
  

 @Test 
     public void testCSVSimple1143() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testCSVSimple1144() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testCSVSimple1145() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testCSVSimple1146() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testCSVSimple1147() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testCSVSimple1148() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testCSVSimple1149() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testIteration1150() { 
         final StrTokenizer tkn = new StrTokenizer("a b c"); 
         assertFalse(tkn.hasPrevious()); 
         try { 
             tkn.previous(); 
             fail(); 
         } catch (final NoSuchElementException ex) {} 
         assertTrue(tkn.hasNext()); 
          
         assertEquals("a", tkn.next()); 
         try { 
             tkn.remove(); 
             fail(); 
         } catch (final UnsupportedOperationException ex) {} 
         try { 
             tkn.set("x"); 
   
 @Test 
     public void testCSVSimple1151() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testConstructor_charArray_char_char1152() { 
         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); 
         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); 
         assertEquals(1, tok.getCharArray(), 0, 1)); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void test51153() { 
  
         final String input = "a; b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void test51154() { 
  
         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; 
         final StrTokenizer tok = new StrTokenizer(input); 
         tok.setDelimiterChar(';'); 
         tok.setQuoteChar('"'); 
         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         final String tokens[] = tok.getTokenArray(); 
  
         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; 
  
         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL
 @Test 
     public void test51155() { 
  
         final String input = "a; b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21156() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21157() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21158() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21159() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21160() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21161() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21162() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21163() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21164() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21165() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21166() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void test51167() { 
  
         final String input = "a; b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testConstructor_charArray_char_char1168() { 
         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); 
         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); 
         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertFalse(tok.hasNext()); 
          
         tok = new StrTokenizer(new char[0], ' ', '"'); 
         assertFalse(tok.hasNext()); 
          
         tok = new StrTokenizer((char[]) null, ' ', '"'); 

 @Test 
     public void testCSVSimple1169() { 
         this.testCSV(CSV_SIMPLE_FIXTURE); 
     } 
  

 @Test 
     public void testBasicTrimmed21170() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21171() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testBasicTrimmed21172() { 
         final String input = "a:  b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 @Test 
     public void testToString1173() { 
         final StrTokenizer tkn = new StrTokenizer("a b c d e"); 
         assertEquals("StrTokenizer[not tokenized yet]", tkn.toString()); 
         tkn.next(); 
         assertEquals("StrTokenizer[a, b, c, d, e]", tkn.toString()); 
     } 
  
 } 

 @Test 
     public void test51174() { 
  
         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; 
         final StrTokenizer tok = new StrTokenizer(input); 
         tok.setDelimiterChar(';'); 
         tok.setQuoteChar('"'); 
         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         final String tokens[] = tok.getTokenArray(); 
  
         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; 
  
         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL
 @Test 
     public void test51175() { 
  
         final String input = "a; b  :"; 
         final StrTokenizer tok = new StrTokenizer(input, ':'); 
         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); 
         tok.setIgnoreEmptyTokens(false); 
         tok.setEmptyTokenAsNull(true); 
         assertEquals("a", tok.next()); 
         assertEquals("b", tok.next()); 
         assertEquals(null, tok.next()); 
         assertFalse(tok.hasNext()); 
     } 
  

 lang3/builder/EqualsBuilder.java
 @Test 
     public void testReflectionHashCode1176() { 
         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); 
         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); 
     } 
  

 @Test 
     public void testIntegerWithTransients1177() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1178() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1179() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1180() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1181() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1182() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1183() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1184() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1185() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1186() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testIntegerWithTransients1187() { 
         testInteger(true); 
     } 
  

 @Test 
     public void testSuper1188() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testSuper1189() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testSuper1190() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testSuper1191() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testSuper1192() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testLongArrayHiddenByObject1193() { 
         final long[] array1 = new long[2]; 
         array1[0] = 5L; 
         array1[1] = 6L; 
         final long[] array2 = new long[2]; 
         array2[0] = 5L; 
         array2[1] = 6L; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [E
 @Test 
     public void testSuper1194() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testFloatArray1195() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testCharArray1196() { 
         char[] obj1 = new char[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         char[] obj2 = new char[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testSuper1197() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testSuper1198() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testDouble1199() { 
         final double o1 = 1; 
         final double o2 = 2; 
         assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); 
         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); 
         assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals()); 
         assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals()); 
         assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals()); 
     } 
  

 @Test 
     public void testFloatArray1200() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testSuper1201() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testSuper1202() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

 @Test 
     public void testLongArray1203() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL
 @Test 
     public void testLongArrayHiddenByObject1204() { 
         final long[] array1 = new long[2]; 
         array1[0] = 5L; 
         array1[1] = 6L; 
         final long[] array2 = new long[2]; 
         array2[0] = 5L; 
         array2[1] = 6L; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [E
 @Test 
     public void testIntArray1205() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testIntArray1206() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testIntArray1207() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testMultiShortArray1208() { 
         final short[][] array1 = new short[2][2]; 
         final short[][] array2 = new short[2][2]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = i; 
                 array2[i][j] = i; 
             } 
         } 
         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); 
         array1[1][1] = 0; 
   
 @Test 
     public void testMultiShortArray1209() { 
         final short[][] array1 = new short[2][2]; 
         final short[][] array2 = new short[2][2]; 
         for (short i = 0; i < array1.length; ++i) { 
             for (short j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = i; 
                 array2[i][j] = i; 
             } 
         } 
         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); 
         array1[1][1] = 0; 
   
 @Test 
     public void testCharArray1210() { 
         char[] obj1 = new char[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         char[] obj2 = new char[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testCharArray1211() { 
         char[] obj1 = new char[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         char[] obj2 = new char[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testCharArray1212() { 
         char[] obj1 = new char[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         char[] obj2 = new char[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testCharArray1213() { 
         char[] obj1 = new char[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         char[] obj2 = new char[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testByteArrayHiddenByObject1214() { 
         final byte[] array1 = new byte[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final byte[] array2 = new byte[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
  
 @Test 
     public void testByteArray1215() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testByteArray1216() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testFloatArray1217() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testFloatArray1218() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
   
 @Test 
     public void testMultiBooleanArray1219() { 
         final boolean[][] array1 = new boolean[2][2]; 
         final boolean[][] array2 = new boolean[2][2]; 
         for (int i = 0; i < array1.length; ++i) { 
             for (int j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = i == 1 || j == 1; 
                 array2[i][j] = i == 1 || j == 1; 
             } 
         } 
         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); 
         array1[1
 @Test 
     public void testMultiBooleanArray1220() { 
         final boolean[][] array1 = new boolean[2][2]; 
         final boolean[][] array2 = new boolean[2][2]; 
         for (int i = 0; i < array1.length; ++i) { 
             for (int j = 0; j < array1[0].length; j++) { 
                 array1[i][j] = i == 1 || j == 1; 
                 array2[i][j] = i == 1 || j == 1; 
             } 
         } 
         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); 
         array1[1
 @Test 
     public void testReset1221() { 
         final EqualsBuilder equalsBuilder = new EqualsBuilder(); 
         assertTrue(equalsBuilder.isEquals()); 
         equalsBuilder.setEquals(false); 
         assertFalse(equalsBuilder.isEquals()); 
         equalsBuilder.reset(); 
         assertTrue(equalsBuilder.isEquals()); 
     } 
      

 lang3/mutable/MutableShort.java
 @Test 
     public void testAddValueObject1222() { 
         final MutableShort mutNum = new MutableShort((short) 1); 
         mutNum.add(Short.valueOf(1)); 
          
         assertEquals((short) 2, mutNum.shortValue()); 
     } 
  

 @Test 
     public void testSubtractValueObject1223() { 
         final MutableShort mutNum = new MutableShort((short) 1); 
         mutNum.subtract(Integer.valueOf(1)); 
          
         assertEquals((short) 0, mutNum.shortValue()); 
     } 
  

 @Test 
     public void testToShort1224() { 
         assertEquals(Short.valueOf(0), new MutableShort((short) 0).toShort()); 
         assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort()); 
     } 
  

 lang3/StringUtils.java
 @Test 
     public void testDefaultIfBlank_StringBuffers1225() { 
         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); 
         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); 
         assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); 
         assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), null)); 
         // Tests compatibility for the API return type 
         final StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")); 
         assertEquals("abc", s.toString()); 
     } 
  

 @Test 
     public void testDefaultIfBlank_StringBuffers1226() { 
         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); 
         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); 
         assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); 
         assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), null)); 
         // Tests compatibility for the API return type 
         final StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")); 
         assertEquals("abc", s.toString()); 
     } 
  

 @Test 
     public void testTrimToEmpty1227() { 
         assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); 
         assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); 
         assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); 
         assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); 
         assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); 
         assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); 
         assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); 
         assertEquals("", StringUtils.trimToEmpty("")); 
       
 @Test 
     public void testStripToEmpty_String1228() { 
         assertEquals("", StringUtils.stripToEmpty(null)); 
         assertEquals("", StringUtils.stripToEmpty("")); 
         assertEquals("", StringUtils.stripToEmpty("        ")); 
         assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); 
         assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); 
         assertEquals(StringUtilsTest.NON_WHITESPACE,  
             StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); 
     } 
      

 @Test 
     public void testLANG6661229() { 
         assertEquals("12",StringUtils.stripEnd("120.00", ".0")); 
         assertEquals("121",StringUtils.stripEnd("121.00", ".0")); 
     } 
  
     // Methods on StringUtils that are immutable in spirit (i.e. calculate the length)  
     // should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize)  
     // should take a String or String[] parameter and return String or String[]. 
     // This test enforces that this is done. 

 @Test 
     public void testLANG6661230() { 
         assertEquals("12",StringUtils.stripEnd("120.00", ".0")); 
         assertEquals("121",StringUtils.stripEnd("121.00", ".0")); 
     } 
  
     // Methods on StringUtils that are immutable in spirit (i.e. calculate the length)  
     // should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize)  
     // should take a String or String[] parameter and return String or String[]. 
     // This test enforces that this is done. 

 @Test 
     public void testStripToEmpty_String1231() { 
         assertEquals("", StringUtils.stripToEmpty(null)); 
         assertEquals("", StringUtils.stripToEmpty("")); 
         assertEquals("", StringUtils.stripToEmpty("        ")); 
         assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); 
         assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); 
         assertEquals(StringUtilsTest.NON_WHITESPACE,  
             StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); 
     } 
      

 @Test 
     public void testIndexOf_charInt1232() { 
         assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); 
         assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); 
         assertEquals(-1, StringUtils.indexOf("", ' ', 0)); 
         assertEquals(-1, StringUtils.indexOf("", ' ', -1)); 
         assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); 
         assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); 
         assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); 
         assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); 
         assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1));
 @Test 
     public void testIndexOf_String1233() { 
         assertEquals(-1, StringUtils.indexOf(null, null)); 
         assertEquals(-1, StringUtils.indexOf("", null)); 
         assertEquals(0, StringUtils.indexOf("", "")); 
         assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); 
         assertEquals(2, StringUtils.indexOf("aabaabaa", "b")); 
         assertEquals(1, StringUtils.indexOf("aabaabaa", "ab")); 
         assertEquals(0, StringUtils.indexOf("aabaabaa", "")); 
  
         assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b")); 
     } 
  

 @Test 
     public void testOrdinalIndexOf1234() { 
         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); 
  
         assertEquals(-1, StringUtils.ordinal
 @Test 
     public void testOrdinalIndexOf1235() { 
         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); 
         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); 
  
         assertEquals(-1, StringUtils.ordinal
 @Test 
     public void testIndexOfIgnoreCase_String1236() { 
         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); 
         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); 
         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); 
         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); 
         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); 
         assertEquals(1, StringUtils.
 @Test 
     public void testIndexOfIgnoreCase_String1237() { 
         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); 
         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); 
         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); 
         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); 
         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); 
         assertEquals(1, StringUtils.
 @Test 
     public void testIndexOfIgnoreCase_String1238() { 
         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); 
         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); 
         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); 
         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); 
         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); 
         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); 
         assertEquals(1, StringUtils.
 @Test 
     public void testLastIndexOf_char1239() { 
         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); 
         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); 
         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); 
         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); 
  
         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); 
     } 
  

 @Test 
     public void testLastIndexOf_char1240() { 
         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); 
         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); 
         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); 
         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); 
  
         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); 
     } 
  

 @Test 
     public void testLastIndexOf_StringInt1241() { 
         assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); 
         assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); 
         assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); 
         assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); 
         assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); 
         assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); 
         assertEquals(0, StringUtils.lastIndexOf("", "", 0)); 
         assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); 
         assertEquals(0, StringUtils.lastIndexOf("", "", 9)); 
        
 @Test 
     public void testLastIndexOfIgnoreCase_String1242() { 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); 
         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); 
         assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); 
         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); 
         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); 
         assertEquals(5,
 @Test 
     public void testLastIndexOfIgnoreCase_String1243() { 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); 
         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); 
         assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); 
         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); 
         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); 
         assertEquals(5,
 @Test 
     public void testLastIndexOfIgnoreCase_StringInt1244() { 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1)); 
         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0)); 
         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1)); 
         assertEquals(
 @Test 
     public void testContains_Char1245() { 
         assertFalse(StringUtils.contains(null, ' ')); 
         assertFalse(StringUtils.contains("", ' ')); 
         assertFalse(StringUtils.contains("", null)); 
         assertFalse(StringUtils.contains(null, null)); 
         assertTrue(StringUtils.contains("abc", 'a')); 
         assertTrue(StringUtils.contains("abc", 'b')); 
         assertTrue(StringUtils.contains("abc", 'c')); 
         assertFalse(StringUtils.contains("abc", 'z')); 
     } 
  

 @Test 
     public void testContains_String1246() { 
         assertFalse(StringUtils.contains(null, "")); 
         assertFalse(StringUtils.contains("", "")); 
         assertFalse(StringUtils.contains("", null)); 
         assertFalse(StringUtils.contains(null, null)); 
         assertTrue(StringUtils.contains("abc", "abc")); 
         assertTrue(StringUtils.contains("abc", "abc")); 
         assertTrue(StringUtils.contains("abc", null)); 
  
         assertFalse(StringUtils.contains("abc", "a")); 
     } 
  

 @Test 
     public void testContains_String1247() { 
         assertFalse(StringUtils.contains(null, "")); 
         assertFalse(StringUtils.contains("", "")); 
         assertFalse(StringUtils.contains("", null)); 
         assertFalse(StringUtils.contains(null, null)); 
         assertTrue(StringUtils.contains("abc", "abc")); 
         assertTrue(StringUtils.contains("abc", "abc")); 
         assertTrue(StringUtils.contains("abc", null)); 
         assertFalse(StringUtils.contains("abc", null)); 
         assertFalse(StringUtils.contains("abc", "")); 
         assertTrue(StringUtils.contains("abc", "abc")); 
     } 
  

 @Test 
     public void testContains_String1248() { 
         assertFalse(StringUtils.contains(null, "")); 
         assertFalse(StringUtils.contains("", "")); 
         assertFalse(StringUtils.contains("", null)); 
         assertFalse(StringUtils.contains(null, null)); 
         assertTrue(StringUtils.contains("abc", "")); 
         assertTrue(StringUtils.contains("abc", "abc")); 
         assertTrue(StringUtils.contains("abc", null)); 
         assertFalse(StringUtils.contains("abc", null)); 
         assertFalse(StringUtils.contains(null, "")); 
         assertTrue(StringUtils.contains("", "")); 
     } 
  

 @Test 
     public void testContainsIgnoreCase_StringString1249() { 
         assertFalse(StringUtils.containsIgnoreCase(null, null)); 
  
         // Null tests 
         assertFalse(StringUtils.containsIgnoreCase(null, "")); 
         assertFalse(StringUtils.containsIgnoreCase(null, "a")); 
         assertFalse(StringUtils.containsIgnoreCase(null, "abc")); 
  
         assertFalse(StringUtils.containsIgnoreCase("", null)); 
         assertFalse(StringUtils.containsIgnoreCase("a", null)); 
         assertFalse(StringUtils.containsIgnoreCase("abc", null)); 
  
         // Match len = 0 
         assertTrue(StringUtils.containsIgnoreCase("", "")); 
         assertTrue
 @Test 
     public void testIndexOfAny_StringStringWithSupplementaryChars1250() { 
         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); 
         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAny_StringStringWithSupplementaryChars1251() { 
         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); 
         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAny_StringStringWithSupplementaryChars1252() { 
         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); 
         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAny_StringStringWithSupplementaryChars1253() { 
         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); 
         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testContainsAny_StringStringWithSupplementaryChars1254() { 
         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); 
         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, "a".toCharArray())); 
         assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); 
         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001.toCharArray())); 
     } 
  

 @Test 
     public void testContainsAny_StringStringWithSupplementaryChars1255() { 
         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); 
         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, "a".toCharArray())); 
         assertTrue(StringUtils.containsAny(CharU20000, CharU20000)); 
         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001.toCharArray())); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars1256() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars1257() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars1258() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars1259() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringStringWithSupplementaryChars1260() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringStringWithSupplementaryChars1261() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringStringWithSupplementaryChars1262() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringStringWithSupplementaryChars1263() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringStringWithSupplementaryChars1264() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testIndexOfAnyBut_StringStringWithSupplementaryChars1265() { 
         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); 
         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); 
         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); 
     } 
  

 @Test 
     public void testContainsNone_CharArrayWithBadSupplementaryChars1266() { 
         // Test edge case: 1/2 of a (broken) supplementary char 
         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); 
         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); 
         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); 
         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); 
         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); 
         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); 
         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); 
     } 
  

 @Test 
     public void testContainsNone_CharArrayWithBadSupplementaryChars1267() { 
         // Test edge case: 1/2 of a (broken) supplementary char 
         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); 
         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); 
         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); 
         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); 
         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); 
         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); 
         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); 
     } 
  

 @Test 
     public void testContainsNone_CharArrayWithBadSupplementaryChars1268() { 
         // Test edge case: 1/2 of a (broken) supplementary char 
         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); 
         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); 
         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); 
         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); 
         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); 
         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); 
         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); 
     } 
  

 @Test 
     public void testContainsNone_CharArrayWithBadSupplementaryChars1269() { 
         // Test edge case: 1/2 of a (broken) supplementary char 
         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); 
         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); 
         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); 
         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); 
         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); 
         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); 
         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); 
     } 
  

 @Test 
     public void testContainsNone_CharArrayWithBadSupplementaryChars1270() { 
         // Test edge case: 1/2 of a (broken) supplementary char 
         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); 
         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); 
         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); 
         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); 
         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); 
         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); 
         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); 
     } 
  

 @Test 
     public void testContainsNone_StringWithBadSupplementaryChars1271() { 
         // Test edge case: 1/2 of a (broken) supplementary char 
         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); 
         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); 
         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); 
         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); 
         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); 
         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); 
         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); 
     } 
  
     /** 
      * See http
 @Test 
     public void testIndexOfAny_StringStringArray1272() { 
         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); 
         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); 
         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); 
         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); 
         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); 
         assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); 
         assertEquals(-1, StringUtils.indexOfAny("", new String[0])); 
         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"})); 
   
 @Test 
     public void testIndexOfAny_StringStringArray1273() { 
         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); 
         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); 
         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); 
         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); 
         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); 
         assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); 
         assertEquals(-1, StringUtils.indexOfAny("", new String[0])); 
         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"})); 
   
 @Test 
     public void testLastIndexOfAny_StringStringArray1274() { 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation 
         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg 
         assert
 @Test 
     public void testLastIndexOfAny_StringStringArray1275() { 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation 
         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg 
         assert
 @Test 
     public void testLastIndexOfAny_StringStringArray1276() { 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation 
         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag 
         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation 
         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg 
         assert
 @Test 
     public void testSubstring_StringIntInt1277() { 
         assertEquals(null, StringUtils.substring(null, 0, 0)); 
         assertEquals(null, StringUtils.substring(null, 1, 2)); 
         assertEquals("", StringUtils.substring("", 0, 0)); 
         assertEquals("", StringUtils.substring("", 1, 2)); 
         assertEquals("", StringUtils.substring("", -2, -1)); 
          
         assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); 
         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); 
         assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); 
         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));
 @Test 
     public void testSubstring_StringIntInt1278() { 
         assertEquals(null, StringUtils.substring(null, 0, 0)); 
         assertEquals(null, StringUtils.substring(null, 1, 2)); 
         assertEquals("", StringUtils.substring("", 0, 0)); 
         assertEquals("", StringUtils.substring("", 1, 2)); 
         assertEquals("", StringUtils.substring("", -2, -1)); 
          
         assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); 
         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); 
         assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); 
         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8));
 @Test 
     public void testLeft_String1279() { 
         assertSame(null, StringUtils.left(null, -1)); 
         assertSame(null, StringUtils.left(null, 0)); 
         assertSame(null, StringUtils.left(null, 2)); 
          
         assertEquals("", StringUtils.left("", -1)); 
         assertEquals("", StringUtils.left("", 0)); 
         assertEquals("", StringUtils.left("", 2)); 
          
         assertEquals("", StringUtils.left(FOOBAR, -1)); 
         assertEquals("", StringUtils.left(FOOBAR, 0)); 
         assertEquals(FOO, StringUtils.left(FOOBAR, 3)); 
         assertSame(FOOBAR, StringUtils.left(
 @Test 
     public void testRight_String1280() { 
         assertSame(null, StringUtils.right(null, -1)); 
         assertSame(null, StringUtils.right(null, 0)); 
         assertSame(null, StringUtils.right(null, 2)); 
          
         assertEquals("", StringUtils.right("", -1)); 
         assertEquals("", StringUtils.right("", 0)); 
         assertEquals("", StringUtils.right("", 2)); 
          
         assertEquals("", StringUtils.right(FOOBAR, -1)); 
         assertEquals("", StringUtils.right(FOOBAR, 0)); 
         assertEquals(BAR, StringUtils.right(FOOBAR, 3)); 
         assertSame(FOOBAR, StringUtils.right(
 @Test 
     public void testMid_String1281() { 
         assertSame(null, StringUtils.mid(null, -1, 0)); 
         assertSame(null, StringUtils.mid(null, 0, -1)); 
         assertSame(null, StringUtils.mid(null, 3, 0)); 
         assertSame(null, StringUtils.mid(null, 3, 2)); 
          
         assertEquals("", StringUtils.mid("", 0, -1)); 
         assertEquals("", StringUtils.mid("", 0, 0)); 
         assertEquals("", StringUtils.mid("", 0, 2)); 
          
         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); 
         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); 
      
 @Test 
     public void testMid_String1282() { 
         assertSame(null, StringUtils.mid(null, -1, 0)); 
         assertSame(null, StringUtils.mid(null, 0, -1)); 
         assertSame(null, StringUtils.mid(null, 3, 0)); 
         assertSame(null, StringUtils.mid(null, 3, 2)); 
          
         assertEquals("", StringUtils.mid("", 0, -1)); 
         assertEquals("", StringUtils.mid("", 0, 0)); 
         assertEquals("", StringUtils.mid("", 0, 2)); 
          
         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); 
         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); 
      
 @Test 
     public void testMid_String1283() { 
         assertSame(null, StringUtils.mid(null, -1, 0)); 
         assertSame(null, StringUtils.mid(null, 0, -1)); 
         assertSame(null, StringUtils.mid(null, 3, 0)); 
         assertSame(null, StringUtils.mid(null, 3, 2)); 
          
         assertEquals("", StringUtils.mid("", 0, -1)); 
         assertEquals("", StringUtils.mid("", 0, 0)); 
         assertEquals("", StringUtils.mid("", 0, 2)); 
          
         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); 
         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); 
      
 @Test 
     public void testSubstringBefore_StringString1284() { 
         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); 
  
         assertEquals(null, StringUtils.substringBefore(null, null)); 
         assertEquals(null, StringUtils.substringBefore(null, "")); 
         assertEquals(null, StringUtils.substringBefore(null, "XX")); 
         assertEquals("", StringUtils.substringBefore("", null)); 
         assertEquals("", StringUtils.substringBefore("", "")); 
         assertEquals("", StringUtils.substringBefore("", "XX")); 
          
         assertEquals("foo", StringUtils.substringBefore("foo", null)); 
         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [E
 @Test 
     public void testSubstringBefore_StringString1285() { 
         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); 
  
         assertEquals(null, StringUtils.substringBefore(null, null)); 
         assertEquals(null, StringUtils.substringBefore(null, "")); 
         assertEquals(null, StringUtils.substringBefore(null, "XX")); 
         assertEquals("", StringUtils.substringBefore("", null)); 
         assertEquals("", StringUtils.substringBefore("", "")); 
         assertEquals("", StringUtils.substringBefore("", "XX")); 
          
         assertEquals("foo", StringUtils.substringBefore("foo", null)); 
         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [E
 @Test 
     public void testSubstringBefore_StringString1286() { 
         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); 
  
         assertEquals(null, StringUtils.substringBefore(null, null)); 
         assertEquals(null, StringUtils.substringBefore(null, "")); 
         assertEquals(null, StringUtils.substringBefore(null, "XX")); 
         assertEquals("", StringUtils.substringBefore("", null)); 
         assertEquals("", StringUtils.substringBefore("", "")); 
         assertEquals("", StringUtils.substringBefore("", "XX")); 
          
         assertEquals("foo", StringUtils.substringBefore("foo", null)); 
         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [E
 @Test 
     public void testSubstringAfter_StringString1287() { 
         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); 
          
         assertEquals(null, StringUtils.substringAfter(null, null)); 
         assertEquals(null, StringUtils.substringAfter(null, "")); 
         assertEquals(null, StringUtils.substringAfter(null, "XX")); 
         assertEquals("", StringUtils.substringAfter("", null)); 
         assertEquals("", StringUtils.substringAfter("", "")); 
         assertEquals("", StringUtils.substringAfter("", "XX")); 
          
         assertEquals("", StringUtils.substringAfter("foo", null)); 
         assertEquals("ot", StringUtils.substring
 @Test 
     public void testSubstringAfter_StringString1288() { 
         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); 
          
         assertEquals(null, StringUtils.substringAfter(null, null)); 
         assertEquals(null, StringUtils.substringAfter(null, "")); 
         assertEquals(null, StringUtils.substringAfter(null, "XX")); 
         assertEquals("", StringUtils.substringAfter("", null)); 
         assertEquals("", StringUtils.substringAfter("", "")); 
         assertEquals("", StringUtils.substringAfter("", "XX")); 
          
         assertEquals("", StringUtils.substringAfter("foo", null)); 
         assertEquals("ot", StringUtils.substring
 @Test 
     public void testSubstringAfter_StringString1289() { 
         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); 
          
         assertEquals(null, StringUtils.substringAfter(null, null)); 
         assertEquals(null, StringUtils.substringAfter(null, "")); 
         assertEquals(null, StringUtils.substringAfter(null, "XX")); 
         assertEquals("", StringUtils.substringAfter("", null)); 
         assertEquals("", StringUtils.substringAfter("", "")); 
         assertEquals("", StringUtils.substringAfter("", "XX")); 
          
         assertEquals("", StringUtils.substringAfter("foo", null)); 
         assertEquals("ot", StringUtils.substring
 @Test 
     public void testSubstringAfter_StringString1290() { 
         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); 
          
         assertEquals(null, StringUtils.substringAfter(null, null)); 
         assertEquals(null, StringUtils.substringAfter(null, "")); 
         assertEquals(null, StringUtils.substringAfter(null, "XX")); 
         assertEquals("", StringUtils.substringAfter("", null)); 
         assertEquals("", StringUtils.substringAfter("", "")); 
         assertEquals("", StringUtils.substringAfter("", "XX")); 
          
         assertEquals("", StringUtils.substringAfter("foo", null)); 
         assertEquals("ot", StringUtils.substring
 @Test 
     public void testSubstringBeforeLast_StringString1291() { 
         assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); 
  
         assertEquals(null, StringUtils.substringBeforeLast(null, null)); 
         assertEquals(null, StringUtils.substringBeforeLast(null, "")); 
         assertEquals(null, StringUtils.substringBeforeLast(null, "XX")); 
         assertEquals("", StringUtils.substringBeforeLast("", null)); 
         assertEquals("", StringUtils.substringBeforeLast("", "")); 
         assertEquals("", StringUtils.substringBeforeLast("", "XX")); 
  
         assertEquals("foo", StringUtils.substringBeforeLast("foo", null)); 
         assertEquals("foo", StringUtils.substringBeforeLast("foo", "b
 @Test 
     public void testSubstringAfterLast_StringString1292() { 
         assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX")); 
  
         assertEquals(null, StringUtils.substringAfterLast(null, null)); 
         assertEquals(null, StringUtils.substringAfterLast(null, "")); 
         assertEquals(null, StringUtils.substringAfterLast(null, "XX")); 
         assertEquals("", StringUtils.substringAfterLast("", null)); 
         assertEquals("", StringUtils.substringAfterLast("", "")); 
         assertEquals("", StringUtils.substringAfterLast("", "a")); 
  
         assertEquals("", StringUtils.substringAfterLast("foo", null)); 
         assertEquals("", StringUtils.substringAfterLast("foo", "b")); [
 @Test 
     public void testSubstringBetween_StringStringString1293() { 
         assertEquals(null, StringUtils.substringBetween(null, "", "")); 
         assertEquals(null, StringUtils.substringBetween("", null, "")); 
         assertEquals(null, StringUtils.substringBetween("", "", null)); 
         assertEquals("", StringUtils.substringBetween("", "", "")); 
         assertEquals("", StringUtils.substringBetween("foo", "", "")); 
         assertEquals(null, StringUtils.substringBetween("foo", "", "]")); 
         assertEquals(null, StringUtils.substringBetween("foo", "[", "]")); 
         assertEquals("", StringUtils.substringBetween("    ", " ", "  ")); 
         assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo
 @Test 
     public void testSubstringsBetween_StringStringString1294() { 
  
         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); 
         assertEquals(3, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
         assertEquals("three", results[2]); 
  
         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); 
         assertEquals(2, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
  
         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); 
         assertEquals(2, results
 @Test 
     public void testSubstringsBetween_StringStringString1295() { 
  
         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); 
         assertEquals(3, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
         assertEquals("three", results[2]); 
  
         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); 
         assertEquals(2, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
  
         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); 
         assertEquals(2, results
 @Test 
     public void testSubstringsBetween_StringStringString1296() { 
  
         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); 
         assertEquals(3, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
         assertEquals("three", results[2]); 
  
         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); 
         assertEquals(2, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
  
         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); 
         assertEquals(2, results
 @Test 
     public void testSubstringsBetween_StringStringString1297() { 
  
         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); 
         assertEquals(3, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
         assertEquals("three", results[2]); 
  
         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); 
         assertEquals(2, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
  
         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); 
         assertEquals(2, results
 @Test 
     public void testSubstringsBetween_StringStringString1298() { 
  
         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); 
         assertEquals(3, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
         assertEquals("three", results[2]); 
  
         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); 
         assertEquals(2, results.length); 
         assertEquals("one", results[0]); 
         assertEquals("two", results[1]); 
  
         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); 
         assertEquals(2, results
 @Test 
     public void testSplit_StringString_StringStringInt1299() { 
         assertArrayEquals(null, StringUtils.split(null, ".")); 
         assertArrayEquals(null, StringUtils.split(null, ".", 3)); 
          
         assertEquals(0, StringUtils.split("", ".").length); 
         assertEquals(0, StringUtils.split("", ".", 3).length); 
          
         innerTestSplit('.', ".", ' '); 
         innerTestSplit('.', ".", ','); 
         innerTestSplit('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
             for (int j = 0; j < NON_WHITESPACE.length(); j++) { 
     
 @Test 
     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt1300() { 
         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; 
  
         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; 
  
         // test whitespace 
         String input = "ab   de fg" ; 
         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; 
  
         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; 
         assertEquals( expected.length, actual.length ) ; 
         for ( int i = 0 ; i < actual.length ; i+= 1 ) { 
             assert
 @Test 
     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt1301() { 
         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; 
  
         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; 
  
         // test whitespace 
         String input = "ab   de fg" ; 
         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; 
  
         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; 
         assertEquals( expected.length, actual.length ) ; 
         for ( int i = 0 ; i < actual.length ; i+= 1 ) { 
             assert
 @Test 
     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt1302() { 
         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; 
  
         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; 
  
         // test whitespace 
         String input = "ab   de fg" ; 
         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; 
  
         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; 
         assertEquals( expected.length, actual.length ) ; 
         for ( int i = 0 ; i < actual.length ; i+= 1 ) { 
             assert
 @Test 
     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt1303() { 
         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; 
  
         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; 
  
         // test whitespace 
         String input = "ab   de fg" ; 
         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; 
  
         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; 
         assertEquals( expected.length, actual.length ) ; 
         for ( int i = 0 ; i < actual.length ; i+= 1 ) { 
             assert
 @Test 
     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt1304() { 
         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; 
  
         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; 
  
         // test whitespace 
         String input = "ab   de fg" ; 
         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; 
  
         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; 
         assertEquals( expected.length, actual.length ) ; 
         for ( int i = 0 ; i < actual.length ; i+= 1 ) { 
             assert
 @Test 
     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt1305() { 
         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; 
  
         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; 
  
         // test whitespace 
         String input = "ab   de fg" ; 
         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; 
  
         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; 
         assertEquals( expected.length, actual.length ) ; 
         for ( int i = 0 ; i < actual.length ; i+= 1 ) { 
             assert
 @Test 
     public void testReverseDelimited_StringChar1306() { 
         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); 
         assertEquals("", StringUtils.reverseDelimited("", '.') ); 
         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); 
         assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') ); 
         assertEquals("", StringUtils.reverseDelimited("", '.') ); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testSplitPreserveAllTokens_StringChar1307() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); 
  
         String str = "a.b. c"; 
         String[] res = StringUtils.splitPreserveAllTokens(str, '.'); 
         assertEquals(3, res.length); 
         assertEquals("a", res[0]); 
         assertEquals("b", res[1]); 
         assertEquals(" c", res[2]); 
              
         str = "a.b.. c"; 
         res = StringUtils.splitPreserveAllTokens(str, '.'); 
         assertEquals(
 @Test 
     public void testSplitPreserveAllTokens_StringChar1308() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); 
  
         String str = "a.b. c"; 
         String[] res = StringUtils.splitPreserveAllTokens(str, '.'); 
         assertEquals(3, res.length); 
         assertEquals("a", res[0]); 
         assertEquals("b", res[1]); 
         assertEquals(" c", res[2]); 
              
         str = "a.b.. c"; 
         res = StringUtils.splitPreserveAllTokens(str, '.'); 
         assertEquals(
 @Test 
     public void testSplitPreserveAllTokens_StringChar1309() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); 
  
         String str = "a.b. c"; 
         String[] res = StringUtils.splitPreserveAllTokens(str, '.'); 
         assertEquals(3, res.length); 
         assertEquals("a", res[0]); 
         assertEquals("b", res[1]); 
         assertEquals(" c", res[2]); 
              
         str = "a.b.. c"; 
         res = StringUtils.splitPreserveAllTokens(str, '.'); 
         assertEquals(
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1310() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1311() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1312() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1313() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1314() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1315() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1316() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1317() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1318() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1319() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1320() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1321() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitPreserveAllTokens_StringString_StringStringInt1322() { 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); 
         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); 
          
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); 
         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); 
          
         innerTestSplitPreserveAllTokens('.', ".", ' '); 
         innerTestSplitPreserveAllTokens('.', ".", ','); 
         innerTestSplitPreserveAllTokens('.', ".,", 'x'); 
         for (int i = 0; i < WHITESPACE.length(); i++) { 
           
 @Test 
     public void testSplitByCharacterTypeCamelCase1323() { 
         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); 
         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", 
                
 @Test 
     public void testSplitByCharacterTypeCamelCase1324() { 
         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); 
         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", 
                
 @Test 
     public void testSplitByCharacterTypeCamelCase1325() { 
         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); 
         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", 
                
 @Test 
     public void testSplitByCharacterTypeCamelCase1326() { 
         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); 
         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", 
                
 @Test 
     public void testSplitByCharacterTypeCamelCase1327() { 
         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); 
         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", 
                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); 
  
         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", 
                
 @Test 
     public void testJoin_ArrayOfLongs1328() { 
         assertEquals(null, StringUtils.join((long[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfChars1329() { 
         assertEquals(null, StringUtils.join((char[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testReverseDelimited_StringChar1330() { 
         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); 
         assertEquals("", StringUtils.reverseDelimited("", '.') ); 
         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); 
         assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') ); 
         assertEquals("", StringUtils.reverseDelimited("", '.') ); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testReverseDelimited_StringChar1331() { 
         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); 
         assertEquals("", StringUtils.reverseDelimited("", '.') ); 
         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); 
         assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') ); 
         assertEquals("", StringUtils.reverseDelimited("", '.') ); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testJoin_ArrayOfInts1332() { 
         assertEquals(null, StringUtils.join((int[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfInts1333() { 
         assertEquals(null, StringUtils.join((int[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfInts1334() { 
         assertEquals(null, StringUtils.join((int[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfInts1335() { 
         assertEquals(null, StringUtils.join((int[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfInts1336() { 
         assertEquals(null, StringUtils.join((int[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfBytes1337() { 
         assertEquals(null, StringUtils.join((byte[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfBytes1338() { 
         assertEquals(null, StringUtils.join((byte[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfBytes1339() { 
         assertEquals(null, StringUtils.join((byte[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfBytes1340() { 
         assertEquals(null, StringUtils.join((byte[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfShorts1341() { 
         assertEquals(null, StringUtils.join((short[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfShorts1342() { 
         assertEquals(null, StringUtils.join((short[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfChars1343() { 
         assertEquals(null, StringUtils.join((char[]) null, ',')); 
         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfDoubles1344() { 
         assertEquals(null, StringUtils.join((double[]) null, ',')); 
         assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfFloats1345() { 
         assertEquals(null, StringUtils.join((float[]) null, ',')); 
         assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_ArrayOfFloats1346() { 
         assertEquals(null, StringUtils.join((float[]) null, ',')); 
         assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); 
         assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); 
     } 
      

 @Test 
     public void testJoin_Objectarray1347() { 
 //        assertEquals(null, StringUtils.join(null)); // generates warning 
         assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast 
         // test additional varargs calls 
         assertEquals("", StringUtils.join()); // empty array 
         assertEquals("", StringUtils.join((Object) null)); // => new Object[]{null} 
  
         assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); 
         assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); 
         assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); 
         assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"})); 
         assertEquals("a", StringUtils.join(
 @Test 
     public void testJoin_IteratorChar1348() { 
         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); 
         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); 
     } 
      

 @Test 
     public void testJoin_IteratorChar1349() { 
         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); 
         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); 
     } 
      

 @Test 
     public void testJoin_IteratorChar1350() { 
         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); 
         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); 
     } 
      

 @Test 
     public void testJoin_IterableString1351() { 
         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); 
         assertEquals("", StringUtils.join(Ar
 @Test 
     public void testJoin_IterableString1352() { 
         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); 
         assertEquals("", StringUtils.join(Ar
 @Test 
     public void testJoin_IterableString1353() { 
         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); 
         assertEquals("", StringUtils.join(Ar
 @Test 
     public void testJoin_IterableString1354() { 
         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); 
         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); 
         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); 
  
         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); 
         assertEquals("", StringUtils.join(Ar
 @Test 
     public void testDeleteWhitespace_String1355() { 
         assertEquals(null, StringUtils.deleteWhitespace(null)); 
         assertEquals("", StringUtils.deleteWhitespace("")); 
         assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); 
         assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); 
         assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); 
         // Note: u-2007 and u-000A both cause problems in the source code 
         // it should ignore 2007 but delete 000A 
         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n
 @Test 
     public void testDeleteWhitespace_String1356() { 
         assertEquals(null, StringUtils.deleteWhitespace(null)); 
         assertEquals("", StringUtils.deleteWhitespace("")); 
         assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); 
         assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); 
         assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); 
         // Note: u-2007 and u-000A both cause problems in the source code 
         // it should ignore 2007 but delete 000A 
         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n
 @Test 
     public void testRemoveStartIgnoreCase1357() { 
         // StringUtils.removeStart("", *)        = "" 
         assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null)); 
         assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, "")); 
         assertNull("removeStartIgnoreCase(null, \"a\")", StringUtils.removeStartIgnoreCase(null, "a")); 
          
         // StringUtils.removeStart(*, null)      = * 
         assertEquals("removeStartIgnoreCase(\"\", null)", StringUtils.removeStartIgnoreCase("", null), ""); 
         assertEquals("removeStartIgnoreCase(\"\", \"\")", StringUtils.removeStartIgnoreCase("", ""), ""); 
         assertEquals("remove
 @Test 
     public void testRepeat_StringStringInt1358() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testRemoveEndIgnoreCase1359() { 
         // StringUtils.removeEndIgnoreCase("", *)        = "" 
         assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); 
         assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); 
         assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); 
          
         // StringUtils.removeEnd(*, null)      = * 
         assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); 
         assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); 
         assertEqu
 @Test 
     public void testRemove_String1360() { 
         // StringUtils.remove(null, *)        = null 
         assertEquals(null, StringUtils.remove(null, null)); 
         assertEquals(null, StringUtils.remove(null, "")); 
         assertEquals(null, StringUtils.remove(null, "a")); 
          
         // StringUtils.remove("", *)          = "" 
         assertEquals("", StringUtils.remove("", null)); 
         assertEquals("", StringUtils.remove("", "")); 
         assertEquals("", StringUtils.remove("", "a")); 
          
         // StringUtils.remove(*, null)        = * 
         assertEqu
 @Test 
     public void testRemove_String1361() { 
         // StringUtils.remove(null, *)        = null 
         assertEquals(null, StringUtils.remove(null, null)); 
         assertEquals(null, StringUtils.remove(null, "")); 
         assertEquals(null, StringUtils.remove(null, "a")); 
          
         // StringUtils.remove("", *)          = "" 
         assertEquals("", StringUtils.remove("", null)); 
         assertEquals("", StringUtils.remove("", "")); 
         assertEquals("", StringUtils.remove("", "a")); 
          
         // StringUtils.remove(*, null)        = * 
         assertEqu
 @Test 
     public void testRemove_String1362() { 
         // StringUtils.remove(null, *)        = null 
         assertEquals(null, StringUtils.remove(null, null)); 
         assertEquals(null, StringUtils.remove(null, "")); 
         assertEquals(null, StringUtils.remove(null, "a")); 
          
         // StringUtils.remove("", *)          = "" 
         assertEquals("", StringUtils.remove("", null)); 
         assertEquals("", StringUtils.remove("", "")); 
         assertEquals("", StringUtils.remove("", "a")); 
          
         // StringUtils.remove(*, null)        = * 
         assertEqu
 @Test 
     public void testRemove_String1363() { 
         // StringUtils.remove(null, *)        = null 
         assertEquals(null, StringUtils.remove(null, null)); 
         assertEquals(null, StringUtils.remove(null, "")); 
         assertEquals(null, StringUtils.remove(null, "a")); 
          
         // StringUtils.remove("", *)          = "" 
         assertEquals("", StringUtils.remove("", null)); 
         assertEquals("", StringUtils.remove("", "")); 
         assertEquals("", StringUtils.remove("", "a")); 
          
         // StringUtils.remove(*, null)        = * 
         assertEqu
 @Test 
     public void testRemove_String1364() { 
         // StringUtils.remove(null, *)        = null 
         assertEquals(null, StringUtils.remove(null, null)); 
         assertEquals(null, StringUtils.remove(null, "")); 
         assertEquals(null, StringUtils.remove(null, "a")); 
          
         // StringUtils.remove("", *)          = "" 
         assertEquals("", StringUtils.remove("", null)); 
         assertEquals("", StringUtils.remove("", "")); 
         assertEquals("", StringUtils.remove("", "a")); 
          
         // StringUtils.remove(*, null)        = * 
         assertEqu
 @Test 
     public void testRemove_String1365() { 
         // StringUtils.remove(null, *)        = null 
         assertEquals(null, StringUtils.remove(null, null)); 
         assertEquals(null, StringUtils.remove(null, "")); 
         assertEquals(null, StringUtils.remove(null, "a")); 
          
         // StringUtils.remove("", *)          = "" 
         assertEquals("", StringUtils.remove("", null)); 
         assertEquals("", StringUtils.remove("", "")); 
         assertEquals("", StringUtils.remove("", "a")); 
          
         // StringUtils.remove(*, null)        = * 
         assertEqu
 @Test 
     public void testRemove_String1366() { 
         // StringUtils.remove(null, *)        = null 
         assertEquals(null, StringUtils.remove(null, null)); 
         assertEquals(null, StringUtils.remove(null, "")); 
         assertEquals(null, StringUtils.remove(null, "a")); 
          
         // StringUtils.remove("", *)          = "" 
         assertEquals("", StringUtils.remove("", null)); 
         assertEquals("", StringUtils.remove("", "")); 
         assertEquals("", StringUtils.remove("", "a")); 
          
         // StringUtils.remove(*, null)        = * 
         assertEqu
 @Test 
     public void testReplace_StringStringArrayStringArray1367() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1368() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1369() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1370() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1371() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1372() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1373() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1374() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1375() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1376() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplace_StringStringArrayStringArray1377() { 
         //JAVADOC TESTS START 
         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); 
         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); 
         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); 
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); 
  
         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); 
         assertEquals(StringUtils.replaceEach
 @Test 
     public void testReplaceChars_StringStringString1378() { 
         assertEquals(null, StringUtils.replaceChars(null, null, null)); 
         assertEquals(null, StringUtils.replaceChars(null, "", null)); 
         assertEquals(null, StringUtils.replaceChars(null, "a", null)); 
         assertEquals(null, StringUtils.replaceChars(null, null, "")); 
         assertEquals(null, StringUtils.replaceChars(null, null, "x")); 
          
         assertEquals("", StringUtils.replaceChars("", null, null)); 
         assertEquals("", StringUtils.replaceChars("", "", null)); 
         assertEquals("", StringUtils.replaceChars("", "a", null)); 
         assertEquals("", StringUtils.replaceChars("", null, "
 @Test 
     public void testReplaceChars_StringStringString1379() { 
         assertEquals(null, StringUtils.replaceChars(null, null, null)); 
         assertEquals(null, StringUtils.replaceChars(null, "", null)); 
         assertEquals(null, StringUtils.replaceChars(null, "a", null)); 
         assertEquals(null, StringUtils.replaceChars(null, null, "")); 
         assertEquals(null, StringUtils.replaceChars(null, null, "x")); 
          
         assertEquals("", StringUtils.replaceChars("", null, null)); 
         assertEquals("", StringUtils.replaceChars("", "", null)); 
         assertEquals("", StringUtils.replaceChars("", "a", null)); 
         assertEquals("", StringUtils.replaceChars("", null, "
 @Test 
     public void testReplaceChars_StringStringString1380() { 
         assertEquals(null, StringUtils.replaceChars(null, null, null)); 
         assertEquals(null, StringUtils.replaceChars(null, "", null)); 
         assertEquals(null, StringUtils.replaceChars(null, "a", null)); 
         assertEquals(null, StringUtils.replaceChars(null, null, "")); 
         assertEquals(null, StringUtils.replaceChars(null, null, "x")); 
          
         assertEquals("", StringUtils.replaceChars("", null, null)); 
         assertEquals("", StringUtils.replaceChars("", "", null)); 
         assertEquals("", StringUtils.replaceChars("", "a", null)); 
         assertEquals("", StringUtils.replaceChars("", null, "
 @Test 
     public void testReplaceChars_StringStringString1381() { 
         assertEquals(null, StringUtils.replaceChars(null, null, null)); 
         assertEquals(null, StringUtils.replaceChars(null, "", null)); 
         assertEquals(null, StringUtils.replaceChars(null, "a", null)); 
         assertEquals(null, StringUtils.replaceChars(null, null, "")); 
         assertEquals(null, StringUtils.replaceChars(null, null, "x")); 
          
         assertEquals("", StringUtils.replaceChars("", null, null)); 
         assertEquals("", StringUtils.replaceChars("", "", null)); 
         assertEquals("", StringUtils.replaceChars("", "a", null)); 
         assertEquals("", StringUtils.replaceChars("", null, "
 @Test 
     public void testReplaceChars_StringStringString1382() { 
         assertEquals(null, StringUtils.replaceChars(null, null, null)); 
         assertEquals(null, StringUtils.replaceChars(null, "", null)); 
         assertEquals(null, StringUtils.replaceChars(null, "a", null)); 
         assertEquals(null, StringUtils.replaceChars(null, null, "")); 
         assertEquals(null, StringUtils.replaceChars(null, null, "x")); 
          
         assertEquals("", StringUtils.replaceChars("", null, null)); 
         assertEquals("", StringUtils.replaceChars("", "", null)); 
         assertEquals("", StringUtils.replaceChars("", "a", null)); 
         assertEquals("", StringUtils.replaceChars("", null, "
 @Test 
     public void testReplaceChars_StringStringString1383() { 
         assertEquals(null, StringUtils.replaceChars(null, null, null)); 
         assertEquals(null, StringUtils.replaceChars(null, "", null)); 
         assertEquals(null, StringUtils.replaceChars(null, "a", null)); 
         assertEquals(null, StringUtils.replaceChars(null, null, "")); 
         assertEquals(null, StringUtils.replaceChars(null, null, "x")); 
          
         assertEquals("", StringUtils.replaceChars("", null, null)); 
         assertEquals("", StringUtils.replaceChars("", "", null)); 
         assertEquals("", StringUtils.replaceChars("", "a", null)); 
         assertEquals("", StringUtils.replaceChars("", null, "
 @Test 
     public void testOverlay_StringStringIntInt1384() { 
         assertEquals(null, StringUtils.overlay(null, null, 2, 4)); 
         assertEquals(null, StringUtils.overlay(null, null, -2, -4)); 
          
         assertEquals("", StringUtils.overlay("", null, 0, 0)); 
         assertEquals("", StringUtils.overlay("", "", 0, 0)); 
         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); 
         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); 
         assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); 
          
         assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4));
 @Test 
     public void testOverlay_StringStringIntInt1385() { 
         assertEquals(null, StringUtils.overlay(null, null, 2, 4)); 
         assertEquals(null, StringUtils.overlay(null, null, -2, -4)); 
          
         assertEquals("", StringUtils.overlay("", null, 0, 0)); 
         assertEquals("", StringUtils.overlay("", "", 0, 0)); 
         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); 
         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); 
         assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); 
          
         assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4));
 @Test 
     public void testRepeat_StringStringInt1386() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testRepeat_StringStringInt1387() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testRepeat_StringStringInt1388() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testChop1389() { 
  
         final String[][] chopCases = { 
             { FOO_UNCAP + "\r\n", FOO_UNCAP } , 
             { FOO_UNCAP + "\n" , FOO_UNCAP } , 
             { FOO_UNCAP + "\r", FOO_UNCAP }, 
             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, 
             { "foo", "fo"}, 
             { "foo\nfoo", "foo\nfo" }, 
             { "\n", "" }, 
             { "\r", "" }, 
             { "\r\n", "" }, 
             { null
 @Test 
     public void testChop1390() { 
  
         final String[][] chopCases = { 
             { FOO_UNCAP + "\r\n", FOO_UNCAP } , 
             { FOO_UNCAP + "\n" , FOO_UNCAP } , 
             { FOO_UNCAP + "\r", FOO_UNCAP }, 
             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, 
             { "foo", "fo"}, 
             { "foo\nfoo", "foo\nfo" }, 
             { "\n", "" }, 
             { "\r", "" }, 
             { "\r\n", "" }, 
             { null
 @Test 
     public void testRepeat_StringStringInt1391() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testRepeat_StringInt1392() { 
         assertEquals(null, StringUtils.repeat(null, 2)); 
         assertEquals("", StringUtils.repeat("ab", 0)); 
         assertEquals("", StringUtils.repeat("", 3)); 
         assertEquals("aaa", StringUtils.repeat("a", 3)); 
         assertEquals("ababab", StringUtils.repeat("ab", 3)); 
         assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); 
         final String str = StringUtils.repeat("a", 10000);  // bigger than pad limit 
         assertEquals(10000, str.length()); 
         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); 
     } 
  

 @Test 
     public void testRepeat_StringStringInt1393() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testLeftPad_StringInt1394() { 
         assertEquals(null, StringUtils.leftPad(null, 5)); 
         assertEquals("     ", StringUtils.leftPad("", 5)); 
         assertEquals("  abc", StringUtils.leftPad("abc", 5)); 
         assertEquals("abc", StringUtils.leftPad("abc", 2)); 
     } 
          

 @Test 
     public void testCenter_StringIntString1395() { 
         assertEquals(null, StringUtils.center(null, 4, null)); 
         assertEquals(null, StringUtils.center(null, -1, " ")); 
         assertEquals(null, StringUtils.center(null, 4, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals("ab", StringUtils.center("ab", 0, " ")); 
         assertEquals("ab", StringUtils.center("ab", -1, " ")); 
         assertEquals("ab", StringUtils.center("ab", 1, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); 
         assertEquals("abcd
 @Test 
     public void testRightPad_StringInt1396() { 
         assertEquals(null, StringUtils.rightPad(null, 5)); 
         assertEquals("     ", StringUtils.rightPad("", 5)); 
         assertEquals("abc  ", StringUtils.rightPad("abc", 5)); 
         assertEquals("abc", StringUtils.rightPad("abc", 2)); 
         assertEquals("abc", StringUtils.rightPad("abc", -1)); 
     } 
  

 @Test 
     public void testRightPad_StringIntChar1397() { 
         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); 
         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); 
         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); 
         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); 
         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length 
         assertEquals(10000, str.length()); 
         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); 
     }
 @Test 
     public void testRightPad_StringIntChar1398() { 
         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); 
         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); 
         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); 
         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); 
         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length 
         assertEquals(10000, str.length()); 
         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); 
     }
 @Test 
     public void testRightPad_StringIntChar1399() { 
         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); 
         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); 
         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); 
         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); 
         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length 
         assertEquals(10000, str.length()); 
         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); 
     }
 @Test 
     public void testRightPad_StringIntChar1400() { 
         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); 
         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); 
         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); 
         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); 
         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length 
         assertEquals(10000, str.length()); 
         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); 
     }
 @Test 
     public void testRightPad_StringIntChar1401() { 
         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); 
         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); 
         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); 
         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); 
         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); 
         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length 
         assertEquals(10000, str.length()); 
         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); 
     }
 @Test 
     public void testLeftPad_StringInt1402() { 
         assertEquals(null, StringUtils.leftPad(null, 5)); 
         assertEquals("     ", StringUtils.leftPad("", 5)); 
         assertEquals("  abc", StringUtils.leftPad("abc", 5)); 
         assertEquals("abc", StringUtils.leftPad("abc", 2)); 
     } 
          

 @Test 
     public void testLeftPad_StringInt1403() { 
         assertEquals(null, StringUtils.leftPad(null, 5)); 
         assertEquals("     ", StringUtils.leftPad("", 5)); 
         assertEquals("  abc", StringUtils.leftPad("abc", 5)); 
         assertEquals("abc", StringUtils.leftPad("abc", 2)); 
     } 
          

 @Test 
     public void testLeftPad_StringIntString1404() { 
         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); 
         assertEquals(null, StringUtils.leftPad(null, 5, null)); 
         assertEquals("     ", StringUtils.leftPad("", 5, " ")); 
         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); 
         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); 
         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); 
         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); 
         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); 
         assertEquals("  abc", StringUtils.leftPad("abc", 5,
 @Test 
     public void testLeftPad_StringIntString1405() { 
         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); 
         assertEquals(null, StringUtils.leftPad(null, 5, null)); 
         assertEquals("     ", StringUtils.leftPad("", 5, " ")); 
         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); 
         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); 
         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); 
         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); 
         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); 
         assertEquals("  abc", StringUtils.leftPad("abc", 5,
 @Test 
     public void testLeftPad_StringIntString1406() { 
         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); 
         assertEquals(null, StringUtils.leftPad(null, 5, null)); 
         assertEquals("     ", StringUtils.leftPad("", 5, " ")); 
         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); 
         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); 
         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); 
         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); 
         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); 
         assertEquals("  abc", StringUtils.leftPad("abc", 5,
 @Test 
     public void testLeftPad_StringIntString1407() { 
         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); 
         assertEquals(null, StringUtils.leftPad(null, 5, null)); 
         assertEquals("     ", StringUtils.leftPad("", 5, " ")); 
         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); 
         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); 
         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); 
         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); 
         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); 
         assertEquals("  abc", StringUtils.leftPad("abc", 5,
 @Test 
     public void testCenter_StringIntString1408() { 
         assertEquals(null, StringUtils.center(null, 4, null)); 
         assertEquals(null, StringUtils.center(null, -1, " ")); 
         assertEquals(null, StringUtils.center(null, 4, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals("ab", StringUtils.center("ab", 0, " ")); 
         assertEquals("ab", StringUtils.center("ab", -1, " ")); 
         assertEquals("ab", StringUtils.center("ab", 1, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); 
         assertEquals("abcd
 @Test 
     public void testRightPad_StringInt1409() { 
         assertEquals(null, StringUtils.rightPad(null, 5)); 
         assertEquals("     ", StringUtils.rightPad("", 5)); 
         assertEquals("abc  ", StringUtils.rightPad("abc", 5)); 
         assertEquals("abc", StringUtils.rightPad("abc", 2)); 
         assertEquals("abc", StringUtils.rightPad("abc", -1)); 
     } 
  

 @Test 
     public void testCenter_StringIntString1410() { 
         assertEquals(null, StringUtils.center(null, 4, null)); 
         assertEquals(null, StringUtils.center(null, -1, " ")); 
         assertEquals(null, StringUtils.center(null, 4, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals("ab", StringUtils.center("ab", 0, " ")); 
         assertEquals("ab", StringUtils.center("ab", -1, " ")); 
         assertEquals("ab", StringUtils.center("ab", 1, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); 
         assertEquals("abcd
 @Test 
     public void testCenter_StringIntString1411() { 
         assertEquals(null, StringUtils.center(null, 4, null)); 
         assertEquals(null, StringUtils.center(null, -1, " ")); 
         assertEquals(null, StringUtils.center(null, 4, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals("ab", StringUtils.center("ab", 0, " ")); 
         assertEquals("ab", StringUtils.center("ab", -1, " ")); 
         assertEquals("ab", StringUtils.center("ab", 1, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); 
         assertEquals("abcd
 @Test 
     public void testCenter_StringIntString1412() { 
         assertEquals(null, StringUtils.center(null, 4, null)); 
         assertEquals(null, StringUtils.center(null, -1, " ")); 
         assertEquals(null, StringUtils.center(null, 4, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals("ab", StringUtils.center("ab", 0, " ")); 
         assertEquals("ab", StringUtils.center("ab", -1, " ")); 
         assertEquals("ab", StringUtils.center("ab", 1, " ")); 
         assertEquals("    ", StringUtils.center("", 4, " ")); 
         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); 
         assertEquals("abcd
 @Test 
     public void testCaseFunctions1413() { 
         assertEquals(null, StringUtils.upperCase(null)); 
         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.lowerCase(null)); 
         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.capitalize(null)); 
         assertEquals(null, StringUtils.uncapitalize(null)); 
  
         assertEquals("capitalize(empty-string) failed", 
                      "", StringUtils.capitalize("") ); 
         assertEquals("capitalize(single-char-string) failed", 
                 "X", StringUtils.capitalize("x")
 @Test 
     public void testCaseFunctions1414() { 
         assertEquals(null, StringUtils.upperCase(null)); 
         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.lowerCase(null)); 
         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.capitalize(null)); 
         assertEquals(null, StringUtils.uncapitalize(null)); 
  
         assertEquals("capitalize(empty-string) failed", 
                      "", StringUtils.capitalize("") ); 
         assertEquals("capitalize(single-char-string) failed", 
                 "X", StringUtils.capitalize("x")
 @Test 
     public void testCaseFunctions1415() { 
         assertEquals(null, StringUtils.upperCase(null)); 
         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.lowerCase(null)); 
         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.capitalize(null)); 
         assertEquals(null, StringUtils.uncapitalize(null)); 
  
         assertEquals("capitalize(empty-string) failed", 
                      "", StringUtils.capitalize("") ); 
         assertEquals("capitalize(single-char-string) failed", 
                 "X", StringUtils.capitalize("x")
 @Test 
     public void testCaseFunctions1416() { 
         assertEquals(null, StringUtils.upperCase(null)); 
         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.lowerCase(null)); 
         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.capitalize(null)); 
         assertEquals(null, StringUtils.uncapitalize(null)); 
  
         assertEquals("capitalize(empty-string) failed", 
                      "", StringUtils.capitalize("") ); 
         assertEquals("capitalize(single-char-string) failed", 
                 "X", StringUtils.capitalize("x")
 @Test 
     public void testCaseFunctions1417() { 
         assertEquals(null, StringUtils.upperCase(null)); 
         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.lowerCase(null)); 
         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); 
         assertEquals(null, StringUtils.capitalize(null)); 
         assertEquals(null, StringUtils.uncapitalize(null)); 
  
         assertEquals("capitalize(empty-string) failed", 
                      "", StringUtils.capitalize("") ); 
         assertEquals("capitalize(single-char-string) failed", 
                 "X", StringUtils.capitalize("x")
 @Test 
     public void testSwapCase_String1418() { 
         assertEquals(null, StringUtils.swapCase(null)); 
         assertEquals("", StringUtils.swapCase("")); 
         assertEquals("  ", StringUtils.swapCase("  ")); 
          
         assertEquals("i", WordUtils.swapCase("I") ); 
         assertEquals("I", WordUtils.swapCase("i") ); 
         assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123") ); 
         assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123") ); 
         assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123") ); 
         assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123") ); [EOL
 @Test 
     public void testSwapCase_String1419() { 
         assertEquals(null, StringUtils.swapCase(null)); 
         assertEquals("", StringUtils.swapCase("")); 
         assertEquals("  ", StringUtils.swapCase("  ")); 
          
         assertEquals("i", WordUtils.swapCase("I") ); 
         assertEquals("I", WordUtils.swapCase("i") ); 
         assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123") ); 
         assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123") ); 
         assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123") ); 
         assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123") ); [EOL
 @Test 
     public void testIsAlpha1420() { 
         assertFalse(StringUtils.isAlpha(null)); 
         assertFalse(StringUtils.isAlpha("")); 
         assertFalse(StringUtils.isAlpha(" ")); 
         assertTrue(StringUtils.isAlpha("a")); 
         assertTrue(StringUtils.isAlpha("A")); 
         assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertFalse(StringUtils.isAlpha("ham kso")); 
         assertFalse(StringUtils.isAlpha("1")); 
         assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); 
         assertFalse(StringUtils.isAlpha("_")); 
    
 @Test 
     public void testIsAlpha1421() { 
         assertFalse(StringUtils.isAlpha(null)); 
         assertFalse(StringUtils.isAlpha("")); 
         assertFalse(StringUtils.isAlpha(" ")); 
         assertTrue(StringUtils.isAlpha("a")); 
         assertTrue(StringUtils.isAlpha("A")); 
         assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertFalse(StringUtils.isAlpha("ham kso")); 
         assertFalse(StringUtils.isAlpha("1")); 
         assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); 
         assertFalse(StringUtils.isAlpha("_")); 
    
 @Test 
     public void testIsAlphaspace1422() { 
         assertFalse(StringUtils.isAlphaSpace(null)); 
         assertTrue(StringUtils.isAlphaSpace("")); 
         assertTrue(StringUtils.isAlphaSpace(" ")); 
         assertTrue(StringUtils.isAlphaSpace("a")); 
         assertTrue(StringUtils.isAlphaSpace("A")); 
         assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertTrue(StringUtils.isAlphaSpace("ham kso")); 
         assertFalse(StringUtils.isAlphaSpace("1")); 
         assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); 
         assertFalse(StringUtils.isAlpha
 @Test 
     public void testIsAlphanumericSpace1423() { 
         assertFalse(StringUtils.isAlphanumericSpace(null)); 
         assertTrue(StringUtils.isAlphanumericSpace("")); 
         assertTrue(StringUtils.isAlphanumericSpace(" ")); 
         assertTrue(StringUtils.isAlphanumericSpace("a")); 
         assertTrue(StringUtils.isAlphanumericSpace("A")); 
         assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertTrue(StringUtils.isAlphanumericSpace("ham kso")); 
         assertTrue(StringUtils.isAlphanumericSpace("1")); 
         assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL
 @Test 
     public void testIsAlphanumericSpace1424() { 
         assertFalse(StringUtils.isAlphanumericSpace(null)); 
         assertTrue(StringUtils.isAlphanumericSpace("")); 
         assertTrue(StringUtils.isAlphanumericSpace(" ")); 
         assertTrue(StringUtils.isAlphanumericSpace("a")); 
         assertTrue(StringUtils.isAlphanumericSpace("A")); 
         assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertTrue(StringUtils.isAlphanumericSpace("ham kso")); 
         assertTrue(StringUtils.isAlphanumericSpace("1")); 
         assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL
 @Test 
     public void testIsAsciiPrintable_String1425() { 
         assertFalse(StringUtils.isAsciiPrintable(null)); 
         assertTrue(StringUtils.isAsciiPrintable("")); 
         assertTrue(StringUtils.isAsciiPrintable(" ")); 
         assertTrue(StringUtils.isAsciiPrintable("a")); 
         assertTrue(StringUtils.isAsciiPrintable("A")); 
         assertTrue(StringUtils.isAsciiPrintable("1")); 
         assertTrue(StringUtils.isAsciiPrintable("Ceki")); 
         assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); 
         assertTrue(StringUtils.isAsciiPrintable("1000")); 
         assertTrue(StringUtils.isAsciiPrintable("10 00")); 

 @Test 
     public void testIsNumeric1426() { 
         assertFalse(StringUtils.isNumeric(null)); 
         assertFalse(StringUtils.isNumeric("")); 
         assertFalse(StringUtils.isNumeric(" ")); 
         assertFalse(StringUtils.isNumeric("a")); 
         assertFalse(StringUtils.isNumeric("A")); 
         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertFalse(StringUtils.isNumeric("ham kso")); 
         assertTrue(StringUtils.isNumeric("1")); 
         assertTrue(StringUtils.isNumeric("1000")); 
         assertFalse(StringUtils.isNumeric("2.3")); 
         assertFalse(StringUtils
 @Test 
     public void testIsNumeric1427() { 
         assertFalse(StringUtils.isNumeric(null)); 
         assertFalse(StringUtils.isNumeric("")); 
         assertFalse(StringUtils.isNumeric(" ")); 
         assertFalse(StringUtils.isNumeric("a")); 
         assertFalse(StringUtils.isNumeric("A")); 
         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertFalse(StringUtils.isNumeric("ham kso")); 
         assertTrue(StringUtils.isNumeric("1")); 
         assertTrue(StringUtils.isNumeric("1000")); 
         assertFalse(StringUtils.isNumeric("2.3")); 
         assertFalse(StringUtils
 @Test 
     public void testIsNumeric1428() { 
         assertFalse(StringUtils.isNumeric(null)); 
         assertFalse(StringUtils.isNumeric("")); 
         assertFalse(StringUtils.isNumeric(" ")); 
         assertFalse(StringUtils.isNumeric("a")); 
         assertFalse(StringUtils.isNumeric("A")); 
         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertFalse(StringUtils.isNumeric("ham kso")); 
         assertTrue(StringUtils.isNumeric("1")); 
         assertTrue(StringUtils.isNumeric("1000")); 
         assertFalse(StringUtils.isNumeric("2.3")); 
         assertFalse(StringUtils
 @Test 
     public void testIsNumericSpace1429() { 
         assertFalse(StringUtils.isNumericSpace(null)); 
         assertTrue(StringUtils.isNumericSpace("")); 
         assertTrue(StringUtils.isNumericSpace(" ")); 
         assertFalse(StringUtils.isNumericSpace("a")); 
         assertFalse(StringUtils.isNumericSpace("A")); 
         assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); 
         assertFalse(StringUtils.isNumericSpace("ham kso")); 
         assertTrue(StringUtils.isNumericSpace("1")); 
         assertTrue(StringUtils.isNumericSpace("1000")); 
         assertFalse(StringUtils.isNumericSpace("2.3")); 
   
 @Test 
     public void testIsWhitespace1430() { 
         assertFalse(StringUtils.isWhitespace(null)); 
         assertTrue(StringUtils.isWhitespace("")); 
         assertTrue(StringUtils.isWhitespace(" ")); 
         assertTrue(StringUtils.isWhitespace("\t \n \t")); 
         assertFalse(StringUtils.isWhitespace("\t aa\n \t")); 
         assertTrue(StringUtils.isWhitespace(" ")); 
         assertFalse(StringUtils.isWhitespace(" a ")); 
         assertFalse(StringUtils.isWhitespace("a  ")); 
         assertFalse(StringUtils.isWhitespace("  a")); 
         assertFalse(StringUtils.isWhitespace("aba")); 
         assertTrue(StringUtils.isWh
 @Test 
     public void testIsWhitespace1431() { 
         assertFalse(StringUtils.isWhitespace(null)); 
         assertTrue(StringUtils.isWhitespace("")); 
         assertTrue(StringUtils.isWhitespace(" ")); 
         assertTrue(StringUtils.isWhitespace("\t \n \t")); 
         assertFalse(StringUtils.isWhitespace("\t aa\n \t")); 
         assertTrue(StringUtils.isWhitespace(" ")); 
         assertFalse(StringUtils.isWhitespace(" a ")); 
         assertFalse(StringUtils.isWhitespace("a  ")); 
         assertFalse(StringUtils.isWhitespace("  a")); 
         assertFalse(StringUtils.isWhitespace("aba")); 
         assertTrue(StringUtils.isWh
 @Test 
     public void testIsAllLowerCase1432() { 
         assertFalse(StringUtils.isAllLowerCase(null)); 
         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); 
         assertTrue(StringUtils.isAllLowerCase("abc")); 
         assertFalse(StringUtils.isAllLowerCase("abc ")); 
         assertFalse(StringUtils.isAllLowerCase("abC")); 
     } 
  
     /** 
      * Test for {@link StringUtils#isAllUpperCase(CharSequence)}. 
      */ 

 @Test 
     public void testIsAllLowerCase1433() { 
         assertFalse(StringUtils.isAllLowerCase(null)); 
         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); 
         assertTrue(StringUtils.isAllLowerCase("abc")); 
         assertFalse(StringUtils.isAllLowerCase("abc ")); 
         assertFalse(StringUtils.isAllLowerCase("abC")); 
     } 
  
     /** 
      * Test for {@link StringUtils#isAllUpperCase(CharSequence)}. 
      */ 

 @Test 
     public void testIsAllUpperCase1434() { 
         assertFalse(StringUtils.isAllUpperCase(null)); 
         assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); 
         assertTrue(StringUtils.isAllUpperCase("ABC")); 
         assertFalse(StringUtils.isAllUpperCase("ABC ")); 
         assertFalse(StringUtils.isAllUpperCase("aBC")); 
     } 
  

 @Test 
     public void testDefault_StringString1435() { 
         assertEquals("NULL", StringUtils.defaultString(null, "NULL")); 
         assertEquals("", StringUtils.defaultString("", "NULL")); 
         assertEquals("abc", StringUtils.defaultString("abc", "NULL")); 
     } 
  

 @Test 
     public void testAbbreviate_StringInt1436() { 
         assertEquals(null, StringUtils.abbreviate(null, 10)); 
         assertEquals("", StringUtils.abbreviate("", 10)); 
         assertEquals("short", StringUtils.abbreviate("short", 10)); 
         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); 
  
         final String raspberry = "raspberry peach"; 
         assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); 
         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); 
         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); 
         assertEquals("abc...", StringUtils.abbreviate("
 @Test 
     public void testAbbreviate_StringIntInt1437() { 
         assertEquals(null, StringUtils.abbreviate(null, 10, 12)); 
         assertEquals("", StringUtils.abbreviate("", 0, 10)); 
         assertEquals("", StringUtils.abbreviate("", 2, 10)); 
          
         try { 
             @SuppressWarnings("unused") 
             final 
             String res = StringUtils.abbreviate("abcdefghij", 0, 3); 
             fail("StringUtils.abbreviate expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
                 // empty 
         }     
 @Test 
     public void testAbbreviate_StringInt1438() { 
         assertEquals(null, StringUtils.abbreviate(null, 10)); 
         assertEquals("", StringUtils.abbreviate("", 10)); 
         assertEquals("short", StringUtils.abbreviate("short", 10)); 
         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); 
  
         final String raspberry = "raspberry peach"; 
         assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); 
         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); 
         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); 
         assertEquals("abc...", StringUtils.abbreviate("
 @Test 
     public void testAbbreviate_StringIntInt1439() { 
         assertEquals(null, StringUtils.abbreviate(null, 10, 12)); 
         assertEquals("", StringUtils.abbreviate("", 0, 10)); 
         assertEquals("", StringUtils.abbreviate("", 2, 10)); 
          
         try { 
             @SuppressWarnings("unused") 
             final 
             String res = StringUtils.abbreviate("abcdefghij", 0, 3); 
             fail("StringUtils.abbreviate expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
                 // empty 
         }     
 @Test 
     public void testAbbreviate_StringIntInt1440() { 
         assertEquals(null, StringUtils.abbreviate(null, 10, 12)); 
         assertEquals("", StringUtils.abbreviate("", 0, 10)); 
         assertEquals("", StringUtils.abbreviate("", 2, 10)); 
          
         try { 
             @SuppressWarnings("unused") 
             final 
             String res = StringUtils.abbreviate("abcdefghij", 0, 3); 
             fail("StringUtils.abbreviate expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
                 // empty 
         }     
 @Test 
     public void testRepeat_StringStringInt1441() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testRepeat_StringStringInt1442() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testRepeat_StringStringInt1443() { 
         assertEquals(null, StringUtils.repeat(null, null, 2)); 
         assertEquals(null, StringUtils.repeat(null, "x", 2)); 
         assertEquals("", StringUtils.repeat("", null, 2)); 
  
         assertEquals("", StringUtils.repeat("ab", "", 0)); 
         assertEquals("", StringUtils.repeat("", "", 2)); 
  
         assertEquals("xx", StringUtils.repeat("", "x", 3)); 
  
         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); 
     } 
  

 @Test 
     public void testDifference_StringString1444() { 
         assertEquals(null, StringUtils.difference(null, null)); 
         assertEquals("", StringUtils.difference("", "")); 
         assertEquals("abc", StringUtils.difference("", "abc")); 
         assertEquals("", StringUtils.difference("abc", "")); 
         assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); 
         assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); 
         assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); 
         assertEquals("", StringUtils.difference("abc", "abc")); 
         assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); 

 @Test 
     public void testDifferenceAt_StringString1445() { 
         assertEquals(-1, StringUtils.indexOfDifference(null, null)); 
         assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); 
         assertEquals(-1, StringUtils.indexOfDifference("", "")); 
         assertEquals(0, StringUtils.indexOfDifference("", "abc")); 
         assertEquals(0, StringUtils.indexOfDifference("abc", "")); 
         assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); 
         assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); 
         assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); 
         assertEquals(0, StringUtils.indexOfDifference("i am a robot
 @Test 
     public void testGetCommonPrefix_StringArray1446() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1447() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1448() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1449() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1450() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1451() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1452() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1453() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1454() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1455() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetCommonPrefix_StringArray1456() { 
         assertEquals("", StringUtils.getCommonPrefix((String[])null)); 
         assertEquals("", StringUtils.getCommonPrefix()); 
         assertEquals("abc", StringUtils.getCommonPrefix("abc")); 
         assertEquals("", StringUtils.getCommonPrefix(null, null)); 
         assertEquals("", StringUtils.getCommonPrefix("", "")); 
         assertEquals("", StringUtils.getCommonPrefix("", null)); 
         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); 
         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); 
         assertEquals("", StringUtils.getCommonPrefix("", "abc")); 
         assertEquals("", StringUtils.getCommonPrefix
 @Test 
     public void testGetLevenshteinDistance_StringString1457() { 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); 
         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); 
         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); 
  
 @Test 
     public void testGetLevenshteinDistance_StringString1458() { 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); 
         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); 
         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); 
  
 @Test 
     public void testGetLevenshteinDistance_StringString1459() { 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); 
         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); 
         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); 
  
 @Test 
     public void testGetLevenshteinDistance_StringString1460() { 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); 
         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); 
         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); 
  
 @Test 
     public void testGetLevenshteinDistance_StringString1461() { 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); 
         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); 
         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); 
  
 @Test 
     public void testGetLevenshteinDistance_StringString1462() { 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); 
         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); 
         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); 
         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); 
         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); 
  
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1463() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1464() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1465() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1466() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1467() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1468() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1469() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testGetLevenshteinDistance_StringStringInt1470() { 
         // empty strings 
         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); 
         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); 
  
         // unequal strings, zero threshold 
         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); 
         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); 
      
         // equal strings 
         assertEquals(
 @Test 
     public void testPrependIfMissing1471() { 
         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); 
         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); 
         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); 
         assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc","xyz")); 
         assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz")); 
         assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz")); 
  
         assertEquals("prependIfMissing(null,
 @Test 
     public void testRemoveEndIgnoreCase1472() { 
         // StringUtils.removeEndIgnoreCase("", *)        = "" 
         assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); 
         assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); 
         assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); 
          
         // StringUtils.removeEnd(*, null)      = * 
         assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); 
         assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); 
         assertEqu
 @Test 
     public void testNormalizeSpace1473() { 
         assertEquals(null, StringUtils.normalizeSpace(null)); 
         assertEquals("", StringUtils.normalizeSpace("")); 
         assertEquals("", StringUtils.normalizeSpace(" ")); 
         assertEquals("", StringUtils.normalizeSpace("\t")); 
         assertEquals("", StringUtils.normalizeSpace("\n"));         
         assertEquals("", StringUtils.normalizeSpace("\u0009")); 
         assertEquals("", StringUtils.normalizeSpace("\u000B")); 
         assertEquals("", StringUtils.normalizeSpace("\u000C")); 
         assertEquals("", StringUtils.normalizeSpace("\u001C")); 
         assertEquals("", StringUtils.normalizeSpace("\u001D")
 @Test 
     public void testEndsWithAny1474() { 
         assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String)null)); 
         assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] {"abc"})); 
         assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String)null)); 
         assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] {""})); 
         assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] {"xyz"})); 
         assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[]
 @Test 
     public void testAppendIfMissingIgnoreCase1475() { 
         assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null)); 
         assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null)); 
         assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz")); 
         assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz")); 
         assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz","xyz")); 
         assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ","xyz")); [EOL
 @Test 
     public void testAppendIfMissingIgnoreCase1476() { 
         assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null)); 
         assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null)); 
         assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz")); 
         assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz")); 
         assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz","xyz")); 
         assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ","xyz")); [EOL
 @Test 
     public void testPrependIfMissing1477() { 
         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); 
         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); 
         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); 
         assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc","xyz")); 
         assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz")); 
         assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz")); 
  
         assertEquals("prependIfMissing(null,
 lang3/concurrent/AtomicSafeInitializer.java
 @Test 
     public void testGetConcurrent1478() throws ConcurrentException, 
             InterruptedException { 
         final ConcurrentInitializer<Object> initializer = createInitializer(); 
         final int threadCount = 20; 
         final CountDownLatch startLatch = new CountDownLatch(1); 
         class GetThread extends Thread { 
             Object object; 
  
             @Override 
             public void run() { 
                 try { 
                     // wait until all threads are ready for maximum parallelism 
                     startLatch.await(); 
                     // access the initializer 
 
 @Test 
     public void testGetConcurrent1479() throws ConcurrentException, 
             InterruptedException { 
         final ConcurrentInitializer<Object> initializer = createInitializer(); 
         final int threadCount = 20; 
         final CountDownLatch startLatch = new CountDownLatch(1); 
         class GetThread extends Thread { 
             Object object; 
  
             @Override 
             public void run() { 
                 try { 
                     // wait until all threads are ready for maximum parallelism 
                     startLatch.await(); 
                     // access the initializer 
 
 lang3/mutable/MutableInt.java
 @Test 
     public void testSubtractValueObject1480() { 
         final MutableInt mutNum = new MutableInt(1); 
         mutNum.subtract(Integer.valueOf(1)); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testCompareTo1481() { 
         final MutableInt mutNum = new MutableInt(0); 
  
         assertEquals(0, mutNum.compareTo(new MutableInt(0))); 
         assertEquals(+1, mutNum.compareTo(new MutableInt(-1))); 
         assertEquals(-1, mutNum.compareTo(new MutableInt(1))); 
     } 
  

 @Test 
     public void testToString1482() { 
         assertEquals("0", new MutableInt(0).toString()); 
         assertEquals("10", new MutableInt(10).toString()); 
         assertEquals("-123", new MutableInt(-123).toString()); 
     } 
  
 } 

 lang3/time/FastDateFormat.java
 @Test 
     public void testCheckDefaults1483() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

 @Test 
     public void testCheckDefaults1484() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

 @Test 
     public void testCheckDefaults1485() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

 @Test 
     public void testTimeDateDefaults1486() { 
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG,
 @Test 
     public void testTimeDateDefaults1487() { 
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG,
 @Test 
     public void testToStringContainsName1488() { 
         final DateParser parser= getInstance(YMD_SLASH); 
         assertTrue(parser.toString().startsWith("FastDate")); 
     } 
  

 @Test 
     public void testTruncateDate1489() throws Exception { 
         final int calendarField = Calendar.DATE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); 
         baseTruncateTest(targetDateDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testTruncateDate1490() throws Exception { 
         final int calendarField = Calendar.DATE; 
         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); 
         baseTruncateTest(targetDateDate, lastTruncateDate, calendarField); 
     } 
      
     /** 
      * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

 @Test 
     public void testLocales_LongNoEra_BC1491() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testCheckDefaults1492() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

 @Test 
     public void testEquals1493() { 
         final DatePrinter printer1= getInstance(YYYY_MM_DD); 
         final DatePrinter printer2= getInstance(YYYY_MM_DD); 
  
         assertEquals(printer1, printer2); 
         assertEquals(printer1.hashCode(), printer2.hashCode());         
  
         assertFalse(printer1.equals(new Object())); 
     } 
      

 lang3/time/FormatCache.java
 @Test 
     public void testTimeZoneMatches1494() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1495() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void test_changeDefault_Locale_DateInstance1496() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
      
 @Test 
     public void testCheckDefaults1497() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

 @Test 
     public void testCheckDefaults1498() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

 @Test 
     public void testTimeDefaults1499() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

 @Test 
     public void testTimeDefaults1500() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

 @Test 
     public void testTimeDefaults1501() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

 lang3/ObjectUtils.java
 @Test 
     public void testNotEqual1502() { 
         assertFalse("ObjectUtils.notEqual(null, null) returned false", ObjectUtils.notEqual(null, null)); 
         assertTrue("ObjectUtils.notEqual(\"foo\", null) returned true", ObjectUtils.notEqual(FOO, null)); 
         assertTrue("ObjectUtils.notEqual(null, \"bar\") returned true", ObjectUtils.notEqual(null, BAR)); 
         assertTrue("ObjectUtils.notEqual(\"foo\", \"bar\") returned true", ObjectUtils.notEqual(FOO, BAR)); 
         assertFalse("ObjectUtils.notEqual(\"foo\", \"foo\") returned false", ObjectUtils.notEqual(FOO, FOO)); 
     } 
  

 @Test(expected=IllegalArgumentException.class) 
     public void testIdentityToString1503() { 
         assertEquals(null, ObjectUtils.identityToString(null)); 
     } 
  

 @Test(expected=IllegalArgumentException.class) 
     public void testIdentityToString1504() { 
         assertEquals(null, ObjectUtils.identityToString(null)); 
     } 
  

 @Test 
     public void testToString_Object1505() { 
         assertEquals("", ObjectUtils.toString((Object) null) ); 
         assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) ); 
     } 
              

 @Test 
     public void testMax1506() { 
         final Calendar calendar = Calendar.getInstance(); 
         final Date nonNullComparable1 = calendar.getTime(); 
         final Date nonNullComparable2 = calendar.getTime(); 
         final String[] nullAray = null; 
          
         calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 ); 
         final Date minComparable = calendar.getTime(); 
          
         assertNotSame( nonNullComparable1, nonNullComparable2 ); 
          
         assertNull(ObjectUtils.max( (String) null ) ); 
         assertNull(ObjectUtils.max( nullAray ) ); 
         assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) );
 @Test(expected = NullPointerException.class) 
     public void testComparatorMedian_nullItems1507() { 
         ObjectUtils.median(new CharSequenceComparator(), (CharSequence[]) null); 
     } 
  

 @Test 
     public void testMode1508() { 
         assertNull(ObjectUtils.mode((Object[]) null)); 
         assertNull(ObjectUtils.mode()); 
         assertNull(ObjectUtils.mode("foo", "bar", "baz")); 
         assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); 
         assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo")); 
         assertEquals(Integer.valueOf(9), 
             ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9))); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#clone(Object)} with a cloneable object. 
      */ 

 @Test 
     public void testPossibleCloneOfNotCloneable1509() { 
         final String string = new String("apache"); 
         assertSame(string, ObjectUtils.cloneIfPossible(string)); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object. 
      */ 

 @Test 
     public void testCloneOfPrimitiveArray1510() { 
         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. 
      */ 

 @Test 
     public void testCloneOfPrimitiveArray1511() { 
         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. 
      */ 

 @Test 
     public void testCloneOfPrimitiveArray1512() { 
         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. 
      */ 

 @Test 
     public void testCloneOfPrimitiveArray1513() { 
         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. 
      */ 

 @Test 
     public void testCloneOfCloneable1514() { 
         final CloneableString string = new CloneableString("apache"); 
         final CloneableString stringClone = ObjectUtils.clone(string); 
         assertEquals("apache", stringClone.getValue()); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object. 
      */ 

 @Test 
     public void testPossibleCloneOfNotCloneable1515() { 
         final String string = new String("apache"); 
         assertSame(string, ObjectUtils.cloneIfPossible(string)); 
     } 
  
     /** 
      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object. 
      */ 

 @Test 
     public void testConstMethods1516() { 
  
         // To truly test the CONST() method, we'd want to look in the 
         // bytecode to see if the literals were folded into the 
         // class, or if the bytecode kept the method call. 
  
         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); 
         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); 
         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); 
         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); 
         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); 
         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); 
   
 @Test(expected=NullPointerException.class) 
     public void testToByte1517() { 
         Byte((byte) 0; 
         try { 
             ObjectUtils.CONST(char) 1); 
         } catch (final IllegalArgumentException ex) {} 
     } 
  

 @Test 
     public void testConstMethods1518() { 
  
         // To truly test the CONST() method, we'd want to look in the 
         // bytecode to see if the literals were folded into the 
         // class, or if the bytecode kept the method call. 
  
         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); 
         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); 
         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); 
         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); 
         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); 
         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); 
   
 @Test 
     public void testConstMethods1519() { 
  
         // To truly test the CONST() method, we'd want to look in the 
         // bytecode to see if the literals were folded into the 
         // class, or if the bytecode kept the method call. 
  
         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); 
         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); 
         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); 
         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); 
         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); 
         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); 
   
 lang3/CharSet.java
 @Test 
     public void testGetInstance1520() { 
         assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null)); 
         assertSame(CharSet.EMPTY, CharSet.getInstance("")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z")); 
         assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z")); 
         assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z")); 
         assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetInstance1521() { 
         assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null)); 
         assertSame(CharSet.EMPTY, CharSet.getInstance("")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z")); 
         assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z")); 
         assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z")); 
         assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetInstance1522() { 
         assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null)); 
         assertSame(CharSet.EMPTY, CharSet.getInstance("")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z")); 
         assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z")); 
         assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z")); 
         assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetInstance1523() { 
         assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null)); 
         assertSame(CharSet.EMPTY, CharSet.getInstance("")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z")); 
         assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z")); 
         assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z")); 
         assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetInstance1524() { 
         assertSame(CharSet.EMPTY, CharSet.getInstance( (String) null)); 
         assertSame(CharSet.EMPTY, CharSet.getInstance("")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("a-zA-Z")); 
         assertSame(CharSet.ASCII_ALPHA, CharSet.getInstance("A-Za-z")); 
         assertSame(CharSet.ASCII_ALPHA_LOWER, CharSet.getInstance("a-z")); 
         assertSame(CharSet.ASCII_ALPHA_UPPER, CharSet.getInstance("A-Z")); 
         assertSame(CharSet.ASCII_NUMERIC, CharSet.getInstance("0-9")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testEquals_Object1525() { 
         final CharSet abc = CharSet.getInstance("abc"); 
         final CharSet abc2 = CharSet.getInstance("abc"); 
         final CharSet atoc = CharSet.getInstance("a-c"); 
         final CharSet atoc2 = CharSet.getInstance("a-c"); 
         final CharSet notatoc = CharSet.getInstance("^a-c"); 
         final CharSet notatoc2 = CharSet.getInstance("^a-c"); 
          
         assertFalse(abc.equals(null)); 
          
         assertTrue(abc.equals(abc)); 
         assertTrue(abc.equals(abc2)); 
         assertFalse(abc.equals(atoc)); 
         assertFalse
 lang3/CharSequenceUtils.java
 @Test 
     public void testSubstring_StringInt1526() { 
         assertEquals(null, StringUtils.substring(null, 0)); 
         assertEquals("", StringUtils.substring("", 0)); 
         assertEquals("", StringUtils.substring("", 2)); 
          
         assertEquals("", StringUtils.substring(SENTENCE, 80)); 
         assertEquals(BAZ, StringUtils.substring(SENTENCE, 8)); 
         assertEquals(BAZ, StringUtils.substring(SENTENCE, -3)); 
         assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0)); 
         assertEquals("abc", StringUtils.substring("abc", -4)); 
         assertEquals("abc", StringUtils.substring("abc", -3)); 
         assertEquals("
 @Test 
     public void testLastIndexOf_char1527() { 
         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); 
         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); 
         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); 
         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); 
  
         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); 
     } 
  

 @Test 
     public void testLastIndexOf_char1528() { 
         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); 
         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); 
         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); 
         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); 
  
         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); 
     } 
  

 @Test 
     public void testEquals1529() { 
         final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; 
         assertTrue(StringUtils.equals(null, null)); 
         assertTrue(StringUtils.equals(fooCs, fooCs)); 
         assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); 
         assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); 
         assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); 
         assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); 
         assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); 
         assertFalse(StringUtils.equals(foo
 @Test 
     public void testEquals1530() { 
         final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; 
         assertTrue(StringUtils.equals(null, null)); 
         assertTrue(StringUtils.equals(fooCs, fooCs)); 
         assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); 
         assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); 
         assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); 
         assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); 
         assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); 
         assertFalse(StringUtils.equals(foo
 lang3/exception/CloneFailedException.java
 lang3/exception/ContextedRuntimeException.java
 @Test 
     public void testJavaSerialization1531() { 
         exceptionContext.setContextValue("test Poorly written obj", "serializable replacement"); 
          
         final T clone = SerializationUtils.deserialize(SerializationUtils.serialize(exceptionContext)); 
         assertEquals(exceptionContext.getFormattedExceptionMessage(null), clone.getFormattedExceptionMessage(null)); 
     } 
 } 

 @Test 
     public void testGetContextValues1532() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

 @Test 
     public void testContextedException1533() { 
         exceptionContext = new ContextedException(); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(StringUtils.isEmpty(message)); 
     } 
  

 lang3/math/IEEE754rUtils.java
 @Test 
     public void testEnforceExceptions1534() { 
         try { 
             IEEE754rUtils.min( (float[]) null); 
             fail("IllegalArgumentException expected for null input"); 
         } catch(final IllegalArgumentException iae) { /* expected */ } 
  
         try { 
             IEEE754rUtils.min(new float[0]); 
             fail("IllegalArgumentException expected for empty input"); 
         } catch(final IllegalArgumentException iae) { /* expected */ } 
  
         try { 
             IEEE754rUtils.max( (float[]) null); 
             fail("IllegalArgumentException expected for null input"); 
         } catch(final IllegalArgumentException
 @Test 
     public void testLang3811535() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811536() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811537() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811538() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811539() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811540() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811541() { 
         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); 
         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); 
         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); 
  
         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; 
         assertTrue(Double.isNaN(NumberUtils.max(a))); 
         assertTrue(Double.isNaN(NumberUtils.min(a))); 
  
         final double[] b =
 @Test 
     public void testEnforceExceptions1542() { 
         try { 
             IEEE754rUtils.min( (float[]) null); 
             fail("IllegalArgumentException expected for null input"); 
         } catch(final IllegalArgumentException iae) { /* expected */ } 
  
         try { 
             IEEE754rUtils.min(new float[0]); 
             fail("IllegalArgumentException expected for empty input"); 
         } catch(final IllegalArgumentException iae) { /* expected */ } 
  
         try { 
             IEEE754rUtils.max( (float[]) null); 
             fail("IllegalArgumentException expected for null input"); 
         } catch(final IllegalArgumentException
 @Test 
     public void testLang3811543() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811544() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2,2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN))); 
     } 
  

 @Test 
     public void testLang3811545() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); 
  
         final double[] a = new double
 @Test 
     public void testLang3811546() { 
         assertEquals(1.2, IEEE754rUtils.min(1.2,2, 2.5, Double.NaN), 0.01); 
         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); 
         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); 
         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); 
         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); 
         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN))); 
     } 
  

 lang3/concurrent/CallableBackgroundInitializer.java
 lang3/CharSetUtils.java
 @Test 
     public void testSqueeze_StringString1547() { 
         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); 
         assertEquals(null, CharSetUtils.squeeze(null, "")); 
          
         assertEquals("", CharSetUtils.squeeze("", (String) null)); 
         assertEquals("", CharSetUtils.squeeze("", "")); 
         assertEquals("", CharSetUtils.squeeze("", "a-e")); 
          
         assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); 
         assertEquals("hello", CharSetUtils.squeeze("hello", "")); 
         assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); 
       
 @Test 
     public void testSqueeze_StringString1548() { 
         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); 
         assertEquals(null, CharSetUtils.squeeze(null, "")); 
          
         assertEquals("", CharSetUtils.squeeze("", (String) null)); 
         assertEquals("", CharSetUtils.squeeze("", "")); 
         assertEquals("", CharSetUtils.squeeze("", "a-e")); 
          
         assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); 
         assertEquals("hello", CharSetUtils.squeeze("hello", "")); 
         assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); 
       
 @Test 
     public void testContainsAny_StringString1549() { 
         assertFalse(CharSetUtils.containsAny(null, (String) null)); 
         assertFalse(CharSetUtils.containsAny(null, "")); 
          
         assertFalse(CharSetUtils.containsAny("", (String) null)); 
         assertFalse(CharSetUtils.containsAny("", "")); 
         assertFalse(CharSetUtils.containsAny("", "a-e")); 
          
         assertFalse(CharSetUtils.containsAny("hello", (String) null)); 
         assertFalse(CharSetUtils.containsAny("hello", "")); 
         assertTrue(CharSetUtils.containsAny("hello", "a-e")); 
         assertTrue(CharSetUtils.containsAny("hello", "l-p"));
 @Test 
     public void testContainsAny_StringString1550() { 
         assertFalse(CharSetUtils.containsAny(null, (String) null)); 
         assertFalse(CharSetUtils.containsAny(null, "")); 
          
         assertFalse(CharSetUtils.containsAny("", (String) null)); 
         assertFalse(CharSetUtils.containsAny("", "")); 
         assertFalse(CharSetUtils.containsAny("", "a-e")); 
          
         assertFalse(CharSetUtils.containsAny("hello", (String) null)); 
         assertFalse(CharSetUtils.containsAny("hello", "")); 
         assertTrue(CharSetUtils.containsAny("hello", "a-e")); 
         assertTrue(CharSetUtils.containsAny("hello", "l-p"));
 @Test 
     public void testCount_StringString1551() { 
         assertEquals(0, CharSetUtils.count(null, (String) null)); 
         assertEquals(0, CharSetUtils.count(null, "")); 
          
         assertEquals(0, CharSetUtils.count("", (String) null)); 
         assertEquals(0, CharSetUtils.count("", "")); 
         assertEquals(0, CharSetUtils.count("", "a-e")); 
          
         assertEquals(0, CharSetUtils.count("hello", (String) null)); 
         assertEquals(0, CharSetUtils.count("hello", "")); 
         assertEquals(1, CharSetUtils.count("hello", "a-e")); 
         assertEquals(3, CharSetUtils.count("hello
 @Test 
     public void testCount_StringString1552() { 
         assertEquals(0, CharSetUtils.count(null, (String) null)); 
         assertEquals(0, CharSetUtils.count(null, "")); 
          
         assertEquals(0, CharSetUtils.count("", (String) null)); 
         assertEquals(0, CharSetUtils.count("", "")); 
         assertEquals(0, CharSetUtils.count("", "a-e")); 
          
         assertEquals(0, CharSetUtils.count("hello", (String) null)); 
         assertEquals(0, CharSetUtils.count("hello", "")); 
         assertEquals(1, CharSetUtils.count("hello", "a-e")); 
         assertEquals(3, CharSetUtils.count("hello
 @Test 
     public void testKeep_StringString1553() { 
         assertEquals(null, CharSetUtils.keep(null, (String) null)); 
         assertEquals(null, CharSetUtils.keep(null, "")); 
          
         assertEquals("", CharSetUtils.keep("", (String) null)); 
         assertEquals("", CharSetUtils.keep("", "")); 
         assertEquals("", CharSetUtils.keep("", "a-e")); 
          
         assertEquals("", CharSetUtils.keep("hello", (String) null)); 
         assertEquals("", CharSetUtils.keep("hello", "")); 
         assertEquals("", CharSetUtils.keep("hello", "xyz")); 
         assertEquals("hello", CharSetUtils.keep("hello", "a-z"));
 @Test 
     public void testKeep_StringString1554() { 
         assertEquals(null, CharSetUtils.keep(null, (String) null)); 
         assertEquals(null, CharSetUtils.keep(null, "")); 
          
         assertEquals("", CharSetUtils.keep("", (String) null)); 
         assertEquals("", CharSetUtils.keep("", "")); 
         assertEquals("", CharSetUtils.keep("", "a-e")); 
          
         assertEquals("", CharSetUtils.keep("hello", (String) null)); 
         assertEquals("", CharSetUtils.keep("hello", "")); 
         assertEquals("", CharSetUtils.keep("hello", "xyz")); 
         assertEquals("hello", CharSetUtils.keep("hello", "a-z"));
 @Test 
     public void testDelete_StringString1555() { 
         assertEquals(null, CharSetUtils.delete(null, (String) null)); 
         assertEquals(null, CharSetUtils.delete(null, "")); 
          
         assertEquals("", CharSetUtils.delete("", (String) null)); 
         assertEquals("", CharSetUtils.delete("", "")); 
         assertEquals("", CharSetUtils.delete("", "a-e")); 
          
         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); 
         assertEquals("hello", CharSetUtils.delete("hello", "")); 
         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); 
         assertEquals("he", CharSetUtils.delete("hello", "
 @Test 
     public void testSqueeze_StringString1556() { 
         assertEquals(null, CharSetUtils.delete(null, (String) null)); 
         assertEquals(null, CharSetUtils.delete(null, "")); 
          
         assertEquals("", CharSetUtils.delete("", (String) null)); 
         assertEquals("", CharSetUtils.delete("", "")); 
         assertEquals("", CharSetUtils.delete("", "a-e")); 
          
         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); 
         assertEquals("hello", CharSetUtils.delete("hello", "")); 
         assertEquals("hello", CharSetUtils.delete("hello", "a-e")); 
     } 
      

 @Test 
     public void testDelete_StringString1557() { 
         assertEquals(null, CharSetUtils.delete(null, (String) null)); 
         assertEquals(null, CharSetUtils.delete(null, "")); 
          
         assertEquals("", CharSetUtils.delete("", (String) null)); 
         assertEquals("", CharSetUtils.delete("", "")); 
         assertEquals("", CharSetUtils.delete("", "a-e")); 
          
         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); 
         assertEquals("hello", CharSetUtils.delete("hello", "")); 
         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); 
         assertEquals("he", CharSetUtils.delete("hello", "
 lang3/tuple/Triple.java
 @Test 
     public void testTripleOf1558() throws Exception { 
         final ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, "foo", Boolean.FALSE); 
         assertEquals(0, triple.left.intValue()); 
         assertEquals(0, triple.getLeft().intValue()); 
         assertEquals("foo", triple.middle); 
         assertEquals("foo", triple.getMiddle()); 
         assertEquals(Boolean.FALSE, triple.right); 
         assertEquals(Boolean.FALSE, triple.getRight()); 
         final ImmutableTriple<Object, String, Boolean> triple2 = ImmutableTriple.of(null, "bar", Boolean.TRUE); 
         assertNull(triple2.left); 
         assertNull(triple2.getLeft()); 
         assertEquals("bar", triple2.
 @Test 
     public void testEquals1559() throws Exception { 
         assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); 
         assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); 
         assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); 
  
         final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); 
         assertTrue(p.equals(p)); 
         assertFalse(p.equals(new Object())); 
     } 
  

 @Test 
     public void testEquals1560() throws Exception { 
         assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); 
         assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); 
         assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); 
  
         final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); 
         assertTrue(p.equals(p)); 
         assertFalse(p.equals(new Object())); 
     } 
  

 @Test 
     public void testEquals1561() throws Exception { 
         assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); 
         assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); 
         assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); 
  
         final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); 
         assertTrue(p.equals(p)); 
         assertFalse(p.equals(new Object())); 
     } 
  

 @Test 
     public void testToString1562() throws Exception { 
         final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); 
         assertEquals("(Key,Something,Value)", triple.toString()); 
     } 
  

 lang3/text/translate/UnicodeUnescaper.java
 @Test 
     public void testUuuuu1563() { 
         final UnicodeUnescaper uu = new UnicodeUnescaper(); 
  
         final String input = "\\uuuuuuuu0047"; 
         final String result = uu.translate(input); 
         assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); 
     } 
  

 lang3/concurrent/TimedSemaphore.java
 @Test(expected = IllegalStateException.class) 
     public void testPassAfterShutdown1564() throws InterruptedException { 
         final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); 
         semaphore.shutdown(); 
         semaphore.acquire(); 
     } 
  
     /** 
      * Tests a bigger number of invocations that span multiple periods. The 
      * period is set to a very short time. A background thread calls the 
      * semaphore a large number of times. While it runs at last one end of a 
      * period should be reached. 
      */ 

 @Test(expected = IllegalStateException.class) 
     public void testPassAfterShutdown1565() throws InterruptedException { 
         final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); 
         semaphore.shutdown(); 
         semaphore.acquire(); 
     } 
  
     /** 
      * Tests a bigger number of invocations that span multiple periods. The 
      * period is set to a very short time. A background thread calls the 
      * semaphore a large number of times. While it runs at last one end of a 
      * period should be reached. 
      */ 

 @Test 
     public void testAcquireMultiplePeriods1566() throws InterruptedException { 
         final int count = 1000; 
         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( 
                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); 
         semaphore.setLimit(count / 4); 
         final CountDownLatch latch = new CountDownLatch(count); 
         final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); 
         t.start(); 
         latch.await(); 
         semaphore.shutdown(); 
         assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); 
     } 
  
     /** 
      * Tests the
 @Test(expected = IllegalStateException.class) 
     public void testPassAfterShutdown1567() throws InterruptedException { 
         final TimedSemaphore semaphore = new TimedSemaphore(PERIOD, UNIT, LIMIT); 
         semaphore.shutdown(); 
         semaphore.acquire(); 
     } 
  
     /** 
      * Tests a bigger number of invocations that span multiple periods. The 
      * period is set to a very short time. A background thread calls the 
      * semaphore a large number of times. While it runs at last one end of a 
      * period should be reached. 
      */ 

 lang3/tuple/MutablePair.java
 @Test 
     public void testFormattable_padded1568() throws Exception { 
         final Pair<String, String> pair = Pair.of("Key", "Value"); 
         assertEquals("         (Key,Value)", String.format("%1$20s", pair)); 
     } 
  
 } 

 @Test 
     public void testCompatibilityBetweenPairs1569() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

 @Test 
     public void testCompatibilityBetweenPairs1570() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

 lang3/builder/StandardToStringStyle.java
 @Test 
     public void testOneArgNull1571() { 
         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); 
         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 @Test 
     public void testOneArgNull1572() { 
         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); 
         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); 
     } 
  

 lang3/time/FastDatePrinter.java
 @Test 
     public void testTimeZoneMatches1573() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1574() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testLang6451575() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testTimeZoneMatches1576() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testLang6451577() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testTimeZoneMatches1578() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1579() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testLang6451580() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testTimeZoneMatches1581() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1582() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1583() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1584() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1585() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1586() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testShortDateStyleWithLocales1587() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testLang6451588() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testLang6451589() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testPatternMatches1590() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD); 
         assertEquals(YYYY_MM_DD, printer.getPattern()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1591() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testEquals1592() { 
         final DatePrinter printer1= getInstance(YYYY_MM_DD); 
         final DatePrinter printer2= getInstance(YYYY_MM_DD); 
  
         assertEquals(printer1, printer2); 
         assertEquals(printer1.hashCode(), printer2.hashCode());         
  
         assertFalse(printer1.equals(new Object())); 
     } 
      

 @Test 
     public void testEquals1593() { 
         final DatePrinter printer1= getInstance(YYYY_MM_DD); 
         final DatePrinter printer2= getInstance(YYYY_MM_DD); 
  
         assertEquals(printer1, printer2); 
         assertEquals(printer1.hashCode(), printer2.hashCode());         
  
         assertFalse(printer1.equals(new Object())); 
     } 
      

 @Test 
     public void testEquals1594() { 
         final DatePrinter printer1= getInstance(YYYY_MM_DD); 
         final DatePrinter printer2= getInstance(YYYY_MM_DD); 
  
         assertEquals(printer1, printer2); 
         assertEquals(printer1.hashCode(), printer2.hashCode());         
  
         assertFalse(printer1.equals(new Object())); 
     } 
      

 @Test 
     public void testToStringContainsName1595() { 
         final DateParser parser= getInstance(YMD_SLASH); 
         assertTrue(parser.toString().startsWith("FastDate")); 
     } 
  

 @Test 
     public void testLang6451596() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testLang6451597() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testLang6451598() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testLang6451599() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testLang6451600() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testShortDateStyleWithLocales1601() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testTimeZoneMatches1602() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testShortDateStyleWithLocales1603() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testShortDateStyleWithLocales1604() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testShortDateStyleWithLocales1605() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testShortDateStyleWithLocales1606() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testTimeZoneMatches1607() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testShortDateStyleWithLocales1608() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testShortDateStyleWithLocales1609() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testTimeZoneMatches1610() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testShortDateStyleWithLocales1611() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testShortDateStyleWithLocales1612() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testMilleniumBug1613() { 
         final Calendar cal = Calendar.getInstance(); 
         final DatePrinter format = getInstance("dd.MM.yyyy"); 
  
         cal.set(1000,0,1); 
         assertEquals("01.01.1000", format.format(cal)); 
     } 
  
     /** 
      * testLowYearPadding showed that the date was buggy 
      * This test confirms it, getting 366 back as a date 
      */ 

 @Test 
     public void testShortDateStyleWithLocales1614() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testTimeZoneMatches1615() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testShortDateStyleWithLocales1616() { 
         final Locale usLocale = Locale.US; 
         final Locale swedishLocale = new Locale("sv", "SE"); 
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2004, 1, 3); 
         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); 
         assertEquals("2/3/04", fdf.format(cal)); 
  
         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); 
         assertEquals("2004-02-03", fdf.format(cal)); 
  
     } 
  
     /** 
      * Tests that pre-1000AD years get padded with yyyy 
      */ 

 @Test 
     public void testDayOf1617() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10); 
  
         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); 
     } 
  
     /** 
      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. 
      * @throws ParseException 
      */ 

 @Test 
     public void testTimeZoneMatches1618() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1619() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1620() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 @Test 
     public void testTimeZoneMatches1621() { 
         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); 
         assertEquals(NEW_YORK, printer.getTimeZone()); 
     } 
      

 lang3/concurrent/ConcurrentException.java
 lang3/text/StrLookup.java
 @Test 
     public void testSystemProperiesLookup1622() { 
         assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); 
         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); 
         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); 
         try { 
             StrLookup.systemPropertiesLookup().lookup(null); 
             fail(); 
         } catch (final NullPointerException ex) { 
             // expected 
         } 
     } 
  

 @Test 
     public void testNoneLookup1623() { 
         assertEquals(null, StrLookup.noneLookup().lookup(null)); 
         assertEquals(null, StrLookup.noneLookup().lookup("")); 
         assertEquals(null, StrLookup.noneLookup().lookup("any")); 
     } 
  

 lang3/reflect/MethodUtils.java
 @Test 
     public void testInvokeExactMethod1624() throws Exception { 
         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); 
         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", 
                 (Object[]) null)); 
         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",  
                 (Object[]) null, (Class<?>[]) null)); 
         assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, 
                 "foo", "")); 
         assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, 
 
 @Test 
     public void testInvokeExactMethod1625() throws Exception { 
         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", 
                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); 
         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", 
                 (Object[]) null)); 
         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",  
                 (Object[]) null, (Class<?>[]) null)); 
         assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, 
                 "foo", "")); 
         assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, 
 
 @Test 
     public void testInvokeExactStaticMethod1626() throws Exception { 
         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, 
                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); 
         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, 
                 "bar", (Object[]) null)); 
         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, 
                 "bar", (Object[]) null, (Class<?>[]) null)); 
         assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod( 
                 TestBean.class, "bar", "")); 
         assertEquals("bar(Object)", MethodUtils.invokeEx
 @Test 
     public void testInvokeStaticMethod1627() throws Exception { 
         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, 
                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); 
         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, 
                 "bar", (Object[]) null)); 
         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, 
                 "bar", (Object[]) null, (Class<?>[]) null)); 
         assertEquals("bar(String)", MethodUtils.invokeStaticMethod( 
                 TestBean.class, "bar", "")); 
         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( 
    
 @Test 
     public void testInvokeStaticMethod1628() throws Exception { 
         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, 
                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); 
         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, 
                 "bar", (Object[]) null)); 
         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, 
                 "bar", (Object[]) null, (Class<?>[]) null)); 
         assertEquals("bar(String)", MethodUtils.invokeStaticMethod( 
                 TestBean.class, "bar", "")); 
         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( 
    
 @Test 
     public void testInvokeExactStaticMethod1629() throws Exception { 
         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, 
                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); 
         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, 
                 "bar", (Object[]) null)); 
         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, 
                 "bar", (Object[]) null, (Class<?>[]) null)); 
         assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod( 
                 TestBean.class, "bar", "")); 
         assertEquals("bar(Object)", MethodUtils.invokeEx
 @Test 
     public void testGetAccessibleMethodPrivateInterface1630() throws Exception { 
         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); 
         assertNotNull(expected); 
         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); 
         assertNull(actual); 
     } 
  

 @Test 
     public void testGetAccessibleMethodPrivateInterface1631() throws Exception { 
         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); 
         assertNotNull(expected); 
         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); 
         assertNull(actual); 
     } 
  

 @Test 
     public void testGetAccessibleMethodPrivateInterface1632() throws Exception { 
         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); 
         assertNotNull(expected); 
         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); 
         assertNull(actual); 
     } 
  

 @Test 
     public void testGetAccessibleInterfaceMethodFromDescription1633() 
             throws Exception { 
         final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null }; 
         for (final Class<?>[] element : p) { 
             final Method accessibleMethod = MethodUtils.getAccessibleMethod( 
                     TestMutable.class, "getValue", element); 
             assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); 
         } 
     } 
  

 @Test 
     public void testGetAccessibleInterfaceMethodFromDescription1634() 
             throws Exception { 
         final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null }; 
         for (final Class<?>[] element : p) { 
             final Method accessibleMethod = MethodUtils.getAccessibleMethod( 
                     TestMutable.class, "getValue", element); 
             assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); 
         } 
     } 
  

 @Test 
     public void testGetAccessibleInterfaceMethodFromDescription1635() 
             throws Exception { 
         final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null }; 
         for (final Class<?>[] element : p) { 
             final Method accessibleMethod = MethodUtils.getAccessibleMethod( 
                     TestMutable.class, "getValue", element); 
             assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); 
         } 
     } 
  

 @Test 
    public void testGetMatchingAccessibleMethod1636() throws Exception { 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 null, ArrayUtils.EMPTY_CLASS_ARRAY); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 singletonArray(String.class), singletonArray(String.class)); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 singletonArray(Object.class), singletonArray(Object.class)); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "
 @Test 
    public void testGetMatchingAccessibleMethod1637() throws Exception { 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 null, ArrayUtils.EMPTY_CLASS_ARRAY); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 singletonArray(String.class), singletonArray(String.class)); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 singletonArray(Object.class), singletonArray(Object.class)); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "
 @Test 
    public void testGetMatchingAccessibleMethod1638() throws Exception { 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 null, ArrayUtils.EMPTY_CLASS_ARRAY); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 singletonArray(String.class), singletonArray(String.class)); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", 
                 singletonArray(Object.class), singletonArray(Object.class)); 
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "
 lang3/event/EventListenerSupport.java
 @Test(expected=NullPointerException.class) 
     public void testAddNullListener1639() 
     { 
         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); 
         listenerSupport.addListener(null); 
     } 
  

 @Test(expected=NullPointerException.class) 
     public void testAddNullListener1640() 
     { 
         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); 
         listenerSupport.addListener(null); 
     } 
  

 lang3/mutable/MutableDouble.java
 @Test 
     public void testPrimitiveValues1641() { 
         final MutableDouble mutNum = new MutableDouble(1.7); 
          
         assertEquals( 1.7F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.7, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

 @Test 
     public void testAddValueObject1642() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.add(Double.valueOf(1.1d)); 
          
         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

 @Test 
     public void testAddValuePrimitive1643() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.add(1.1d); 
          
         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

 @Test 
     public void testSubtractValueObject1644() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.subtract(Double.valueOf(0.9d)); 
          
         assertEquals(0.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

 @Test 
     public void testDecrement1645() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

 @Test 
     public void testAddValueObject1646() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.add(Double.valueOf(1.1d)); 
          
         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

 @Test 
     public void testHashCode1647() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); 
     } 
  

 @Test 
     public void testHashCode1648() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); 
     } 
  

 @Test 
     public void testHashCode1649() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); 
     } 
  

 lang3/text/StrBuilder.java
 @Test 
     public void testChaining1650() { 
         final StrBuilder sb = new StrBuilder(); 
         assertSame(sb, sb.setNewLineText(null)); 
         assertSame(sb, sb.setNullText(null)); 
         assertSame(sb, sb.setLength(1)); 
         assertSame(sb, sb.setCharAt(0, 'a')); 
         assertSame(sb, sb.ensureCapacity(0)); 
         assertSame(sb, sb.minimizeCapacity()); 
         assertSame(sb, sb.clear()); 
         assertSame(sb, sb.reverse()); 
         assertSame(sb, sb.trim()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testGetSetNullText1651() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(null, sb.getNullText()); 
  
         sb.setNullText("null"); 
         assertEquals("null", sb.getNullText()); 
  
         sb.setNullText(""); 
         assertEquals(null, sb.getNullText()); 
  
         sb.setNullText("NULL"); 
         assertEquals("NULL", sb.getNullText()); 
  
         sb.setNullText((String) null); 
         assertEquals(null, sb.getNullText()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testCapacityAndLength1652() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(32, sb.capacity()); 
         assertEquals(0, sb.length()); 
         assertEquals(0, sb.size()); 
         assertTrue(sb.isEmpty()); 
  
         sb.minimizeCapacity(); 
         assertEquals(0, sb.capacity()); 
         assertEquals(0, sb.length()); 
         assertEquals(0, sb.size()); 
         assertTrue(sb.isEmpty()); 
  
         sb.ensureCapacity(32); 
         assertTrue(sb.capacity() >= 32); 
         assertEquals(0, sb.length()); 

 @Test 
     public void testCapacityAndLength1653() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(32, sb.capacity()); 
         assertEquals(0, sb.length()); 
         assertEquals(0, sb.size()); 
         assertTrue(sb.isEmpty()); 
  
         sb.minimizeCapacity(); 
         assertEquals(0, sb.capacity()); 
         assertEquals(0, sb.length()); 
         assertEquals(0, sb.size()); 
         assertTrue(sb.isEmpty()); 
  
         sb.ensureCapacity(32); 
         assertTrue(sb.capacity() >= 32); 
         assertEquals(0, sb.length()); 

 @Test 
     public void testCapacityAndLength1654() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(32, sb.capacity()); 
         assertEquals(0, sb.length()); 
         assertEquals(0, sb.size()); 
         assertTrue(sb.isEmpty()); 
  
         sb.minimizeCapacity(); 
         assertEquals(0, sb.capacity()); 
         assertEquals(0, sb.length()); 
         assertEquals(0, sb.size()); 
         assertTrue(sb.isEmpty()); 
  
         sb.ensureCapacity(32); 
         assertTrue(sb.capacity() >= 32); 
         assertEquals(0, sb.length()); 

 @Test 
     public void testDeleteCharAt1655() { 
         final StrBuilder sb = new StrBuilder("abc"); 
         sb.deleteCharAt(0); 
         assertEquals("bc", sb.toString());  
          
         try { 
             sb.deleteCharAt(1000); 
             fail("Expected IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) {} 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testDeleteCharAt1656() { 
         final StrBuilder sb = new StrBuilder("abc"); 
         sb.deleteCharAt(0); 
         assertEquals("bc", sb.toString());  
          
         try { 
             sb.deleteCharAt(1000); 
             fail("Expected IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) {} 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testDeleteCharAt1657() { 
         final StrBuilder sb = new StrBuilder("abc"); 
         sb.deleteCharAt(0); 
         assertEquals("bc", sb.toString());  
          
         try { 
             sb.deleteCharAt(1000); 
             fail("Expected IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) {} 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testToCharArray1658() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); 
  
         char[] a = sb.toCharArray(); 
         assertNotNull("toCharArray() result is null", a); 
         assertEquals("toCharArray() result is too large", 0, a.length); 
  
         sb.append("junit"); 
         a = sb.toCharArray(); 
         assertEquals("toCharArray() result incorrect length", 5, a.length); 
         assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a)); 
     } 
  

 @Test 
     public void testGetChars ( ) { 
         final StrBuilder sb = new StrBuilder(); 
          
         char[] input = new char[10]; 
         char[] a = sb.getChars(input); 
         assertSame (input, a); 
         assertTrue(Arrays.equals(new char[10], a)); 
          
         sb.append("junit"); 
         a = sb.getChars(input); 
         assertSame(input, a); 
         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a)); 
          
         a = sb.getChars(null); 
         assertNot
 @Test 
     public void testGetChars ( ) { 
         final StrBuilder sb = new StrBuilder(); 
          
         char[] input = new char[10]; 
         char[] a = sb.getChars(input); 
         assertSame (input, a); 
         assertTrue(Arrays.equals(new char[10], a)); 
          
         sb.append("junit"); 
         a = sb.getChars(input); 
         assertSame(input, a); 
         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a)); 
          
         a = sb.getChars(null); 
         assertNot
 @Test 
     public void testGetCharsIntIntCharArrayInt( ) { 
         final StrBuilder sb = new StrBuilder(); 
                 
         sb.append("junit"); 
         char[] a = new char[5]; 
         sb.getChars(0,5,a,0); 
         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a)); 
          
         a = new char[5]; 
         sb.getChars(0,2,a,3); 
         assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a)); 
          
         try { 
             sb.getChars(-
 @Test 
     public void testGetCharsIntIntCharArrayInt( ) { 
         final StrBuilder sb = new StrBuilder(); 
                 
         sb.append("junit"); 
         char[] a = new char[5]; 
         sb.getChars(0,5,a,0); 
         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a)); 
          
         a = new char[5]; 
         sb.getChars(0,2,a,3); 
         assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a)); 
          
         try { 
             sb.getChars(-
 @Test 
     public void testAppendln_CharArray_int_int1659() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final char[] str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
       
 @Test 
     public void testAppendln_CharArray_int_int1660() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final char[] str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
       
 @Test 
     public void testAppend_CharArray1661() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((char[]) null); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append(new char[0]); 
         assertEquals("", sb.toString()); 
  
         sb.append(new char[]{'f', 'o', 'o'}); 
         assertEquals("foo", sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testEnsureCapacity1662() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testAppend_String_int_int1663() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((String) null, 0, 1); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append("foo", 0, 3); 
         assertEquals("foo", sb.toString()); 
  
         try { 
             sb.append("bar", -1, 1); 
             fail("append(char[], -1,) expected IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
    
 @Test 
     public void testAppendln_String_int_int1664() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final String str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
         };
 @Test 
     public void testAppendln_FormattedString1665() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final String str) { 
                 count[0]++; 
                 return super.append(str); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
         }; 
         sb.append
 @Test 
     public void testEnsureCapacity1666() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testEnsureCapacity1667() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testEnsureCapacity1668() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testEnsureCapacity1669() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testAppend_StringBuffer_int_int1670() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append(new StringBuffer("foo"), 0, 3); 
         assertEquals("foo", sb.toString()); 
  
         try { 
             sb.append(new StringBuffer("bar"), -1, 1); 
             fail("append(char[], -1,) expected IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } [EOL
 @Test 
     public void testEnsureCapacity1671() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testAppendln_StringBuilder_int_int1672() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
       
 @Test 
     public void testAppend_StrBuilder1673() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((StrBuilder) null); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append(new StrBuilder("foo")); 
         assertEquals("foo", sb.toString()); 
  
         sb.append(new StrBuilder("")); 
         assertEquals("foo", sb.toString()); 
  
         sb.append(new StrBuilder("bar")); 
         assertEquals("foobar", sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppend_StrBuilder1674() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((StrBuilder) null); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append(new StrBuilder("foo")); 
         assertEquals("foo", sb.toString()); 
  
         sb.append(new StrBuilder("")); 
         assertEquals("foo", sb.toString()); 
  
         sb.append(new StrBuilder("bar")); 
         assertEquals("foobar", sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppend_StrBuilder_int_int1675() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((StrBuilder) null, 0, 1); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append(new StrBuilder("foo"), 0, 3); 
         assertEquals("foo", sb.toString()); 
  
         try { 
             sb.append(new StrBuilder("bar"), -1, 1); 
             fail("append(char[], -1,) expected IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } [EOL
 @Test 
     public void testAppend_StrBuilder_int_int1676() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((StrBuilder) null, 0, 1); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append(new StrBuilder("foo"), 0, 3); 
         assertEquals("foo", sb.toString()); 
  
         try { 
             sb.append(new StrBuilder("bar"), -1, 1); 
             fail("append(char[], -1,) expected IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } [EOL
 @Test 
     public void testAppend_CharArray1677() { 
         StrBuilder sb = new StrBuilder(); 
         sb.setNullText("NULL").append((char[]) null); 
         assertEquals("NULL", sb.toString()); 
  
         sb = new StrBuilder(); 
         sb.append(new char[0]); 
         assertEquals("", sb.toString()); 
  
         sb.append(new char[]{'f', 'o', 'o'}); 
         assertEquals("foo", sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppendln_CharArray_int_int1678() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final char[] str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
       
 @Test 
     public void testAppendln_CharArray_int_int1679() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final char[] str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
       
 @Test 
     public void testAppendln_CharArray_int_int1680() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final char[] str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
       
 @Test 
     public void testAppendln_Boolean1681() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendln(true); 
         assertEquals("true" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(false); 
         assertEquals("false" + SEP, sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppendln_Boolean1682() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendln(true); 
         assertEquals("true" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(false); 
         assertEquals("false" + SEP, sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppendln_Boolean1683() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendln(true); 
         assertEquals("true" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(false); 
         assertEquals("false" + SEP, sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppendln_Boolean1684() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendln(true); 
         assertEquals("true" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(false); 
         assertEquals("false" + SEP, sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testEnsureCapacity1685() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testEnsureCapacity1686() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testAppendln_PrimitiveNumber1687() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendln(0); 
         assertEquals("0" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(1L); 
         assertEquals("1" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(2.3f); 
         assertEquals("2.3" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(4.5d); 
         assert
 @Test 
     public void testAppendln_CharArray_int_int1688() { 
         final int[] count = new int[2]; 
         final StrBuilder sb = new StrBuilder() { 
             @Override 
             public StrBuilder append(final char[] str, final int startIndex, final int length) { 
                 count[0]++; 
                 return super.append(str, startIndex, length); 
             } 
             @Override 
             public StrBuilder appendNewLine() { 
                 count[1]++; 
                 return super.appendNewLine(); 
             } 
       
 @Test 
     public void testAppendln_Boolean1689() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendln(true); 
         assertEquals("true" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(false); 
         assertEquals("false" + SEP, sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppendln_PrimitiveNumber1690() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendln(0); 
         assertEquals("0" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(1L); 
         assertEquals("1" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(2.3f); 
         assertEquals("2.3" + SEP, sb.toString()); 
          
         sb.clear(); 
         sb.appendln(4.5d); 
         assert
 @Test 
     public void testAppendAll_Array1691() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendAll((Object[]) null); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendAll(new Object[0]); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendAll(new Object[]{"foo", "bar", "baz"}); 
         assertEquals("foobarbaz", sb.toString()); 
  
         sb.clear(); 
         sb.appendAll("foo", "bar", "baz"); 
         assertEquals("foobarbaz", sb.toString()); 
   
 @Test 
     public void testAppendAll_Iterator1692() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendAll((Iterator<?>) null); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendAll(Collections.EMPTY_LIST.iterator()); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendAll(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator()); 
         assertEquals("foobarbaz", sb.toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testAppendWithSeparators_Array1693() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendWithSeparators((Object[]) null, ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(new Object[0], ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, ","); 
         assertEquals("foo,bar,baz", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, null); [EOL
 @Test 
     public void testAppendWithSeparators_Array1694() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendWithSeparators((Object[]) null, ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(new Object[0], ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, ","); 
         assertEquals("foo,bar,baz", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, null); [EOL
 @Test 
     public void testAppendWithSeparators_Collection1695() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendWithSeparators((Collection<?>) null, ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(Collections.EMPTY_LIST, ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}), ","); 
         assertEquals("foo,bar,baz", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(Arrays.asList(new Object
 @Test 
     public void testAppendWithSeparators_Iterator1696() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendWithSeparators((Iterator<?>) null, ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); 
         assertEquals("", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator(), ","); 
         assertEquals("foo,bar,baz", sb.toString()); 
  
         sb.clear(); 
         sb.appendWithSeparators(Arrays.as
 @Test 
     public void testAppendSeparator_char1697() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendSeparator(',');  // no effect 
         assertEquals("", sb.toString()); 
         sb.append("foo"); 
         assertEquals("foo", sb.toString()); 
         sb.appendSeparator(','); 
         assertEquals("foo,", sb.toString()); 
     } 

 @Test 
     public void testAppendSeparator_char1698() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendSeparator(',');  // no effect 
         assertEquals("", sb.toString()); 
         sb.append("foo"); 
         assertEquals("foo", sb.toString()); 
         sb.appendSeparator(','); 
         assertEquals("foo,", sb.toString()); 
     } 

 @Test 
     public void testAppendSeparator_char_char1699() { 
         final StrBuilder sb = new StrBuilder(); 
         final char startSeparator = ':'; 
         final char standardSeparator = ','; 
         final String foo = "foo"; 
         sb.appendSeparator(standardSeparator, startSeparator);  // no effect 
         assertEquals(String.valueOf(startSeparator), sb.toString()); 
         sb.append(foo); 
         assertEquals(String.valueOf(startSeparator) + foo, sb.toString()); 
         sb.appendSeparator(standardSeparator, startSeparator); 
         assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString()); 
     } 
  
   
 @Test 
     public void testAppendPadding1700() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.append("foo"); 
         assertEquals("foo", sb.toString()); 
  
         sb.appendPadding(-1, '-'); 
         assertEquals("foo", sb.toString()); 
  
         sb.appendPadding(0, '-'); 
         assertEquals("foo", sb.toString()); 
  
         sb.appendPadding(1, '-'); 
         assertEquals("foo-", sb.toString()); 
  
         sb.appendPadding(16, '-'); 
         assertEquals(20, sb.length()); 
         //           
 @Test 
     public void testAppendPadding1701() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.append("foo"); 
         assertEquals("foo", sb.toString()); 
  
         sb.appendPadding(-1, '-'); 
         assertEquals("foo", sb.toString()); 
  
         sb.appendPadding(0, '-'); 
         assertEquals("foo", sb.toString()); 
  
         sb.appendPadding(1, '-'); 
         assertEquals("foo-", sb.toString()); 
  
         sb.appendPadding(16, '-'); 
         assertEquals(20, sb.length()); 
         //           
 @Test 
     public void testLang412Left1702() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendFixedWidthPadLeft(null, 10, '*'); 
         assertEquals( "Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString()); 
     } 
  

 @Test 
     public void testLang412Right1703() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendFixedWidthPadRight(null, 10, '*'); 
         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); 
     } 
  

 @Test 
     public void testLang412Right1704() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendFixedWidthPadRight(null, 10, '*'); 
         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); 
     } 
  

 @Test 
     public void testLang412Right1705() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendFixedWidthPadRight(null, 10, '*'); 
         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); 
     } 
  

 @Test 
     public void testLang412Right1706() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.appendFixedWidthPadRight(null, 10, '*'); 
         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); 
     } 
  

 @Test 
     public void testInsert1707() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1708() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1709() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1710() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1711() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1712() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1713() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1714() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1715() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1716() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1717() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1718() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1719() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testInsert1720() { 
  
         final StrBuilder sb = new StrBuilder(); 
         sb.append("barbaz"); 
         assertEquals("barbaz", sb.toString()); 
  
         try { 
             sb.insert(-1, FOO); 
             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException e) { 
             // expected 
         } 
  
         try { 
             sb.insert(7, FOO); 
             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); 
         } catch (final IndexOut
 @Test 
     public void testChaining1721() { 
         final StrBuilder sb = new StrBuilder(); 
         assertSame(sb, sb.setNewLineText(null)); 
         assertSame(sb, sb.setNullText(null)); 
         assertSame(sb, sb.setLength(1)); 
         assertSame(sb, sb.setCharAt(0, 'a')); 
         assertSame(sb, sb.ensureCapacity(0)); 
         assertSame(sb, sb.minimizeCapacity()); 
         assertSame(sb, sb.clear()); 
         assertSame(sb, sb.reverse()); 
         assertSame(sb, sb.trim()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testDeleteAll_char1722() { 
         StrBuilder sb = new StrBuilder("abcbccba"); 
         sb.deleteAll('X'); 
         assertEquals("abcbccba", sb.toString()); 
         sb.deleteAll('a'); 
         assertEquals("bcbccb", sb.toString()); 
         sb.deleteAll('c'); 
         assertEquals("bbb", sb.toString()); 
         sb.deleteAll('b'); 
         assertEquals("", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteAll('b'); 
         assertEquals("", sb.toString()); 
     } 
  

 @Test 
     public void testDeleteFirst_char1723() { 
         StrBuilder sb = new StrBuilder("abcba"); 
         sb.deleteFirst('X'); 
         assertEquals("abcba", sb.toString()); 
         sb.deleteFirst('a'); 
         assertEquals("bcba", sb.toString()); 
         sb.deleteFirst('c'); 
         assertEquals("bba", sb.toString()); 
         sb.deleteFirst('b'); 
         assertEquals("ba", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteFirst('b'); 
         assertEquals("", sb.toString()); 
     } 
  
     // ----------------------------------------------------------------------- 

 @Test 
     public void testDeleteAll_String1724() { 
         StrBuilder sb = new StrBuilder("abcbccba"); 
         sb.deleteAll((String) null); 
         assertEquals("abcbccba", sb.toString()); 
         sb.deleteAll(""); 
         assertEquals("abcbccba", sb.toString()); 
          
         sb.deleteAll("X"); 
         assertEquals("abcbccba", sb.toString()); 
         sb.deleteAll("a"); 
         assertEquals("bcbccb", sb.toString()); 
         sb.deleteAll("c"); 
         assertEquals("bbb", sb.toString()); 
         sb.deleteAll("b"); 
    
 @Test 
     public void testIndexOfLang2941725() { 
         final StrBuilder sb = new StrBuilder("onetwothree"); 
         sb.deleteFirst("three"); 
         assertEquals(-1, sb.indexOf("three")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testIndexOfLang2941726() { 
         final StrBuilder sb = new StrBuilder("onetwothree"); 
         sb.deleteFirst("three"); 
         assertEquals(-1, sb.indexOf("three")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testDeleteFirst_StrMatcher1727() { 
         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); 
         sb.deleteFirst((StrMatcher) null); 
         assertEquals("A0xA1A2yA3", sb.toString()); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("xA1A2yA3", sb.toString()); 
  
         sb = new StrBuilder("Ax1"); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("Ax1", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("", sb.to
 @Test 
     public void testDeleteFirst_StrMatcher1728() { 
         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); 
         sb.deleteFirst((StrMatcher) null); 
         assertEquals("A0xA1A2yA3", sb.toString()); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("xA1A2yA3", sb.toString()); 
  
         sb = new StrBuilder("Ax1"); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("Ax1", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("", sb.to
 @Test 
     public void testDeleteFirst_StrMatcher1729() { 
         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); 
         sb.deleteFirst((StrMatcher) null); 
         assertEquals("A0xA1A2yA3", sb.toString()); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("xA1A2yA3", sb.toString()); 
  
         sb = new StrBuilder("Ax1"); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("Ax1", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("", sb.to
 @Test 
     public void testReplace_int_int_String1730() { 
         StrBuilder sb = new StrBuilder("abc"); 
         sb.replace(0, 1, "d"); 
         assertEquals("dbc", sb.toString()); 
         sb.replace(0, 1, "aaa"); 
         assertEquals("aaabc", sb.toString()); 
         sb.replace(0, 3, ""); 
         assertEquals("bc", sb.toString()); 
         sb.replace(1, 2, (String) null); 
         assertEquals("b", sb.toString()); 
         sb.replace(1, 1000, "text"); 
         assertEquals("btext", sb.toString()); 
         sb.replace(0, 1000, "text"); 
  
 @Test 
     public void testReplaceFirst_char_char1731() { 
         final StrBuilder sb = new StrBuilder("abcbccba"); 
         sb.replaceFirst('x', 'y'); 
         assertEquals("abcbccba", sb.toString()); 
         sb.replaceFirst('a', 'd'); 
         assertEquals("dbcbccba", sb.toString()); 
         sb.replaceFirst('b', 'e'); 
         assertEquals("decbccba", sb.toString()); 
         sb.replaceFirst('c', 'f'); 
         assertEquals("defbccba", sb.toString()); 
         sb.replaceFirst('d', 'd'); 
         assertEquals("defbccba", sb.toString()); 
     } 
  
   
 @Test 
     public void testReplaceFirst_char_char1732() { 
         final StrBuilder sb = new StrBuilder("abcbccba"); 
         sb.replaceFirst('x', 'y'); 
         assertEquals("abcbccba", sb.toString()); 
         sb.replaceFirst('a', 'd'); 
         assertEquals("dbcbccba", sb.toString()); 
         sb.replaceFirst('b', 'e'); 
         assertEquals("decbccba", sb.toString()); 
         sb.replaceFirst('c', 'f'); 
         assertEquals("defbccba", sb.toString()); 
         sb.replaceFirst('d', 'd'); 
         assertEquals("defbccba", sb.toString()); 
     } 
  
   
 @Test 
     public void testReplaceAll_String_String1733() { 
         StrBuilder sb = new StrBuilder("abcbccba"); 
         sb.replaceAll((String) null, null); 
         assertEquals("abcbccba", sb.toString()); 
         sb.replaceAll((String) null, "anything"); 
         assertEquals("abcbccba", sb.toString()); 
         sb.replaceAll("", null); 
         assertEquals("abcbccba", sb.toString()); 
         sb.replaceAll("", "anything"); 
         assertEquals("abcbccba", sb.toString()); 
          
         sb.replaceAll("x", "y"); 
         assertEquals("abcbccba", sb.toString()); 
     
 @Test 
     public void testDeleteFirst_StrMatcher1734() { 
         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); 
         sb.deleteFirst((StrMatcher) null); 
         assertEquals("A0xA1A2yA3", sb.toString()); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("xA1A2yA3", sb.toString()); 
  
         sb = new StrBuilder("Ax1"); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("Ax1", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("", sb.to
 @Test 
     public void testDeleteFirst_StrMatcher1735() { 
         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); 
         sb.deleteFirst((StrMatcher) null); 
         assertEquals("A0xA1A2yA3", sb.toString()); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("xA1A2yA3", sb.toString()); 
  
         sb = new StrBuilder("Ax1"); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("Ax1", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("", sb.to
 @Test 
     public void testReverse1736() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals("", sb.reverse().toString()); 
          
         sb.clear().append(true); 
         assertEquals("eurt", sb.reverse().toString()); 
         assertEquals("true", sb.reverse().toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testChaining1737() { 
         final StrBuilder sb = new StrBuilder(); 
         assertSame(sb, sb.setNewLineText(null)); 
         assertSame(sb, sb.setNullText(null)); 
         assertSame(sb, sb.setLength(1)); 
         assertSame(sb, sb.setCharAt(0, 'a')); 
         assertSame(sb, sb.ensureCapacity(0)); 
         assertSame(sb, sb.minimizeCapacity()); 
         assertSame(sb, sb.clear()); 
         assertSame(sb, sb.reverse()); 
         assertSame(sb, sb.trim()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testChaining1738() { 
         final StrBuilder sb = new StrBuilder(); 
         assertSame(sb, sb.setNewLineText(null)); 
         assertSame(sb, sb.setNullText(null)); 
         assertSame(sb, sb.setLength(1)); 
         assertSame(sb, sb.setCharAt(0, 'a')); 
         assertSame(sb, sb.ensureCapacity(0)); 
         assertSame(sb, sb.minimizeCapacity()); 
         assertSame(sb, sb.clear()); 
         assertSame(sb, sb.reverse()); 
         assertSame(sb, sb.trim()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testChaining1739() { 
         final StrBuilder sb = new StrBuilder(); 
         assertSame(sb, sb.setNewLineText(null)); 
         assertSame(sb, sb.setNullText(null)); 
         assertSame(sb, sb.setLength(1)); 
         assertSame(sb, sb.setCharAt(0, 'a')); 
         assertSame(sb, sb.ensureCapacity(0)); 
         assertSame(sb, sb.minimizeCapacity()); 
         assertSame(sb, sb.clear()); 
         assertSame(sb, sb.reverse()); 
         assertSame(sb, sb.trim()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testChaining1740() { 
         final StrBuilder sb = new StrBuilder(); 
         assertSame(sb, sb.setNewLineText(null)); 
         assertSame(sb, sb.setNullText(null)); 
         assertSame(sb, sb.setLength(1)); 
         assertSame(sb, sb.setCharAt(0, 'a')); 
         assertSame(sb, sb.ensureCapacity(0)); 
         assertSame(sb, sb.minimizeCapacity()); 
         assertSame(sb, sb.clear()); 
         assertSame(sb, sb.reverse()); 
         assertSame(sb, sb.trim()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testStartsWith1741() { 
         final StrBuilder sb = new StrBuilder(); 
         assertFalse(sb.startsWith("a")); 
         assertFalse(sb.startsWith(null)); 
         assertTrue(sb.startsWith("")); 
         sb.append("abc"); 
         assertTrue(sb.startsWith("a")); 
         assertTrue(sb.startsWith("ab")); 
         assertTrue(sb.startsWith("abc")); 
         assertFalse(sb.startsWith("cba")); 
     } 
  

 @Test 
     public void testEndsWith1742() { 
         final StrBuilder sb = new StrBuilder(); 
         assertFalse(sb.endsWith("a")); 
         assertFalse(sb.endsWith("c")); 
         assertTrue(sb.endsWith("")); 
         assertFalse(sb.endsWith(null)); 
         sb.append("abc"); 
         assertTrue(sb.endsWith("c")); 
         assertTrue(sb.endsWith("bc")); 
         assertTrue(sb.endsWith("abc")); 
         assertFalse(sb.endsWith("cba")); 
         assertFalse(sb.endsWith("abcd")); 
         assertFalse(sb.endsWith(" abc")); 
         assertFalse(sb.endsWith("abc ")); 
   
 @Test 
     public void testEndsWith1743() { 
         final StrBuilder sb = new StrBuilder(); 
         assertFalse(sb.endsWith("a")); 
         assertFalse(sb.endsWith("c")); 
         assertTrue(sb.endsWith("")); 
         assertFalse(sb.endsWith(null)); 
         sb.append("abc"); 
         assertTrue(sb.endsWith("c")); 
         assertTrue(sb.endsWith("bc")); 
         assertTrue(sb.endsWith("abc")); 
         assertFalse(sb.endsWith("cba")); 
         assertFalse(sb.endsWith("abcd")); 
         assertFalse(sb.endsWith(" abc")); 
         assertFalse(sb.endsWith("abc ")); 
   
 @Test 
     public void testSubSequenceIntInt1744() { 
        final StrBuilder sb = new StrBuilder ("hello goodbye"); 
        // Start index is negative 
        try { 
             sb.subSequence(-1, 5); 
             fail(); 
         } catch (final IndexOutOfBoundsException e) {} 
          
         // End index is negative 
        try { 
             sb.subSequence(2, -1); 
             fail(); 
         } catch (final IndexOutOfBoundsException e) {} 
          
         // End index greater than length() 
         try { 
             s
 @Test 
     public void testSubSequenceIntInt1745() { 
        final StrBuilder sb = new StrBuilder ("hello goodbye"); 
        // Start index is negative 
        try { 
             sb.subSequence(-1, 5); 
             fail(); 
         } catch (final IndexOutOfBoundsException e) {} 
          
         // End index is negative 
        try { 
             sb.subSequence(2, -1); 
             fail(); 
         } catch (final IndexOutOfBoundsException e) {} 
          
         // End index greater than length() 
         try { 
             s
 @Test 
     public void testSubSequenceIntInt1746() { 
        final StrBuilder sb = new StrBuilder ("hello goodbye"); 
        // Start index is negative 
        try { 
             sb.subSequence(-1, 5); 
             fail(); 
         } catch (final IndexOutOfBoundsException e) {} 
          
         // End index is negative 
        try { 
             sb.subSequence(2, -1); 
             fail(); 
         } catch (final IndexOutOfBoundsException e) {} 
          
         // End index greater than length() 
         try { 
             s
 @Test 
     public void testLeftString1747() { 
         final StrBuilder sb = new StrBuilder("left right"); 
         assertEquals("left", sb.leftString(4)); 
         assertEquals("", sb.leftString(0)); 
         assertEquals("", sb.leftString(-5)); 
         assertEquals("left right", sb.leftString(15)); 
     } 
  
     // ----------------------------------------------------------------------- 

 @Test 
     public void testLeftString1748() { 
         final StrBuilder sb = new StrBuilder("left right"); 
         assertEquals("left", sb.leftString(4)); 
         assertEquals("", sb.leftString(0)); 
         assertEquals("", sb.leftString(-5)); 
         assertEquals("left right", sb.leftString(15)); 
     } 
  
     // ----------------------------------------------------------------------- 

 @Test 
     public void testLeftString1749() { 
         final StrBuilder sb = new StrBuilder("left right"); 
         assertEquals("left", sb.leftString(4)); 
         assertEquals("", sb.leftString(0)); 
         assertEquals("", sb.leftString(-5)); 
         assertEquals("left right", sb.leftString(15)); 
     } 
  
     // ----------------------------------------------------------------------- 

 @Test 
     public void testRightString1750() { 
         final StrBuilder sb = new StrBuilder("left right"); 
         assertEquals("right", sb.rightString(5)); 
         assertEquals("", sb.rightString(0)); 
         assertEquals("", sb.rightString(-5)); 
         assertEquals("left right", sb.rightString(15)); 
     } 
  

 @Test 
     public void testRightString1751() { 
         final StrBuilder sb = new StrBuilder("left right"); 
         assertEquals("right", sb.rightString(5)); 
         assertEquals("", sb.rightString(0)); 
         assertEquals("", sb.rightString(-5)); 
         assertEquals("left right", sb.rightString(15)); 
     } 
  

 @Test 
     public void testMidString1752() { 
         final StrBuilder sb = new StrBuilder("hello goodbye hello"); 
         assertEquals("goodbye", sb.midString(6, 7)); 
         assertEquals("hello", sb.midString(0, 5)); 
         assertEquals("hello", sb.midString(-5, 5)); 
         assertEquals("", sb.midString(0, -1)); 
         assertEquals("", sb.midString(20, 2)); 
         assertEquals("hello", sb.midString(14, 22)); 
     } 
  

 @Test 
     public void testMidString1753() { 
         final StrBuilder sb = new StrBuilder("hello goodbye hello"); 
         assertEquals("goodbye", sb.midString(6, 7)); 
         assertEquals("hello", sb.midString(0, 5)); 
         assertEquals("hello", sb.midString(-5, 5)); 
         assertEquals("", sb.midString(0, -1)); 
         assertEquals("", sb.midString(20, 2)); 
         assertEquals("hello", sb.midString(14, 22)); 
     } 
  

 @Test 
     public void testContains_char1754() { 
         final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); 
         assertTrue(sb.contains('a')); 
         assertTrue(sb.contains('o')); 
         assertTrue(sb.contains('z')); 
         assertFalse(sb.contains('1')); 
     } 
  

 @Test 
     public void testIndexOfLang2941755() { 
         final StrBuilder sb = new StrBuilder("onetwothree"); 
         sb.deleteFirst("three"); 
         assertEquals(-1, sb.indexOf("three")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testIndexOfLang2941756() { 
         final StrBuilder sb = new StrBuilder("onetwothree"); 
         sb.deleteFirst("three"); 
         assertEquals(-1, sb.indexOf("three")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testIndexOfLang2941757() { 
         final StrBuilder sb = new StrBuilder("onetwothree"); 
         sb.deleteFirst("three"); 
         assertEquals(-1, sb.indexOf("three")); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testIndexOf_StrMatcher1758() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(-1, sb.indexOf((StrMatcher) null)); 
         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); 
          
         sb.append("ab bd"); 
         assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); 
         assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); 
         assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); 
         assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); 
         assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); [EOL
 @Test 
     public void testIndexOf_StrMatcher1759() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(-1, sb.indexOf((StrMatcher) null)); 
         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); 
          
         sb.append("ab bd"); 
         assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); 
         assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); 
         assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); 
         assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); 
         assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); [EOL
 @Test 
     public void testLastIndexOf_String_int1760() { 
         StrBuilder sb = new StrBuilder("abab"); 
         assertEquals(-1, sb.lastIndexOf("a", -1)); 
         assertEquals(0, sb.lastIndexOf("a", 0)); 
         assertEquals(0, sb.lastIndexOf("a", 1)); 
         assertEquals(2, sb.lastIndexOf("a", 2)); 
         assertEquals(2, sb.lastIndexOf("a", 3)); 
         assertEquals(2, sb.lastIndexOf("a", 4)); 
         assertEquals(2, sb.lastIndexOf("a", 5)); 
          
         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); 
         assertEquals("abab".lastIndexOf("", 3), s
 @Test 
     public void testLastIndexOf_String_int1761() { 
         StrBuilder sb = new StrBuilder("abab"); 
         assertEquals(-1, sb.lastIndexOf("a", -1)); 
         assertEquals(0, sb.lastIndexOf("a", 0)); 
         assertEquals(0, sb.lastIndexOf("a", 1)); 
         assertEquals(2, sb.lastIndexOf("a", 2)); 
         assertEquals(2, sb.lastIndexOf("a", 3)); 
         assertEquals(2, sb.lastIndexOf("a", 4)); 
         assertEquals(2, sb.lastIndexOf("a", 5)); 
          
         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); 
         assertEquals("abab".lastIndexOf("", 3), s
 @Test 
     public void testLastIndexOf_String_int1762() { 
         StrBuilder sb = new StrBuilder("abab"); 
         assertEquals(-1, sb.lastIndexOf("a", -1)); 
         assertEquals(0, sb.lastIndexOf("a", 0)); 
         assertEquals(0, sb.lastIndexOf("a", 1)); 
         assertEquals(2, sb.lastIndexOf("a", 2)); 
         assertEquals(2, sb.lastIndexOf("a", 3)); 
         assertEquals(2, sb.lastIndexOf("a", 4)); 
         assertEquals(2, sb.lastIndexOf("a", 5)); 
          
         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); 
         assertEquals("abab".lastIndexOf("", 3), s
 @Test 
     public void testLastIndexOf_StrMatcher_int1763() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); 
          
         sb.append("ab bd"); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); 
         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); 
         assertEquals(0, sb
 @Test 
     public void testLastIndexOf_StrMatcher_int1764() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); 
          
         sb.append("ab bd"); 
         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); 
         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); 
         assertEquals(0, sb
 @Test 
     public void testEqualsIgnoreCase1765() { 
         final StrBuilder sb1 = new StrBuilder(); 
         final StrBuilder sb2 = new StrBuilder(); 
         assertTrue(sb1.equalsIgnoreCase(sb1)); 
         assertTrue(sb1.equalsIgnoreCase(sb2)); 
         assertTrue(sb2.equalsIgnoreCase(sb2)); 
          
         sb1.append("abc"); 
         assertFalse(sb1.equalsIgnoreCase(sb2)); 
          
         sb2.append("ABC"); 
         assertTrue(sb1.equalsIgnoreCase(sb2)); 
          
         sb2.clear().append("abc"); 
         assertTrue(sb1.
 @Test 
     public void testEqualsIgnoreCase1766() { 
         final StrBuilder sb1 = new StrBuilder(); 
         final StrBuilder sb2 = new StrBuilder(); 
         assertTrue(sb1.equalsIgnoreCase(sb1)); 
         assertTrue(sb1.equalsIgnoreCase(sb2)); 
         assertTrue(sb2.equalsIgnoreCase(sb2)); 
          
         sb1.append("abc"); 
         assertFalse(sb1.equalsIgnoreCase(sb2)); 
          
         sb2.append("ABC"); 
         assertTrue(sb1.equalsIgnoreCase(sb2)); 
          
         sb2.clear().append("abc"); 
         assertTrue(sb1.
 @Test 
     public void testEquals1767() { 
         final StrBuilder sb1 = new StrBuilder(); 
         final StrBuilder sb2 = new StrBuilder(); 
         assertTrue(sb1.equals(sb2)); 
         assertTrue(sb1.equals(sb1)); 
         assertTrue(sb2.equals(sb2)); 
         assertTrue(sb1.equals((Object) sb2)); 
          
         sb1.append("abc"); 
         assertFalse(sb1.equals(sb2)); 
         assertFalse(sb1.equals((Object) sb2)); 
          
         sb2.append("ABC"); 
         assertFalse(sb1.equals(sb2)); 
         assertFalse(sb1
 @Test 
     public void testEquals1768() { 
         final StrBuilder sb1 = new StrBuilder(); 
         final int hc2 = sb.hashCode(); 
         final int hc1b = sb.hashCode(); 
         assertEquals(0, hc1a); 
         assertEquals(hc1a, hc1b); 
          
         sb.append("abc"); 
         final int hc2a = sb.hashCode(); 
         final int hc2b = sb.hashCode(); 
         assertTrue(hc2a != 0); 
         assertEquals(hc2a, hc2b); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testHashCode1769() { 
         final StrBuilder sb = new StrBuilder(); 
         final int hc1a = sb.hashCode(); 
         final int hc1b = sb.hashCode(); 
         assertEquals(0, hc1a); 
         assertEquals(hc1a, hc1b); 
          
         sb.append("abc"); 
         final int hc2a = sb.hashCode(); 
         final int hc2b = sb.hashCode(); 
         assertTrue(hc2a != 0); 
         assertEquals(hc2a, hc2b); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testToStringBuilder1770() { 
         final StrBuilder sb = new StrBuilder(); 
         assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString()); 
          
         sb.append("junit"); 
         assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString()); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testEnsureCapacity1771() { 
         final StrBuilder sb = new StrBuilder(); 
         sb.ensureCapacity(2); 
         assertTrue(sb.capacity() >= 2); 
          
         sb.ensureCapacity(-1); 
         assertTrue(sb.capacity() >= 0); 
          
         sb.append("HelloWorld"); 
         sb.ensureCapacity(40); 
         assertTrue(sb.capacity() >= 40); 
     } 
  

 @Test 
     public void testDeleteFirst_StrMatcher1772() { 
         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); 
         sb.deleteFirst((StrMatcher) null); 
         assertEquals("A0xA1A2yA3", sb.toString()); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("xA1A2yA3", sb.toString()); 
  
         sb = new StrBuilder("Ax1"); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("Ax1", sb.toString()); 
  
         sb = new StrBuilder(""); 
         sb.deleteFirst(A_NUMBER_MATCHER); 
         assertEquals("", sb.to
 @Test 
     public void testAsTokenizer1773() throws Exception { 
         // from Javadoc 
         final StrBuilder b = new StrBuilder(); 
         b.append("a b "); 
         final StrTokenizer t = b.asTokenizer(); 
          
         final String[] tokens1 = t.getTokenArray(); 
         assertEquals(2, tokens1.length); 
         assertEquals("a", tokens1[0]); 
         assertEquals("b", tokens1[1]); 
         assertEquals(2, t.size()); 
          
         b.append("c d "); 
         final String[] tokens2 = t.getTokenArray(); 
         assertEquals(2, tokens2.length); 
      
 @Test 
     public void testAsTokenizer1774() throws Exception { 
         // from Javadoc 
         final StrBuilder b = new StrBuilder(); 
         b.append("a b "); 
         final StrTokenizer t = b.asTokenizer(); 
          
         final String[] tokens1 = t.getTokenArray(); 
         assertEquals(2, tokens1.length); 
         assertEquals("a", tokens1[0]); 
         assertEquals("b", tokens1[1]); 
         assertEquals(2, t.size()); 
          
         b.append("c d "); 
         final String[] tokens2 = t.getTokenArray(); 
         assertEquals(2, tokens2.length); 
      
 @Test 
     public void testAsTokenizer1775() throws Exception { 
         // from Javadoc 
         final StrBuilder b = new StrBuilder(); 
         b.append("a b "); 
         final StrTokenizer t = b.asTokenizer(); 
          
         final String[] tokens1 = t.getTokenArray(); 
         assertEquals(2, tokens1.length); 
         assertEquals("a", tokens1[0]); 
         assertEquals("b", tokens1[1]); 
         assertEquals(2, t.size()); 
          
         b.append("c d "); 
         final String[] tokens2 = t.getTokenArray(); 
         assertEquals(2, tokens2.length); 
      
 @Test 
     public void testAsReader1776() throws Exception { 
         final StrBuilder sb = new StrBuilder("some text"); 
         Reader reader = sb.asReader(); 
         assertTrue(reader.ready()); 
         final char[] buf = new char[40]; 
         assertEquals(9, reader.read(buf)); 
         assertEquals("some text", new String(buf, 0, 9)); 
          
         assertEquals(-1, reader.read()); 
         assertFalse(reader.ready()); 
         assertEquals(0, reader.skip(2)); 
         assertEquals(0, reader.skip(-1)); 
          
         assertTrue(reader.markSupported()); 
         reader = sb.asReader(); 
   
 @Test 
     public void testAsReader1777() throws Exception { 
         final StrBuilder sb = new StrBuilder("some text"); 
         Reader reader = sb.asReader(); 
         assertTrue(reader.ready()); 
         final char[] buf = new char[40]; 
         assertEquals(9, reader.read(buf)); 
         assertEquals("some text", new String(buf, 0, 9)); 
          
         assertEquals(-1, reader.read()); 
         assertFalse(reader.ready()); 
         assertEquals(0, reader.skip(2)); 
         assertEquals(0, reader.skip(-1)); 
          
         assertTrue(reader.markSupported()); 
         reader = sb.asReader(); 
   
 @Test 
     public void testAsReader1778() throws Exception { 
         final StrBuilder sb = new StrBuilder("some text"); 
         Reader reader = sb.asReader(); 
         assertTrue(reader.ready()); 
         final char[] buf = new char[40]; 
         assertEquals(9, reader.read(buf)); 
         assertEquals("some text", new String(buf, 0, 9)); 
          
         assertEquals(-1, reader.read()); 
         assertFalse(reader.ready()); 
         assertEquals(0, reader.skip(2)); 
         assertEquals(0, reader.skip(-1)); 
          
         assertTrue(reader.markSupported()); 
         reader = sb.asReader(); 
   
 @Test 
     public void testAsReader1779() throws Exception { 
         final StrBuilder sb = new StrBuilder("some text"); 
         Reader reader = sb.asReader(); 
         assertTrue(reader.ready()); 
         final char[] buf = new char[40]; 
         assertEquals(9, reader.read(buf)); 
         assertEquals("some text", new String(buf, 0, 9)); 
          
         assertEquals(-1, reader.read()); 
         assertFalse(reader.ready()); 
         assertEquals(0, reader.skip(2)); 
         assertEquals(0, reader.skip(-1)); 
          
         assertTrue(reader.markSupported()); 
         reader = sb.asReader(); 
   
 @Test 
     public void testAsWriter1780() throws Exception { 
         final StrBuilder sb = new StrBuilder("base"); 
         final Writer writer = sb.asWriter(); 
          
         writer.write('l'); 
         assertEquals("basel", sb.toString()); 
          
         writer.write(new char[] {'i', 'n'}); 
         assertEquals("baselin", sb.toString()); 
          
         writer.write(new char[] {'n', 'e', 'r'}, 1, 2); 
         assertEquals("baseliner", sb.toString()); 
          
         writer.write(" rout"); 
         assertEquals("baseliner rout", sb.toString()); [EOL
 @Test 
     public void testAsWriter1781() throws Exception { 
         final StrBuilder sb = new StrBuilder("base"); 
         final Writer writer = sb.asWriter(); 
          
         writer.write('l'); 
         assertEquals("basel", sb.toString()); 
          
         writer.write(new char[] {'i', 'n'}); 
         assertEquals("baselin", sb.toString()); 
          
         writer.write(new char[] {'n', 'e', 'r'}, 1, 2); 
         assertEquals("baseliner", sb.toString()); 
          
         writer.write(" rout"); 
         assertEquals("baseliner rout", sb.toString()); [EOL
 lang3/Range.java
 @Test 
     public void testIntersectionWith1782() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

 @Test 
     public void testIntersectionWith1783() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

 @Test 
     public void testMinInt1784() { 
         assertEquals(int, intRange.min(0), intRange.min(0)); 
         assertEquals(10, floatRange.getMinimum()); 
         assertEquals(20f, floatRange.getMinimum()); 
         assertEquals(20, floatRange.getMinimum()); 
     } 
  

 @Test 
     public void testIsAfter1785() { 
         assertFalse(intRange.isAfter(null)); 
          
         assertTrue(intRange.isAfter(5)); 
         assertFalse(intRange.isAfter(10)); 
         assertFalse(intRange.isAfter(15)); 
         assertFalse(intRange.isAfter(20)); 
         assertFalse(intRange.isAfter(25)); 
     } 
  

 @Test 
     public void testIntersectionWith1786() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

 @Test 
     public void testIsAfter1787() { 
         assertFalse(intRange.isAfter(null)); 
          
         assertTrue(intRange.isAfter(5)); 
         assertFalse(intRange.isAfter(10)); 
         assertFalse(intRange.isAfter(15)); 
         assertFalse(intRange.isAfter(20)); 
         assertFalse(intRange.isAfter(25)); 
     } 
  

 @Test 
     public void testIsAfter1788() { 
         assertFalse(intRange.isAfter(null)); 
          
         assertTrue(intRange.isAfter(5)); 
         assertFalse(intRange.isAfter(10)); 
         assertFalse(intRange.isAfter(15)); 
         assertFalse(intRange.isAfter(20)); 
         assertFalse(intRange.isAfter(25)); 
     } 
  

 @Test 
     public void testElementCompareTo1789() { 
         try { 
             intRange.elementCompareTo(null); 
             fail("NullPointerException should have been thrown"); 
         } catch(final NullPointerException npe) { 
             // expected 
         } 
          
         assertEquals(-1, intRange.elementCompareTo(5)); 
         assertEquals(0, intRange.elementCompareTo(10)); 
         assertEquals(0, intRange.elementCompareTo(15)); 
         assertEquals(0, intRange.elementCompareTo(20)); 
         assertEquals(1, intRange.elementCompareTo(25)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testElementCompareTo1790() { 
         try { 
             intRange.elementCompareTo(null); 
             fail("NullPointerException should have been thrown"); 
         } catch(final NullPointerException npe) { 
             // expected 
         } 
          
         assertEquals(-1, intRange.elementCompareTo(5)); 
         assertEquals(0, intRange.elementCompareTo(10)); 
         assertEquals(0, intRange.elementCompareTo(15)); 
         assertEquals(0, intRange.elementCompareTo(20)); 
         assertEquals(1, intRange.elementCompareTo(25)); 
     } 
  
     //----------------------------------------------------------------------- 

 @Test 
     public void testIsAfterRange1791() { 
         assertFalse(intRange.isAfterRange(null)); 
          
         assertTrue(intRange.isAfterRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isAfterRange(Range.between(5, 10))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 20))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 25))); 
         assertFalse(intRange.isAfterRange(Range.between(15, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(10, 20))); 
     }
 @Test 
     public void testIntersectionWith1792() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

 @Test 
     public void testIntersectionWith1793() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

 @Test 
     public void testIntersectionWith1794() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

 @Test 
     public void testIntersectionWith1795() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

 @Test 
     public void testHashCode1796() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

 @Test 
     public void testToString1797() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

 @Test 
     public void testToString1798() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

 lang3/time/FastDateParser.java
 @Test 
     public void testLocales_LongNoEra_BC1799() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1800() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testTimeZoneMatches1801() { 
         final DateParser parser= getInstance(yMdHmsSZ, REYKJAVIK); 
         assertEquals(REYKJAVIK, parser.getTimeZone()); 
     } 
 } 

 @Test 
     public void testTimeZoneMatches1802() { 
         final DateParser parser= getInstance(yMdHmsSZ, REYKJAVIK); 
         assertEquals(REYKJAVIK, parser.getTimeZone()); 
     } 
 } 

 @Test 
     public void testLocales_LongNoEra_BC1803() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testEquals1804() { 
         final DateParser parser1= getInstance(YMD_SLASH); 
         final DateParser parser2= getInstance(YMD_SLASH); 
  
         assertEquals(parser1, parser2); 
         assertEquals(parser1.hashCode(), parser2.hashCode()); 
  
         assertFalse(parser1.equals(new Object())); 
     } 
  

 @Test 
     public void testEquals1805() { 
         final DateParser parser1= getInstance(YMD_SLASH); 
         final DateParser parser2= getInstance(YMD_SLASH); 
  
         assertEquals(parser1, parser2); 
         assertEquals(parser1.hashCode(), parser2.hashCode()); 
  
         assertFalse(parser1.equals(new Object())); 
     } 
  

 @Test 
     public void testLang6451806() { 
         final Locale locale = new Locale("sv", "SE"); 
  
         final Calendar cal = Calendar.getInstance(); 
         cal.set(2010, 0, 1, 12, 0, 0); 
         final Date d = cal.getTime(); 
  
         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); 
  
         assertEquals("fredag, week 53", fdf.format(d)); 
     } 
      

 @Test 
     public void testLocales_LongNoEra_BC1807() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1808() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1809() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1810() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1811() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testDayOf1812() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10); 
  
         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); 
     } 
  
     /** 
      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. 
      * @throws ParseException 
      */ 

 @Test 
     public void testParseNumerics1813() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10, 15, 33, 20); 
         cal.set(Calendar.MILLISECOND, 989); 
  
         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1814() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1815() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1816() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testParseNumerics1817() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10, 15, 33, 20); 
         cal.set(Calendar.MILLISECOND, 989); 
  
         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); 
     } 
  

 @Test 
     public void testDayOf1818() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10); 
  
         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); 
     } 
  
     /** 
      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. 
      * @throws ParseException 
      */ 

 @Test 
     public void testLocales_LongNoEra_BC1819() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1820() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1821() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testParseNumerics1822() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10, 15, 33, 20); 
         cal.set(Calendar.MILLISECOND, 989); 
  
         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); 
     } 
  

 @Test 
     public void testParseNumerics1823() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10, 15, 33, 20); 
         cal.set(Calendar.MILLISECOND, 989); 
  
         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1824() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 @Test 
     public void testParseNumerics1825() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10, 15, 33, 20); 
         cal.set(Calendar.MILLISECOND, 989); 
  
         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); 
     } 
  

 @Test 
     public void testParseNumerics1826() throws ParseException { 
         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); 
         cal.clear(); 
         cal.set(2003, 1, 10, 15, 33, 20); 
         cal.set(Calendar.MILLISECOND, 989); 
  
         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); 
         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); 
     } 
  

 @Test 
     public void testLocales_LongNoEra_BC1827() throws Exception { 
         testLocales(LONG_FORMAT_NOERA, true); 
     } 
  

 lang3/text/ExtendedMessageFormat.java
 @Test 
     public void testEscapedQuote_LANG_4771828() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771829() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771830() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771831() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771832() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771833() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771834() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771835() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771836() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771837() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771838() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771839() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEqualsHashcode1840() { 
         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); 
         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); 
  
         final String pattern = "Pattern: {0,testfmt}"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); 
  
         ExtendedMessageFormat other = null; 
  
         // Same object 
         assertTrue("same, equals()",   emf.equals(emf)); 
         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); 
  
         // Equal Object 
         other = new ExtendedMessageFormat(pattern, Locale.
 @Test 
     public void testEqualsHashcode1841() { 
         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); 
         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); 
  
         final String pattern = "Pattern: {0,testfmt}"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); 
  
         ExtendedMessageFormat other = null; 
  
         // Same object 
         assertTrue("same, equals()",   emf.equals(emf)); 
         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); 
  
         // Equal Object 
         other = new ExtendedMessageFormat(pattern, Locale.
 @Test 
     public void testEqualsHashcode1842() { 
         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); 
         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); 
  
         final String pattern = "Pattern: {0,testfmt}"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); 
  
         ExtendedMessageFormat other = null; 
  
         // Same object 
         assertTrue("same, equals()",   emf.equals(emf)); 
         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); 
  
         // Equal Object 
         other = new ExtendedMessageFormat(pattern, Locale.
 @Test 
     public void testEscapedQuote_LANG_4771843() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771844() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771845() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771846() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771847() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771848() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771849() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771850() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771851() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771852() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771853() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771854() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771855() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771856() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771857() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 @Test 
     public void testEscapedQuote_LANG_4771858() { 
         final String pattern = "it''s a {0,lower} 'test'!"; 
         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); 
         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); 
     } 
  
     /** 
      * Test extended and built in formats. 
      */ 

 lang3/StringEscapeUtils.java
 @Test 
     public void testEscapeSurrogatePairsLang8581859() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

 @Test 
     public void testEscapeSurrogatePairsLang8581860() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

 @Test 
     public void testEscapeSurrogatePairsLang8581861() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

 lang3/concurrent/ConstantInitializer.java
 @Test 
     public void testGet1862() throws ConcurrentException { 
         assertEquals("Wrong object", VALUE, init.get()); 
     } 
  
     /** 
      * Tests equals() if the expected result is true. 
      */ 

 @Test 
     public void testEqualsTrue1863() { 
         checkEquals(init, true); 
         ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>( 
                 Integer.valueOf(VALUE.intValue())); 
         checkEquals(init2, true); 
         init = new ConstantInitializer<Integer>(null); 
         init2 = new ConstantInitializer<Integer>(null); 
         checkEquals(init2, true); 
     } 
  
     /** 
      * Tests equals() if the expected result is false. 
      */ 

 @Test 
     public void testEqualsWithOtherObjects1864() { 
         checkEquals(null, false); 
         checkEquals(this, false); 
         checkEquals(new ConstantInitializer<String>("Test"), false); 
     } 
  
     /** 
      * Tests the string representation. 
      */ 

 @Test 
     public void testEqualsWithOtherObjects1865() { 
         checkEquals(null, false); 
         checkEquals(this, false); 
         checkEquals(new ConstantInitializer<String>("Test"), false); 
     } 
  
     /** 
      * Tests the string representation. 
      */ 

