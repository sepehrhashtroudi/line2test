public static String toString(final Object array) { [EOL]     return toString(array, "{}"); [EOL] } <line_num>: 158
public static String toString(final Object array, final String stringIfNull) { [EOL]     if (array == null) { [EOL]         return stringIfNull; [EOL]     } [EOL]     return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString(); [EOL] } <line_num>: 174
public static int hashCode(final Object array) { [EOL]     return new HashCodeBuilder().append(array).toHashCode(); [EOL] } <line_num>: 189
public static boolean isEquals(final Object array1, final Object array2) { [EOL]     return new EqualsBuilder().append(array1, array2).isEquals(); [EOL] } <line_num>: 203
public static Map<Object, Object> toMap(final Object[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5)); [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Object object = array[i]; [EOL]         if (object instanceof Map.Entry<?, ?>) { [EOL]             final Map.Entry<?, ?> entry = (Map.Entry<?, ?>) object; [EOL]             map.put(entry.getKey(), entry.getValue()); [EOL]         } else if (object instanceof Object[]) { [EOL]             final Object[] entry = (Object[]) object; [EOL]             if (entry.length < 2) { [EOL]                 throw new IllegalArgumentException("Array element " + i + ", '" + object + "', has a length less than 2"); [EOL]             } [EOL]             map.put(entry[0], entry[1]); [EOL]         } else { [EOL]             throw new IllegalArgumentException("Array element " + i + ", '" + object + "', is neither of type Map.Entry nor an Array"); [EOL]         } [EOL]     } [EOL]     return map; [EOL] } <line_num>: 234
public static <T> T[] toArray(final T... items) { [EOL]     return items; [EOL] } <line_num>: 300
public static <T> T[] clone(final T[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 319
public static long[] clone(final long[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 335
public static int[] clone(final int[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 351
public static short[] clone(final short[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 367
public static char[] clone(final char[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 383
public static byte[] clone(final byte[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 399
public static double[] clone(final double[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 415
public static float[] clone(final float[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 431
public static boolean[] clone(final boolean[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     return array.clone(); [EOL] } <line_num>: 447
public static Object[] nullToEmpty(final Object[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 469
public static String[] nullToEmpty(final String[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_STRING_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 489
public static long[] nullToEmpty(final long[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_LONG_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 509
public static int[] nullToEmpty(final int[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_INT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 529
public static short[] nullToEmpty(final short[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_SHORT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 549
public static char[] nullToEmpty(final char[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_CHAR_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 569
public static byte[] nullToEmpty(final byte[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_BYTE_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 589
public static double[] nullToEmpty(final double[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_DOUBLE_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 609
public static float[] nullToEmpty(final float[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_FLOAT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 629
public static boolean[] nullToEmpty(final boolean[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_BOOLEAN_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 649
public static Long[] nullToEmpty(final Long[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_LONG_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 669
public static Integer[] nullToEmpty(final Integer[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_INTEGER_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 689
public static Short[] nullToEmpty(final Short[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_SHORT_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 709
public static Character[] nullToEmpty(final Character[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_CHARACTER_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 729
public static Byte[] nullToEmpty(final Byte[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_BYTE_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 749
public static Double[] nullToEmpty(final Double[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_DOUBLE_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 769
public static Float[] nullToEmpty(final Float[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_FLOAT_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 789
public static Boolean[] nullToEmpty(final Boolean[] array) { [EOL]     if (array == null || array.length == 0) { [EOL]         return EMPTY_BOOLEAN_OBJECT_ARRAY; [EOL]     } [EOL]     return array; [EOL] } <line_num>: 809
public static <T> T[] subarray(final T[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     final Class<?> type = array.getClass().getComponentType(); [EOL]     if (newSize <= 0) { [EOL]         @SuppressWarnings("unchecked") [EOL]         final T[] emptyArray = (T[]) Array.newInstance(type, 0); [EOL]         return emptyArray; [EOL]     } [EOL]     @SuppressWarnings("unchecked") [EOL]     final T[] subarray = (T[]) Array.newInstance(type, newSize); [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 846
public static long[] subarray(final long[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_LONG_ARRAY; [EOL]     } [EOL]     final long[] subarray = new long[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 889
public static int[] subarray(final int[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_INT_ARRAY; [EOL]     } [EOL]     final int[] subarray = new int[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 928
public static short[] subarray(final short[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_SHORT_ARRAY; [EOL]     } [EOL]     final short[] subarray = new short[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 967
public static char[] subarray(final char[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_CHAR_ARRAY; [EOL]     } [EOL]     final char[] subarray = new char[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 1006
public static byte[] subarray(final byte[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_BYTE_ARRAY; [EOL]     } [EOL]     final byte[] subarray = new byte[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 1045
public static double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_DOUBLE_ARRAY; [EOL]     } [EOL]     final double[] subarray = new double[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 1084
public static float[] subarray(final float[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_FLOAT_ARRAY; [EOL]     } [EOL]     final float[] subarray = new float[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 1123
public static boolean[] subarray(final boolean[] array, int startIndexInclusive, int endIndexExclusive) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } [EOL]     if (startIndexInclusive < 0) { [EOL]         startIndexInclusive = 0; [EOL]     } [EOL]     if (endIndexExclusive > array.length) { [EOL]         endIndexExclusive = array.length; [EOL]     } [EOL]     final int newSize = endIndexExclusive - startIndexInclusive; [EOL]     if (newSize <= 0) { [EOL]         return EMPTY_BOOLEAN_ARRAY; [EOL]     } [EOL]     final boolean[] subarray = new boolean[newSize]; [EOL]     System.arraycopy(array, startIndexInclusive, subarray, 0, newSize); [EOL]     return subarray; [EOL] } <line_num>: 1162
public static boolean isSameLength(final Object[] array1, final Object[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1195
public static boolean isSameLength(final long[] array1, final long[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1213
public static boolean isSameLength(final int[] array1, final int[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1231
public static boolean isSameLength(final short[] array1, final short[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1249
public static boolean isSameLength(final char[] array1, final char[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1267
public static boolean isSameLength(final byte[] array1, final byte[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1285
public static boolean isSameLength(final double[] array1, final double[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1303
public static boolean isSameLength(final float[] array1, final float[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1321
public static boolean isSameLength(final boolean[] array1, final boolean[] array2) { [EOL]     if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) { [EOL]         return false; [EOL]     } [EOL]     return true; [EOL] } <line_num>: 1339
public static int getLength(final Object array) { [EOL]     if (array == null) { [EOL]         return 0; [EOL]     } [EOL]     return Array.getLength(array); [EOL] } <line_num>: 1369
public static boolean isSameType(final Object array1, final Object array2) { [EOL]     if (array1 == null || array2 == null) { [EOL]         throw new IllegalArgumentException("The Array must not be null"); [EOL]     } [EOL]     return array1.getClass().getName().equals(array2.getClass().getName()); [EOL] } <line_num>: 1385
public static void reverse(final Object[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     Object tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1403
public static void reverse(final long[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     long tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1426
public static void reverse(final int[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     int tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1449
public static void reverse(final short[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     short tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1472
public static void reverse(final char[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     char tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1495
public static void reverse(final byte[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     byte tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1518
public static void reverse(final double[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     double tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1541
public static void reverse(final float[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     float tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1564
public static void reverse(final boolean[] array) { [EOL]     if (array == null) { [EOL]         return; [EOL]     } [EOL]     int i = 0; [EOL]     int j = array.length - 1; [EOL]     boolean tmp; [EOL]     while (j > i) { [EOL]         tmp = array[j]; [EOL]         array[j] = array[i]; [EOL]         array[i] = tmp; [EOL]         j--; [EOL]         i++; [EOL]     } [EOL] } <line_num>: 1587
public static int indexOf(final Object[] array, final Object objectToFind) { [EOL]     return indexOf(array, objectToFind, 0); [EOL] } <line_num>: 1618
public static int indexOf(final Object[] array, final Object objectToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     if (objectToFind == null) { [EOL]         for (int i = startIndex; i < array.length; i++) { [EOL]             if (array[i] == null) { [EOL]                 return i; [EOL]             } [EOL]         } [EOL]     } else if (array.getClass().getComponentType().isInstance(objectToFind)) { [EOL]         for (int i = startIndex; i < array.length; i++) { [EOL]             if (objectToFind.equals(array[i])) { [EOL]                 return i; [EOL]             } [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 1636
public static int lastIndexOf(final Object[] array, final Object objectToFind) { [EOL]     return lastIndexOf(array, objectToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 1669
public static int lastIndexOf(final Object[] array, final Object objectToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     if (objectToFind == null) { [EOL]         for (int i = startIndex; i >= 0; i--) { [EOL]             if (array[i] == null) { [EOL]                 return i; [EOL]             } [EOL]         } [EOL]     } else if (array.getClass().getComponentType().isInstance(objectToFind)) { [EOL]         for (int i = startIndex; i >= 0; i--) { [EOL]             if (objectToFind.equals(array[i])) { [EOL]                 return i; [EOL]             } [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 1687
public static boolean contains(final Object[] array, final Object objectToFind) { [EOL]     return indexOf(array, objectToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 1721
public static int indexOf(final long[] array, final long valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 1737
public static int indexOf(final long[] array, final long valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 1755
public static int lastIndexOf(final long[] array, final long valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 1780
public static int lastIndexOf(final long[] array, final long valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 1798
public static boolean contains(final long[] array, final long valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 1824
public static int indexOf(final int[] array, final int valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 1840
public static int indexOf(final int[] array, final int valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 1858
public static int lastIndexOf(final int[] array, final int valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 1883
public static int lastIndexOf(final int[] array, final int valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 1901
public static boolean contains(final int[] array, final int valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 1927
public static int indexOf(final short[] array, final short valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 1943
public static int indexOf(final short[] array, final short valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 1961
public static int lastIndexOf(final short[] array, final short valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 1986
public static int lastIndexOf(final short[] array, final short valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2004
public static boolean contains(final short[] array, final short valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 2030
public static int indexOf(final char[] array, final char valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 2047
public static int indexOf(final char[] array, final char valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2066
public static int lastIndexOf(final char[] array, final char valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 2092
public static int lastIndexOf(final char[] array, final char valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2111
public static boolean contains(final char[] array, final char valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 2138
public static int indexOf(final byte[] array, final byte valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 2154
public static int indexOf(final byte[] array, final byte valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2172
public static int lastIndexOf(final byte[] array, final byte valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 2197
public static int lastIndexOf(final byte[] array, final byte valueToFind, int startIndex) { [EOL]     if (array == null) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2215
public static boolean contains(final byte[] array, final byte valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 2241
public static int indexOf(final double[] array, final double valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 2257
public static int indexOf(final double[] array, final double valueToFind, final double tolerance) { [EOL]     return indexOf(array, valueToFind, 0, tolerance); [EOL] } <line_num>: 2274
public static int indexOf(final double[] array, final double valueToFind, int startIndex) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2292
public static int indexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     final double min = valueToFind - tolerance; [EOL]     final double max = valueToFind + tolerance; [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (array[i] >= min && array[i] <= max) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2324
public static int lastIndexOf(final double[] array, final double valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 2351
public static int lastIndexOf(final double[] array, final double valueToFind, final double tolerance) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE, tolerance); [EOL] } <line_num>: 2368
public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2386
public static int lastIndexOf(final double[] array, final double valueToFind, int startIndex, final double tolerance) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     final double min = valueToFind - tolerance; [EOL]     final double max = valueToFind + tolerance; [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (array[i] >= min && array[i] <= max) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2420
public static boolean contains(final double[] array, final double valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 2448
public static boolean contains(final double[] array, final double valueToFind, final double tolerance) { [EOL]     return indexOf(array, valueToFind, 0, tolerance) != INDEX_NOT_FOUND; [EOL] } <line_num>: 2465
public static int indexOf(final float[] array, final float valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 2481
public static int indexOf(final float[] array, final float valueToFind, int startIndex) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2499
public static int lastIndexOf(final float[] array, final float valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 2524
public static int lastIndexOf(final float[] array, final float valueToFind, int startIndex) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2542
public static boolean contains(final float[] array, final float valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 2568
public static int indexOf(final boolean[] array, final boolean valueToFind) { [EOL]     return indexOf(array, valueToFind, 0); [EOL] } <line_num>: 2584
public static int indexOf(final boolean[] array, final boolean valueToFind, int startIndex) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         startIndex = 0; [EOL]     } [EOL]     for (int i = startIndex; i < array.length; i++) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2603
public static int lastIndexOf(final boolean[] array, final boolean valueToFind) { [EOL]     return lastIndexOf(array, valueToFind, Integer.MAX_VALUE); [EOL] } <line_num>: 2629
public static int lastIndexOf(final boolean[] array, final boolean valueToFind, int startIndex) { [EOL]     if (ArrayUtils.isEmpty(array)) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } [EOL]     if (startIndex < 0) { [EOL]         return INDEX_NOT_FOUND; [EOL]     } else if (startIndex >= array.length) { [EOL]         startIndex = array.length - 1; [EOL]     } [EOL]     for (int i = startIndex; i >= 0; i--) { [EOL]         if (valueToFind == array[i]) { [EOL]             return i; [EOL]         } [EOL]     } [EOL]     return INDEX_NOT_FOUND; [EOL] } <line_num>: 2647
public static boolean contains(final boolean[] array, final boolean valueToFind) { [EOL]     return indexOf(array, valueToFind) != INDEX_NOT_FOUND; [EOL] } <line_num>: 2673
public static char[] toPrimitive(final Character[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_CHAR_ARRAY; [EOL]     } [EOL]     final char[] result = new char[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].charValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2691
public static char[] toPrimitive(final Character[] array, final char valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_CHAR_ARRAY; [EOL]     } [EOL]     final char[] result = new char[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Character b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.charValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2713
public static Character[] toObject(final char[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_CHARACTER_OBJECT_ARRAY; [EOL]     } [EOL]     final Character[] result = new Character[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = Character.valueOf(array[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2735
public static long[] toPrimitive(final Long[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_LONG_ARRAY; [EOL]     } [EOL]     final long[] result = new long[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].longValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2759
public static long[] toPrimitive(final Long[] array, final long valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_LONG_ARRAY; [EOL]     } [EOL]     final long[] result = new long[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Long b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.longValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2781
public static Long[] toObject(final long[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_LONG_OBJECT_ARRAY; [EOL]     } [EOL]     final Long[] result = new Long[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = Long.valueOf(array[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2803
public static int[] toPrimitive(final Integer[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_INT_ARRAY; [EOL]     } [EOL]     final int[] result = new int[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].intValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2827
public static int[] toPrimitive(final Integer[] array, final int valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_INT_ARRAY; [EOL]     } [EOL]     final int[] result = new int[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Integer b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.intValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2849
public static Integer[] toObject(final int[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_INTEGER_OBJECT_ARRAY; [EOL]     } [EOL]     final Integer[] result = new Integer[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = Integer.valueOf(array[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2871
public static short[] toPrimitive(final Short[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_SHORT_ARRAY; [EOL]     } [EOL]     final short[] result = new short[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].shortValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2895
public static short[] toPrimitive(final Short[] array, final short valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_SHORT_ARRAY; [EOL]     } [EOL]     final short[] result = new short[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Short b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.shortValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2917
public static Short[] toObject(final short[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_SHORT_OBJECT_ARRAY; [EOL]     } [EOL]     final Short[] result = new Short[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = Short.valueOf(array[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2939
public static byte[] toPrimitive(final Byte[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_BYTE_ARRAY; [EOL]     } [EOL]     final byte[] result = new byte[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].byteValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2963
public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_BYTE_ARRAY; [EOL]     } [EOL]     final byte[] result = new byte[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Byte b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.byteValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 2985
public static Byte[] toObject(final byte[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_BYTE_OBJECT_ARRAY; [EOL]     } [EOL]     final Byte[] result = new Byte[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = Byte.valueOf(array[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3007
public static double[] toPrimitive(final Double[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_DOUBLE_ARRAY; [EOL]     } [EOL]     final double[] result = new double[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].doubleValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3031
public static double[] toPrimitive(final Double[] array, final double valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_DOUBLE_ARRAY; [EOL]     } [EOL]     final double[] result = new double[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Double b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.doubleValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3053
public static Double[] toObject(final double[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_DOUBLE_OBJECT_ARRAY; [EOL]     } [EOL]     final Double[] result = new Double[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = Double.valueOf(array[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3075
public static float[] toPrimitive(final Float[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_FLOAT_ARRAY; [EOL]     } [EOL]     final float[] result = new float[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].floatValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3099
public static float[] toPrimitive(final Float[] array, final float valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_FLOAT_ARRAY; [EOL]     } [EOL]     final float[] result = new float[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Float b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.floatValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3121
public static Float[] toObject(final float[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_FLOAT_OBJECT_ARRAY; [EOL]     } [EOL]     final Float[] result = new Float[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = Float.valueOf(array[i]); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3143
public static boolean[] toPrimitive(final Boolean[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_BOOLEAN_ARRAY; [EOL]     } [EOL]     final boolean[] result = new boolean[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = array[i].booleanValue(); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3167
public static boolean[] toPrimitive(final Boolean[] array, final boolean valueForNull) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_BOOLEAN_ARRAY; [EOL]     } [EOL]     final boolean[] result = new boolean[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         final Boolean b = array[i]; [EOL]         result[i] = (b == null ? valueForNull : b.booleanValue()); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3189
public static Boolean[] toObject(final boolean[] array) { [EOL]     if (array == null) { [EOL]         return null; [EOL]     } else if (array.length == 0) { [EOL]         return EMPTY_BOOLEAN_OBJECT_ARRAY; [EOL]     } [EOL]     final Boolean[] result = new Boolean[array.length]; [EOL]     for (int i = 0; i < array.length; i++) { [EOL]         result[i] = (array[i] ? Boolean.TRUE : Boolean.FALSE); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 3211
public static boolean isEmpty(final Object[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3232
public static boolean isEmpty(final long[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3243
public static boolean isEmpty(final int[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3254
public static boolean isEmpty(final short[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3265
public static boolean isEmpty(final char[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3276
public static boolean isEmpty(final byte[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3287
public static boolean isEmpty(final double[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3298
public static boolean isEmpty(final float[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3309
public static boolean isEmpty(final boolean[] array) { [EOL]     return array == null || array.length == 0; [EOL] } <line_num>: 3320
public static <T> boolean isNotEmpty(final T[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3333
public static boolean isNotEmpty(final long[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3344
public static boolean isNotEmpty(final int[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3355
public static boolean isNotEmpty(final short[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3366
public static boolean isNotEmpty(final char[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3377
public static boolean isNotEmpty(final byte[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3388
public static boolean isNotEmpty(final double[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3399
public static boolean isNotEmpty(final float[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3410
public static boolean isNotEmpty(final boolean[] array) { [EOL]     return (array != null && array.length != 0); [EOL] } <line_num>: 3421
public static <T> T[] addAll(final T[] array1, final T... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final Class<?> type1 = array1.getClass().getComponentType(); [EOL]     @SuppressWarnings("unchecked") [EOL]     final T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length); [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     try { [EOL]         System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     } catch (final ArrayStoreException ase) { [EOL]         final Class<?> type2 = array2.getClass().getComponentType(); [EOL]         if (!type1.isAssignableFrom(type2)) { [EOL]             throw new IllegalArgumentException("Cannot store " + type2.getName() + " in an array of " + type1.getName(), ase); [EOL]         } [EOL]         throw ase; [EOL]     } [EOL]     return joinedArray; [EOL] } <line_num>: 3449
public static boolean[] addAll(final boolean[] array1, final boolean... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final boolean[] joinedArray = new boolean[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3496
public static char[] addAll(final char[] array1, final char... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final char[] joinedArray = new char[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3525
public static byte[] addAll(final byte[] array1, final byte... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final byte[] joinedArray = new byte[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3554
public static short[] addAll(final short[] array1, final short... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final short[] joinedArray = new short[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3583
public static int[] addAll(final int[] array1, final int... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final int[] joinedArray = new int[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3612
public static long[] addAll(final long[] array1, final long... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final long[] joinedArray = new long[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3641
public static float[] addAll(final float[] array1, final float... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final float[] joinedArray = new float[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3670
public static double[] addAll(final double[] array1, final double... array2) { [EOL]     if (array1 == null) { [EOL]         return clone(array2); [EOL]     } else if (array2 == null) { [EOL]         return clone(array1); [EOL]     } [EOL]     final double[] joinedArray = new double[array1.length + array2.length]; [EOL]     System.arraycopy(array1, 0, joinedArray, 0, array1.length); [EOL]     System.arraycopy(array2, 0, joinedArray, array1.length, array2.length); [EOL]     return joinedArray; [EOL] } <line_num>: 3699
public static <T> T[] add(final T[] array, final T element) { [EOL]     Class<?> type; [EOL]     if (array != null) { [EOL]         type = array.getClass(); [EOL]     } else if (element != null) { [EOL]         type = element.getClass(); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Arguments cannot both be null"); [EOL]     } [EOL]     @SuppressWarnings("unchecked") [EOL]     final T[] newArray = (T[]) copyArrayGrow1(array, type); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3740
public static boolean[] add(final boolean[] array, final boolean element) { [EOL]     final boolean[] newArray = (boolean[]) copyArrayGrow1(array, Boolean.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3777
public static byte[] add(final byte[] array, final byte element) { [EOL]     final byte[] newArray = (byte[]) copyArrayGrow1(array, Byte.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3804
public static char[] add(final char[] array, final char element) { [EOL]     final char[] newArray = (char[]) copyArrayGrow1(array, Character.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3831
public static double[] add(final double[] array, final double element) { [EOL]     final double[] newArray = (double[]) copyArrayGrow1(array, Double.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3858
public static float[] add(final float[] array, final float element) { [EOL]     final float[] newArray = (float[]) copyArrayGrow1(array, Float.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3885
public static int[] add(final int[] array, final int element) { [EOL]     final int[] newArray = (int[]) copyArrayGrow1(array, Integer.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3912
public static long[] add(final long[] array, final long element) { [EOL]     final long[] newArray = (long[]) copyArrayGrow1(array, Long.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3939
public static short[] add(final short[] array, final short element) { [EOL]     final short[] newArray = (short[]) copyArrayGrow1(array, Short.TYPE); [EOL]     newArray[newArray.length - 1] = element; [EOL]     return newArray; [EOL] } <line_num>: 3966
private static Object copyArrayGrow1(final Object array, final Class<?> newArrayComponentType) { [EOL]     if (array != null) { [EOL]         final int arrayLength = Array.getLength(array); [EOL]         final Object newArray = Array.newInstance(array.getClass().getComponentType(), arrayLength + 1); [EOL]         System.arraycopy(array, 0, newArray, 0, arrayLength); [EOL]         return newArray; [EOL]     } [EOL]     return Array.newInstance(newArrayComponentType, 1); [EOL] } <line_num>: 3981
public static <T> T[] add(final T[] array, final int index, final T element) { [EOL]     Class<?> clss = null; [EOL]     if (array != null) { [EOL]         clss = array.getClass().getComponentType(); [EOL]     } else if (element != null) { [EOL]         clss = element.getClass(); [EOL]     } else { [EOL]         throw new IllegalArgumentException("Array and element cannot both be null"); [EOL]     } [EOL]     @SuppressWarnings("unchecked") [EOL]     final T[] newArray = (T[]) add(array, index, element, clss); [EOL]     return newArray; [EOL] } <line_num>: 4021
public static boolean[] add(final boolean[] array, final int index, final boolean element) { [EOL]     return (boolean[]) add(array, index, Boolean.valueOf(element), Boolean.TYPE); [EOL] } <line_num>: 4062
public static char[] add(final char[] array, final int index, final char element) { [EOL]     return (char[]) add(array, index, Character.valueOf(element), Character.TYPE); [EOL] } <line_num>: 4094
public static byte[] add(final byte[] array, final int index, final byte element) { [EOL]     return (byte[]) add(array, index, Byte.valueOf(element), Byte.TYPE); [EOL] } <line_num>: 4125
public static short[] add(final short[] array, final int index, final short element) { [EOL]     return (short[]) add(array, index, Short.valueOf(element), Short.TYPE); [EOL] } <line_num>: 4156
public static int[] add(final int[] array, final int index, final int element) { [EOL]     return (int[]) add(array, index, Integer.valueOf(element), Integer.TYPE); [EOL] } <line_num>: 4187
public static long[] add(final long[] array, final int index, final long element) { [EOL]     return (long[]) add(array, index, Long.valueOf(element), Long.TYPE); [EOL] } <line_num>: 4218
public static float[] add(final float[] array, final int index, final float element) { [EOL]     return (float[]) add(array, index, Float.valueOf(element), Float.TYPE); [EOL] } <line_num>: 4249
public static double[] add(final double[] array, final int index, final double element) { [EOL]     return (double[]) add(array, index, Double.valueOf(element), Double.TYPE); [EOL] } <line_num>: 4280
private static Object add(final Object array, final int index, final Object element, final Class<?> clss) { [EOL]     if (array == null) { [EOL]         if (index != 0) { [EOL]             throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0"); [EOL]         } [EOL]         final Object joinedArray = Array.newInstance(clss, 1); [EOL]         Array.set(joinedArray, 0, element); [EOL]         return joinedArray; [EOL]     } [EOL]     final int length = Array.getLength(array); [EOL]     if (index > length || index < 0) { [EOL]         throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length); [EOL]     } [EOL]     final Object result = Array.newInstance(clss, length + 1); [EOL]     System.arraycopy(array, 0, result, 0, index); [EOL]     Array.set(result, index, element); [EOL]     if (index < length) { [EOL]         System.arraycopy(array, index, result, index + 1, length - index); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4295
@SuppressWarnings("unchecked") [EOL] public static <T> T[] remove(final T[] array, final int index) { [EOL]     return (T[]) remove((Object) array, index); [EOL] } <line_num>: 4347
public static <T> T[] removeElement(final T[] array, final Object element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4377
public static boolean[] remove(final boolean[] array, final int index) { [EOL]     return (boolean[]) remove((Object) array, index); [EOL] } <line_num>: 4413
public static boolean[] removeElement(final boolean[] array, final boolean element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4442
public static byte[] remove(final byte[] array, final int index) { [EOL]     return (byte[]) remove((Object) array, index); [EOL] } <line_num>: 4478
public static byte[] removeElement(final byte[] array, final byte element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4507
public static char[] remove(final char[] array, final int index) { [EOL]     return (char[]) remove((Object) array, index); [EOL] } <line_num>: 4543
public static char[] removeElement(final char[] array, final char element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4572
public static double[] remove(final double[] array, final int index) { [EOL]     return (double[]) remove((Object) array, index); [EOL] } <line_num>: 4608
public static double[] removeElement(final double[] array, final double element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4637
public static float[] remove(final float[] array, final int index) { [EOL]     return (float[]) remove((Object) array, index); [EOL] } <line_num>: 4673
public static float[] removeElement(final float[] array, final float element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4702
public static int[] remove(final int[] array, final int index) { [EOL]     return (int[]) remove((Object) array, index); [EOL] } <line_num>: 4738
public static int[] removeElement(final int[] array, final int element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4767
public static long[] remove(final long[] array, final int index) { [EOL]     return (long[]) remove((Object) array, index); [EOL] } <line_num>: 4803
public static long[] removeElement(final long[] array, final long element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4832
public static short[] remove(final short[] array, final int index) { [EOL]     return (short[]) remove((Object) array, index); [EOL] } <line_num>: 4868
public static short[] removeElement(final short[] array, final short element) { [EOL]     final int index = indexOf(array, element); [EOL]     if (index == INDEX_NOT_FOUND) { [EOL]         return clone(array); [EOL]     } [EOL]     return remove(array, index); [EOL] } <line_num>: 4897
private static Object remove(final Object array, final int index) { [EOL]     final int length = getLength(array); [EOL]     if (index < 0 || index >= length) { [EOL]         throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length); [EOL]     } [EOL]     final Object result = Array.newInstance(array.getClass().getComponentType(), length - 1); [EOL]     System.arraycopy(array, 0, result, 0, index); [EOL]     if (index < length - 1) { [EOL]         System.arraycopy(array, index + 1, result, index, length - index - 1); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 4926
@SuppressWarnings("unchecked") [EOL] public static <T> T[] removeAll(final T[] array, final int... indices) { [EOL]     return (T[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 4968
public static <T> T[] removeElements(final T[] array, final T... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<T, MutableInt> occurrences = new HashMap<T, MutableInt>(values.length); [EOL]     for (final T v : values) { [EOL]         final MutableInt count = occurrences.get(v); [EOL]         if (count == null) { [EOL]             occurrences.put(v, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<T, MutableInt> e : occurrences.entrySet()) { [EOL]         final T v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v, found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     @SuppressWarnings("unchecked") [EOL]     final T[] result = (T[]) removeAll(array, toRemove); [EOL]     return result; [EOL] } <line_num>: 5000
public static byte[] removeAll(final byte[] array, final int... indices) { [EOL]     return (byte[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5060
public static byte[] removeElements(final byte[] array, final byte... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Byte, MutableInt> occurrences = new HashMap<Byte, MutableInt>(values.length); [EOL]     for (final byte v : values) { [EOL]         final Byte boxed = Byte.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Byte, MutableInt> e : occurrences.entrySet()) { [EOL]         final Byte v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.byteValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (byte[]) removeAll(array, toRemove); [EOL] } <line_num>: 5091
public static short[] removeAll(final short[] array, final int... indices) { [EOL]     return (short[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5149
public static short[] removeElements(final short[] array, final short... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Short, MutableInt> occurrences = new HashMap<Short, MutableInt>(values.length); [EOL]     for (final short v : values) { [EOL]         final Short boxed = Short.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Short, MutableInt> e : occurrences.entrySet()) { [EOL]         final Short v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.shortValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (short[]) removeAll(array, toRemove); [EOL] } <line_num>: 5180
public static int[] removeAll(final int[] array, final int... indices) { [EOL]     return (int[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5238
public static int[] removeElements(final int[] array, final int... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Integer, MutableInt> occurrences = new HashMap<Integer, MutableInt>(values.length); [EOL]     for (final int v : values) { [EOL]         final Integer boxed = Integer.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Integer, MutableInt> e : occurrences.entrySet()) { [EOL]         final Integer v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.intValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (int[]) removeAll(array, toRemove); [EOL] } <line_num>: 5269
public static char[] removeAll(final char[] array, final int... indices) { [EOL]     return (char[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5327
public static char[] removeElements(final char[] array, final char... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Character, MutableInt> occurrences = new HashMap<Character, MutableInt>(values.length); [EOL]     for (final char v : values) { [EOL]         final Character boxed = Character.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Character, MutableInt> e : occurrences.entrySet()) { [EOL]         final Character v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.charValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (char[]) removeAll(array, toRemove); [EOL] } <line_num>: 5358
public static long[] removeAll(final long[] array, final int... indices) { [EOL]     return (long[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5416
public static long[] removeElements(final long[] array, final long... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Long, MutableInt> occurrences = new HashMap<Long, MutableInt>(values.length); [EOL]     for (final long v : values) { [EOL]         final Long boxed = Long.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Long, MutableInt> e : occurrences.entrySet()) { [EOL]         final Long v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.longValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (long[]) removeAll(array, toRemove); [EOL] } <line_num>: 5447
public static float[] removeAll(final float[] array, final int... indices) { [EOL]     return (float[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5505
public static float[] removeElements(final float[] array, final float... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Float, MutableInt> occurrences = new HashMap<Float, MutableInt>(values.length); [EOL]     for (final float v : values) { [EOL]         final Float boxed = Float.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Float, MutableInt> e : occurrences.entrySet()) { [EOL]         final Float v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.floatValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (float[]) removeAll(array, toRemove); [EOL] } <line_num>: 5536
public static double[] removeAll(final double[] array, final int... indices) { [EOL]     return (double[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5594
public static double[] removeElements(final double[] array, final double... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Double, MutableInt> occurrences = new HashMap<Double, MutableInt>(values.length); [EOL]     for (final double v : values) { [EOL]         final Double boxed = Double.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Double, MutableInt> e : occurrences.entrySet()) { [EOL]         final Double v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.doubleValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (double[]) removeAll(array, toRemove); [EOL] } <line_num>: 5625
public static boolean[] removeAll(final boolean[] array, final int... indices) { [EOL]     return (boolean[]) removeAll((Object) array, clone(indices)); [EOL] } <line_num>: 5679
public static boolean[] removeElements(final boolean[] array, final boolean... values) { [EOL]     if (isEmpty(array) || isEmpty(values)) { [EOL]         return clone(array); [EOL]     } [EOL]     final HashMap<Boolean, MutableInt> occurrences = new HashMap<Boolean, MutableInt>(2); [EOL]     for (final boolean v : values) { [EOL]         final Boolean boxed = Boolean.valueOf(v); [EOL]         final MutableInt count = occurrences.get(boxed); [EOL]         if (count == null) { [EOL]             occurrences.put(boxed, new MutableInt(1)); [EOL]         } else { [EOL]             count.increment(); [EOL]         } [EOL]     } [EOL]     final BitSet toRemove = new BitSet(); [EOL]     for (final Map.Entry<Boolean, MutableInt> e : occurrences.entrySet()) { [EOL]         final Boolean v = e.getKey(); [EOL]         int found = 0; [EOL]         for (int i = 0, ct = e.getValue().intValue(); i < ct; i++) { [EOL]             found = indexOf(array, v.booleanValue(), found); [EOL]             if (found < 0) { [EOL]                 break; [EOL]             } [EOL]             toRemove.set(found++); [EOL]         } [EOL]     } [EOL]     return (boolean[]) removeAll(array, toRemove); [EOL] } <line_num>: 5710
static Object removeAll(final Object array, final int... indices) { [EOL]     final int length = getLength(array); [EOL]     int diff = 0; [EOL]     if (isNotEmpty(indices)) { [EOL]         Arrays.sort(indices); [EOL]         int i = indices.length; [EOL]         int prevIndex = length; [EOL]         while (--i >= 0) { [EOL]             final int index = indices[i]; [EOL]             if (index < 0 || index >= length) { [EOL]                 throw new IndexOutOfBoundsException("Index: " + index + ", Length: " + length); [EOL]             } [EOL]             if (index >= prevIndex) { [EOL]                 continue; [EOL]             } [EOL]             diff++; [EOL]             prevIndex = index; [EOL]         } [EOL]     } [EOL]     final Object result = Array.newInstance(array.getClass().getComponentType(), length - diff); [EOL]     if (diff < length) { [EOL]         int end = length; [EOL]         int dest = length - diff; [EOL]         for (int i = indices.length - 1; i >= 0; i--) { [EOL]             final int index = indices[i]; [EOL]             if (end - index > 1) { [EOL]                 final int cp = end - index - 1; [EOL]                 dest -= cp; [EOL]                 System.arraycopy(array, index + 1, result, dest, cp); [EOL]             } [EOL]             end = index; [EOL]         } [EOL]         if (end > 0) { [EOL]             System.arraycopy(array, 0, result, 0, end); [EOL]         } [EOL]     } [EOL]     return result; [EOL] } <line_num>: 5747
static Object removeAll(final Object array, final BitSet indices) { [EOL]     final int srcLength = ArrayUtils.getLength(array); [EOL]     final int removals = indices.cardinality(); [EOL]     final Object result = Array.newInstance(array.getClass().getComponentType(), srcLength - removals); [EOL]     int srcIndex = 0; [EOL]     int destIndex = 0; [EOL]     int count; [EOL]     int set; [EOL]     while ((set = indices.nextSetBit(srcIndex)) != -1) { [EOL]         count = set - srcIndex; [EOL]         if (count > 0) { [EOL]             System.arraycopy(array, srcIndex, result, destIndex, count); [EOL]             destIndex += count; [EOL]         } [EOL]         srcIndex = indices.nextClearBit(set); [EOL]     } [EOL]     count = srcLength - srcIndex; [EOL]     if (count > 0) { [EOL]         System.arraycopy(array, srcIndex, result, destIndex, count); [EOL]     } [EOL]     return result; [EOL] } <line_num>: 5798
