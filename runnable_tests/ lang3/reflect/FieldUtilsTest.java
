@Test 
     public void testSetContentEnd1020() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setContentEnd(null); 
         assertEquals("", style.getContentEnd()); 
     } 
  

@Test 
     public void testSetFieldNameValueSeparator1021() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldNameValueSeparator(null); 
         assertEquals("", style.getFieldNameValueSeparator()); 
     } 
  

@Test 
     public void testSetFieldNameValueSeparator1022() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldNameValueSeparator(null); 
         assertEquals("", style.getFieldNameValueSeparator()); 
     } 
  

@Test 
     public void testSetFieldNameValueSeparator1023() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldNameValueSeparator(null); 
         assertEquals("", style.getFieldNameValueSeparator()); 
     } 
  

@Test 
     public void testSetFieldNameValueSeparator1024() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldNameValueSeparator(null); 
         assertEquals("", style.getFieldNameValueSeparator()); 
     } 
  

@Test 
     public void testSetFieldNameValueSeparator1025() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldNameValueSeparator(null); 
         assertEquals("", style.getFieldNameValueSeparator()); 
     } 
  

@Test 
     public void testSetFieldNameValueSeparator1026() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldNameValueSeparator(null); 
         assertEquals("", style.getFieldNameValueSeparator()); 
     } 
  

@Test 
     public void testSetFieldSeparator1027() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldSeparator(null); 
         assertEquals("", style.getFieldSeparator()); 
     } 
  

@Test 
     public void testSetFieldSeparator1028() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldSeparator(null); 
         assertEquals("", style.getFieldSeparator()); 
     } 
  

@Test 
     public void testSetFieldSeparator1029() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldSeparator(null); 
         assertEquals("", style.getFieldSeparator()); 
     } 
  

@Test 
     public void testSetFieldSeparator1030() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldSeparator(null); 
         assertEquals("", style.getFieldSeparator()); 
     } 
  

@Test 
     public void testSetFieldSeparator1031() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldSeparator(null); 
         assertEquals("", style.getFieldSeparator()); 
     } 
  

@Test 
     public void testSetFieldSeparator1032() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setFieldSeparator(null); 
         assertEquals("", style.getFieldSeparator()); 
     } 
  

@Test 
     public void testToString1033() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1034() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testSetNullText1035() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setNullText(null); 
         assertEquals("", style.getNullText()); 
     } 
  

@Test 
     public void testSetNullText1036() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setNullText(null); 
         assertEquals("", style.getNullText()); 
     } 
  

@Test 
     public void testSetNullText1037() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setNullText(null); 
         assertEquals("", style.getNullText()); 
     } 
  

@Test 
     public void testSetNullText1038() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setNullText(null); 
         assertEquals("", style.getNullText()); 
     } 
  

@Test 
     public void testSetNullText1039() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setNullText(null); 
         assertEquals("", style.getNullText()); 
     } 
  

@Test 
     public void testSetNullText1040() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setNullText(null); 
         assertEquals("", style.getNullText()); 
     } 
  

@Test 
     public void testSetSizeStartText1041() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeStartText(null); 
         assertEquals("", style.getSizeStartText()); 
     } 
  

@Test 
     public void testSetSizeStartText1042() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeStartText(null); 
         assertEquals("", style.getSizeStartText()); 
     } 
  

@Test 
     public void testSetSizeStartText1043() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeStartText(null); 
         assertEquals("", style.getSizeStartText()); 
     } 
  

@Test 
     public void testSetSizeStartText1044() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeStartText(null); 
         assertEquals("", style.getSizeStartText()); 
     } 
  

@Test 
     public void testSetSizeStartText1045() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeStartText(null); 
         assertEquals("", style.getSizeStartText()); 
     } 
  

@Test 
     public void testSetSizeEndText1046() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeEndText(null); 
         assertEquals("", style.getSizeEndText()); 
     } 
  

@Test 
     public void testSetSizeEndText1047() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeEndText(null); 
         assertEquals("", style.getSizeEndText()); 
     } 
  

@Test 
     public void testSetSizeEndText1048() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeEndText(null); 
         assertEquals("", style.getSizeEndText()); 
     } 
  

@Test 
     public void testSetSizeEndText1049() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeEndText(null); 
         assertEquals("", style.getSizeEndText()); 
     } 
  

@Test 
     public void testSetSizeEndText1050() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeEndText(null); 
         assertEquals("", style.getSizeEndText()); 
     } 
  

@Test 
     public void testSetSizeEndText1051() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSizeEndText(null); 
         assertEquals("", style.getSizeEndText()); 
     } 
  

@Test 
     public void testSetSummaryObjectStartText1052() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectStartText(null); 
         assertEquals("", style.getSummaryObjectStartText()); 
     } 
  

@Test 
     public void testSetSummaryObjectStartText1053() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectStartText(null); 
         assertEquals("", style.getSummaryObjectStartText()); 
     } 
  

@Test 
     public void testSetSummaryObjectStartText1054() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectStartText(null); 
         assertEquals("", style.getSummaryObjectStartText()); 
     } 
  

@Test 
     public void testSetSummaryObjectStartText1055() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectStartText(null); 
         assertEquals("", style.getSummaryObjectStartText()); 
     } 
  

@Test 
     public void testSetSummaryObjectStartText1056() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectStartText(null); 
         assertEquals("", style.getSummaryObjectStartText()); 
     } 
  

@Test 
     public void testSetSummaryObjectStartText1057() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectStartText(null); 
         assertEquals("", style.getSummaryObjectStartText()); 
     } 
  

@Test 
     public void testSetSummaryObjectEndText1058() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  
     /** 
      * An object used to test {@link ToStringStyle}. 
      *  
      */ 
     static class Person { 
         /** 
          * Test String field. 
          */ 
         String name; 
  
         /** 
          * Test integer field. 
          */ 
         int age; 
  
         /** 
          * Test boolean field. 
          */ 
         boolean smoker; 
     } 
 } 

@Test 
     public void testSetSummaryObjectEndText1059() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  
     /** 
      * An object used to test {@link ToStringStyle}. 
      *  
      */ 
     static class Person { 
         /** 
          * Test String field. 
          */ 
         String name; 
  
         /** 
          * Test integer field. 
          */ 
         int age; 
  
         /** 
          * Test boolean field. 
          */ 
         boolean smoker; 
     } 
 } 

@Test 
     public void testSetSummaryObjectEndText1060() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  
     /** 
      * An object used to test {@link ToStringStyle}. 
      *  
      */ 
     static class Person { 
         /** 
          * Test String field. 
          */ 
         String name; 
  
         /** 
          * Test integer field. 
          */ 
         int age; 
  
         /** 
          * Test boolean field. 
          */ 
         boolean smoker; 
     } 
 } 

@Test 
     public void testSetSummaryObjectEndText1061() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  
     /** 
      * An object used to test {@link ToStringStyle}. 
      *  
      */ 
     static class Person { 
         /** 
          * Test String field. 
          */ 
         String name; 
  
         /** 
          * Test integer field. 
          */ 
         int age; 
  
         /** 
          * Test boolean field. 
          */ 
         boolean smoker; 
     } 
 } 

@Test 
     public void testSetSummaryObjectEndText1062() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  
     /** 
      * An object used to test {@link ToStringStyle}. 
      *  
      */ 
     static class Person { 
         /** 
          * Test String field. 
          */ 
         String name; 
  
         /** 
          * Test integer field. 
          */ 
         int age; 
  
         /** 
          * Test boolean field. 
          */ 
         boolean smoker; 
     } 
 } 

@Test 
     public void testSetSummaryObjectEndText1063() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setSummaryObjectEndText(null); 
         assertEquals("", style.getSummaryObjectEndText()); 
     } 
  
     /** 
      * An object used to test {@link ToStringStyle}. 
      *  
      */ 
     static class Person { 
         /** 
          * Test String field. 
          */ 
         String name; 
  
         /** 
          * Test integer field. 
          */ 
         int age; 
  
         /** 
          * Test boolean field. 
          */ 
         boolean smoker; 
     } 
 } 

@Test 
     public void testToString1064() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1065() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1066() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1067() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1068() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1069() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1070() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1071() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1072() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1073() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1074() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1075() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1076() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1077() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1078() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1079() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1080() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1081() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1082() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1083() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1084() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1085() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testGetTypeArguments1086() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1087() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1088() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1089() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1090() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testIsAssignable1091() throws SecurityException, NoSuchMethodException, 
             NoSuchFieldException { 
         List list0 = null; 
         List<Object> list1 = null; 
         List<?> list2 = null; 
         List<? super Object> list3 = null; 
         List<String> list4 = null; 
         List<? extends String> list5 = null; 
         List<? super String> list6 = null; 
         List[] list7 = null; 
         List<Object>[] list8 = null; 
         List<?>[] list9 = null; 
         List<? super Object>[] list10 = null; 
         List<String>[] list11 = null; 
         List<? extends String>[] list12 = null; 
         List<? super String>[] list13; 
         final Class<?> clazz = getClass(); 
         final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); [E
@Test 
     public void testIsAssignable1092() throws SecurityException, NoSuchMethodException, 
             NoSuchFieldException { 
         List list0 = null; 
         List<Object> list1 = null; 
         List<?> list2 = null; 
         List<? super Object> list3 = null; 
         List<String> list4 = null; 
         List<? extends String> list5 = null; 
         List<? super String> list6 = null; 
         List[] list7 = null; 
         List<Object>[] list8 = null; 
         List<?>[] list9 = null; 
         List<? super Object>[] list10 = null; 
         List<String>[] list11 = null; 
         List<? extends String>[] list12 = null; 
         List<? super String>[] list13; 
         final Class<?> clazz = getClass(); 
         final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); [E
@Test 
     public void testGetTypeArguments1093() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testIsAssignable1094() throws SecurityException, NoSuchMethodException, 
             NoSuchFieldException { 
         List list0 = null; 
         List<Object> list1 = null; 
         List<?> list2 = null; 
         List<? super Object> list3 = null; 
         List<String> list4 = null; 
         List<? extends String> list5 = null; 
         List<? super String> list6 = null; 
         List[] list7 = null; 
         List<Object>[] list8 = null; 
         List<?>[] list9 = null; 
         List<? super Object>[] list10 = null; 
         List<String>[] list11 = null; 
         List<? extends String>[] list12 = null; 
         List<? super String>[] list13; 
         final Class<?> clazz = getClass(); 
         final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); [E
@Test 
     public void testGetTypeArguments1095() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1096() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1097() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1098() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1099() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1100() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1101() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1102() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1103() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1104() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testIsAssignable1105() throws SecurityException, NoSuchMethodException, 
             NoSuchFieldException { 
         List list0 = null; 
         List<Object> list1 = null; 
         List<?> list2 = null; 
         List<? super Object> list3 = null; 
         List<String> list4 = null; 
         List<? extends String> list5 = null; 
         List<? super String> list6 = null; 
         List[] list7 = null; 
         List<Object>[] list8 = null; 
         List<?>[] list9 = null; 
         List<? super Object>[] list10 = null; 
         List<String>[] list11 = null; 
         List<? extends String>[] list12 = null; 
         List<? super String>[] list13; 
         final Class<?> clazz = getClass(); 
         final Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); [E
@Test 
     public void testIsInstance1106() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1107() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1108() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1109() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1110() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1111() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1112() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1113() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1114() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testGetTypeArguments1115() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1116() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1117() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1118() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1119() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1120() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1121() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1122() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1123() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1124() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1125() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1126() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1127() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1128() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1129() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1130() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1131() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1132() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1133() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1134() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1135() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1136() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1137() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1138() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1139() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1140() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1141() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testDetermineTypeVariableAssignments1142() throws SecurityException, 
             NoSuchFieldException, NoSuchMethodException { 
         final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable") 
                 .getGenericType(); 
         final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, 
                 iterableType); 
         final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; 
         Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); 
         Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns 
                 .get(treeSetTypeVar)); 
     } 
  

@Test 
     public void testDetermineTypeVariableAssignments1143() throws SecurityException, 
             NoSuchFieldException, NoSuchMethodException { 
         final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable") 
                 .getGenericType(); 
         final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, 
                 iterableType); 
         final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; 
         Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); 
         Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns 
                 .get(treeSetTypeVar)); 
     } 
  

@Test 
     public void testDetermineTypeVariableAssignments1144() throws SecurityException, 
             NoSuchFieldException, NoSuchMethodException { 
         final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable") 
                 .getGenericType(); 
         final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, 
                 iterableType); 
         final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; 
         Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); 
         Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns 
                 .get(treeSetTypeVar)); 
     } 
  

@Test 
     public void testDetermineTypeVariableAssignments1145() throws SecurityException, 
             NoSuchFieldException, NoSuchMethodException { 
         final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable") 
                 .getGenericType(); 
         final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, 
                 iterableType); 
         final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; 
         Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); 
         Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns 
                 .get(treeSetTypeVar)); 
     } 
  

@Test 
     public void testDetermineTypeVariableAssignments1146() throws SecurityException, 
             NoSuchFieldException, NoSuchMethodException { 
         final ParameterizedType iterableType = (ParameterizedType) getClass().getField("iterable") 
                 .getGenericType(); 
         final Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class, 
                 iterableType); 
         final TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0]; 
         Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar)); 
         Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns 
                 .get(treeSetTypeVar)); 
     } 
  

@Test 
     public void testGetTypeArguments1147() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1148() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testGetTypeArguments1149() { 
         Map<TypeVariable<?>, Type> typeVarAssigns; 
         TypeVariable<?> treeSetTypeVar; 
         Type typeArg; 
  
         typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class, 
                 typeVarAssigns.get(treeSetTypeVar)); 
  
         typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class); 
         treeSetTypeVar = Comparable.class.getTypeParameters()[0]; 
         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns, 
                 typeVarAssigns.containsKey(treeSetTypeVar)); 
         typeArg = typeVarAssigns.get(treeSetTypeVar); 
       
@Test 
     public void testIsInstance1150() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1151() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testIsInstance1152() throws SecurityException, NoSuchFieldException { 
         final Type intComparableType = getClass().getField("intComparable").getGenericType(); 
         final Type uriComparableType = getClass().getField("uriComparable").getGenericType(); 
         intComparable = 1; 
         Assert.assertTrue(TypeUtils.isInstance(1, intComparableType)); 
         // uriComparable = 1; 
         Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType)); 
     } 
  

@Test 
     public void testLang8201153() throws Exception { 
         final Type[] typeArray = {String.class, String.class}; 
         final Type[] expectedArray = {String.class}; 
         Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray)); 
     } 
  
     public Iterable<? extends Map<Integer, ? extends Collection<?>>> iterable; 
  
     public static <G extends Comparable<G>> G stub() { 
         return null; 
     } 
  
     public static <G extends Comparable<? super G>> G stub2() { 
         return null; 
     } 
  
     public static <T extends Comparable<? extends T>> T stub3() { 
         return null; 
     } 
 } 
  
 class AAClass<T> { 
  
     public class BBClass<S> { 
     } 
 } 
  
 class AAAClass extends AAClass<String> { 
     public class BBBClass extends BBClass<String> { 
     } 
 } 
  
 @SuppressWarnings("rawtypes") 
 //raw types, where used, are used purposely 
 class AClass extends AAClass<String>.BBClass<Number> { 
  
     public AClass(final AAClass<String> enclosingInstance) { 
 
@Test 
     public void testLang8201154() throws Exception { 
         final Type[] typeArray = {String.class, String.class}; 
         final Type[] expectedArray = {String.class}; 
         Assert.assertArrayEquals(expectedArray, TypeUtils.normalizeUpperBounds(typeArray)); 
     } 
  
     public Iterable<? extends Map<Integer, ? extends Collection<?>>> iterable; 
  
     public static <G extends Comparable<G>> G stub() { 
         return null; 
     } 
  
     public static <G extends Comparable<? super G>> G stub2() { 
         return null; 
     } 
  
     public static <T extends Comparable<? extends T>> T stub3() { 
         return null; 
     } 
 } 
  
 class AAClass<T> { 
  
     public class BBClass<S> { 
     } 
 } 
  
 class AAAClass extends AAClass<String> { 
     public class BBBClass extends BBClass<String> { 
     } 
 } 
  
 @SuppressWarnings("rawtypes") 
 //raw types, where used, are used purposely 
 class AClass extends AAClass<String>.BBClass<Number> { 
  
     public AClass(final AAClass<String> enclosingInstance) { 
 
@Test 
     public void testDateTimeISO1192(){ 
         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); 
         final Calendar cal = Calendar.getInstance(timeZone); 
         cal.set(2002,1,23,9,11,12); 
         String text = DateFormatUtils.format(cal.getTime(),  
                         DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone); 
         assertEquals("2002-02-23T09:11:12", text); 
         text = DateFormatUtils.format(cal.getTime().getTime(),  
                       DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone); 
         assertEquals("2002-02-23T09:11:12", text); 
         text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal); 
         assertEquals("2002-02-23T09:11:12", text); 
          
         text = DateFormatUtils.format(cal.getTime(),  
                       DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone); 
         assertEquals("2002-02-23T09:11:12-03:00
@Test 
     public void testFormatUTC1193() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); 
          
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); 
          
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); 
          
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); 
     } 
      

