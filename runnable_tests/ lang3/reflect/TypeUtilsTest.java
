@Test 
     public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow83() { 
         //given 
         final String string = "  abc   "; 
  
         //when 
         Validate.notBlank(string, "Message"); 
  
         //then should not throw 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow84() { 
         //given 
         final String string = "  abc   "; 
  
         //when 
         Validate.notBlank(string, "Message"); 
  
         //then should not throw 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNotBlankMsgNotBlankStringWithWhitespacesShouldNotThrow85() { 
         //given 
         final String string = "  abc   "; 
  
         //when 
         Validate.notBlank(string, "Message"); 
  
         //then should not throw 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray286() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array, "MSG"); 
         try { 
             Validate.noNullElements((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array, "Message"); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray287() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array, "MSG"); 
         try { 
             Validate.noNullElements((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array, "Message"); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray288() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array, "MSG"); 
         try { 
             Validate.noNullElements((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array, "Message"); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray289() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array, "MSG"); 
         try { 
             Validate.noNullElements((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array, "Message"); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray290() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array, "MSG"); 
         try { 
             Validate.noNullElements((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array, "Message"); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray291() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array, "MSG"); 
         try { 
             Validate.noNullElements((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array, "Message"); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray292() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array, "MSG"); 
         try { 
             Validate.noNullElements((Object[]) null, "MSG"); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array, "MSG"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("MSG", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array, "Message"); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray193() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array); 
         try { 
             Validate.noNullElements((Object[]) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated array contains null element at index: 1", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsArray194() { 
         String[] array = new String[] {"a", "b"}; 
         Validate.noNullElements(array); 
         try { 
             Validate.noNullElements((Object[]) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         array[1] = null; 
         try { 
             Validate.noNullElements(array); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated array contains null element at index: 1", ex.getMessage()); 
         } 
          
         array = new String[] {"a", "b"}; 
         final String[] test = Validate.noNullElements(array); 
         assertSame(array, test); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNoNullElementsCollection195() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection196() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection197() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection198() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection199() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection1100() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection1101() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection1102() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection1103() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testNoNullElementsCollection1104() { 
         final List<String> coll = new ArrayList<String>(); 
         coll.add("a"); 
         coll.add("b"); 
         Validate.noNullElements(coll); 
         try { 
             Validate.noNullElements((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated object is null", ex.getMessage()); 
         } 
         coll.set(1, null); 
         try { 
             Validate.noNullElements(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection contains null element at index: 1", ex.getMessage()); 
         } 
          
         coll.set(1, "b"); 
         final List<String> test = Validate.noNullElements(coll); 
         assertSame(coll, test); 
     } 
  
 
@Test 
     public void testValidIndex_array105() { 
         final Object[] array = new Object[2]; 
         Validate.validIndex(array, 0); 
         Validate.validIndex(array, 1); 
         try { 
             Validate.validIndex(array, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(array, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: 2", ex.getMessage()); 
         } 
          
         final String[] strArray = new String[] {"Hi"}; 
         final String[] test = Validate.noNullElements(strArray); 
         assertSame(strArray, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testValidIndex_array106() { 
         final Object[] array = new Object[2]; 
         Validate.validIndex(array, 0); 
         Validate.validIndex(array, 1); 
         try { 
             Validate.validIndex(array, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(array, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: 2", ex.getMessage()); 
         } 
          
         final String[] strArray = new String[] {"Hi"}; 
         final String[] test = Validate.noNullElements(strArray); 
         assertSame(strArray, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testValidIndex_array107() { 
         final Object[] array = new Object[2]; 
         Validate.validIndex(array, 0); 
         Validate.validIndex(array, 1); 
         try { 
             Validate.validIndex(array, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(array, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: 2", ex.getMessage()); 
         } 
          
         final String[] strArray = new String[] {"Hi"}; 
         final String[] test = Validate.noNullElements(strArray); 
         assertSame(strArray, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testValidIndex_array108() { 
         final Object[] array = new Object[2]; 
         Validate.validIndex(array, 0); 
         Validate.validIndex(array, 1); 
         try { 
             Validate.validIndex(array, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(array, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: 2", ex.getMessage()); 
         } 
          
         final String[] strArray = new String[] {"Hi"}; 
         final String[] test = Validate.noNullElements(strArray); 
         assertSame(strArray, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testValidIndex_array109() { 
         final Object[] array = new Object[2]; 
         Validate.validIndex(array, 0); 
         Validate.validIndex(array, 1); 
         try { 
             Validate.validIndex(array, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(array, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: 2", ex.getMessage()); 
         } 
          
         final String[] strArray = new String[] {"Hi"}; 
         final String[] test = Validate.noNullElements(strArray); 
         assertSame(strArray, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testValidIndex_array110() { 
         final Object[] array = new Object[2]; 
         Validate.validIndex(array, 0); 
         Validate.validIndex(array, 1); 
         try { 
             Validate.validIndex(array, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(array, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: 2", ex.getMessage()); 
         } 
          
         final String[] strArray = new String[] {"Hi"}; 
         final String[] test = Validate.noNullElements(strArray); 
         assertSame(strArray, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testValidIndex_array111() { 
         final Object[] array = new Object[2]; 
         Validate.validIndex(array, 0); 
         Validate.validIndex(array, 1); 
         try { 
             Validate.validIndex(array, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(array, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated array index is invalid: 2", ex.getMessage()); 
         } 
          
         final String[] strArray = new String[] {"Hi"}; 
         final String[] test = Validate.noNullElements(strArray); 
         assertSame(strArray, test); 
     } 
  
     //----------------------------------------------------------------------- 
     //----------------------------------------------------------------------- 

@Test 
     public void testValidIndex_collection112() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0); 
         Validate.validIndex(coll, 1); 
         try { 
             Validate.validIndex(coll, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: 2", ex.getMessage()); 
         } 
          
         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); 
         final List<String> test = Validate.validIndex(strColl, 0); 
         assertSame(strColl
@Test 
     public void testValidIndex_collection113() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0); 
         Validate.validIndex(coll, 1); 
         try { 
             Validate.validIndex(coll, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: 2", ex.getMessage()); 
         } 
          
         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); 
         final List<String> test = Validate.validIndex(strColl, 0); 
         assertSame(strColl
@Test 
     public void testValidIndex_collection114() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0); 
         Validate.validIndex(coll, 1); 
         try { 
             Validate.validIndex(coll, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: 2", ex.getMessage()); 
         } 
          
         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); 
         final List<String> test = Validate.validIndex(strColl, 0); 
         assertSame(strColl
@Test 
     public void testValidIndex_collection115() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0); 
         Validate.validIndex(coll, 1); 
         try { 
             Validate.validIndex(coll, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: 2", ex.getMessage()); 
         } 
          
         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); 
         final List<String> test = Validate.validIndex(strColl, 0); 
         assertSame(strColl
@Test 
     public void testValidIndex_collection116() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0); 
         Validate.validIndex(coll, 1); 
         try { 
             Validate.validIndex(coll, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: 2", ex.getMessage()); 
         } 
          
         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); 
         final List<String> test = Validate.validIndex(strColl, 0); 
         assertSame(strColl
@Test 
     public void testValidIndex_collection117() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0); 
         Validate.validIndex(coll, 1); 
         try { 
             Validate.validIndex(coll, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: 2", ex.getMessage()); 
         } 
          
         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); 
         final List<String> test = Validate.validIndex(strColl, 0); 
         assertSame(strColl
@Test 
     public void testValidIndex_collection118() { 
         final Collection<String> coll = new ArrayList<String>(); 
         coll.add(null); 
         coll.add(null); 
         Validate.validIndex(coll, 0); 
         Validate.validIndex(coll, 1); 
         try { 
             Validate.validIndex(coll, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(coll, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated collection index is invalid: 2", ex.getMessage()); 
         } 
          
         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); 
         final List<String> test = Validate.validIndex(strColl, 0); 
         assertSame(strColl
@Test 
     public void testValidIndex_withMessage_charSequence119() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0, "Broken: "); 
         Validate.validIndex(str, 1, "Broken: "); 
         try { 
             Validate.validIndex(str, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
          
         final String input = "Hi"; 
         final String test = Validate.validIndex(input, 0, "Message"); 
         assertSame(input, test); 
     } 
  

@Test 
     public void testValidIndex_withMessage_charSequence120() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0, "Broken: "); 
         Validate.validIndex(str, 1, "Broken: "); 
         try { 
             Validate.validIndex(str, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
          
         final String input = "Hi"; 
         final String test = Validate.validIndex(input, 0, "Message"); 
         assertSame(input, test); 
     } 
  

@Test 
     public void testValidIndex_withMessage_charSequence121() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0, "Broken: "); 
         Validate.validIndex(str, 1, "Broken: "); 
         try { 
             Validate.validIndex(str, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
          
         final String input = "Hi"; 
         final String test = Validate.validIndex(input, 0, "Message"); 
         assertSame(input, test); 
     } 
  

@Test 
     public void testValidIndex_withMessage_charSequence122() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0, "Broken: "); 
         Validate.validIndex(str, 1, "Broken: "); 
         try { 
             Validate.validIndex(str, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
          
         final String input = "Hi"; 
         final String test = Validate.validIndex(input, 0, "Message"); 
         assertSame(input, test); 
     } 
  

@Test 
     public void testValidIndex_withMessage_charSequence123() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0, "Broken: "); 
         Validate.validIndex(str, 1, "Broken: "); 
         try { 
             Validate.validIndex(str, -1, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2, "Broken: "); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("Broken: ", ex.getMessage()); 
         } 
          
         final String input = "Hi"; 
         final String test = Validate.validIndex(input, 0, "Message"); 
         assertSame(input, test); 
     } 
  

@Test 
     public void testValidIndex_charSequence124() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0); 
         Validate.validIndex(str, 1); 
         try { 
             Validate.validIndex(str, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); 
         } 
          
         final String input = "Hi"; 
         final String test = Validate.validIndex(input, 0); 
         assertSame(input, test); 
     } 
      

@Test 
     public void testValidIndex_charSequence125() { 
         final CharSequence str = "Hi"; 
         Validate.validIndex(str, 0); 
         Validate.validIndex(str, 1); 
         try { 
             Validate.validIndex(str, -1); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated character sequence index is invalid: -1", ex.getMessage()); 
         } 
         try { 
             Validate.validIndex(str, 2); 
             fail("Expecting IndexOutOfBoundsException"); 
         } catch (final IndexOutOfBoundsException ex) { 
             assertEquals("The validated character sequence index is invalid: 2", ex.getMessage()); 
         } 
          
         final String input = "Hi"; 
         final String test = Validate.validIndex(input, 0); 
         assertSame(input, test); 
     } 
      

@Test 
     public void testMatchesPattern126() 
     { 
         final CharSequence str = "hi"; 
         Validate.matchesPattern(str, "[a-z]*"); 
         try 
         { 
             Validate.matchesPattern(str, "[0-9]*"); 
             fail("Expecting IllegalArgumentException"); 
         } 
         catch (final IllegalArgumentException e) 
         { 
             assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testMatchesPattern127() 
     { 
         final CharSequence str = "hi"; 
         Validate.matchesPattern(str, "[a-z]*"); 
         try 
         { 
             Validate.matchesPattern(str, "[0-9]*"); 
             fail("Expecting IllegalArgumentException"); 
         } 
         catch (final IllegalArgumentException e) 
         { 
             assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testMatchesPattern128() 
     { 
         final CharSequence str = "hi"; 
         Validate.matchesPattern(str, "[a-z]*"); 
         try 
         { 
             Validate.matchesPattern(str, "[0-9]*"); 
             fail("Expecting IllegalArgumentException"); 
         } 
         catch (final IllegalArgumentException e) 
         { 
             assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testMatchesPattern_withMessage129() 
     { 
         final CharSequence str = "hi"; 
         Validate.matchesPattern(str, "[a-z]*", "Does not match"); 
         try 
         { 
             Validate.matchesPattern(str, "[0-9]*", "Does not match"); 
             fail("Expecting IllegalArgumentException"); 
         } 
         catch (final IllegalArgumentException e) 
         { 
             assertEquals("Does not match", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testMatchesPattern_withMessage130() 
     { 
         final CharSequence str = "hi"; 
         Validate.matchesPattern(str, "[a-z]*", "Does not match"); 
         try 
         { 
             Validate.matchesPattern(str, "[0-9]*", "Does not match"); 
             fail("Expecting IllegalArgumentException"); 
         } 
         catch (final IllegalArgumentException e) 
         { 
             assertEquals("Does not match", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testMatchesPattern_withMessage131() 
     { 
         final CharSequence str = "hi"; 
         Validate.matchesPattern(str, "[a-z]*", "Does not match"); 
         try 
         { 
             Validate.matchesPattern(str, "[0-9]*", "Does not match"); 
             fail("Expecting IllegalArgumentException"); 
         } 
         catch (final IllegalArgumentException e) 
         { 
             assertEquals("Does not match", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testInclusiveBetween132() 
     { 
         Validate.inclusiveBetween("a", "c", "b"); 
         Validate.inclusiveBetween(0, 2, 1); 
         Validate.inclusiveBetween(0, 2, 2); 
         try { 
             Validate.inclusiveBetween(0, 5, 6); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testInclusiveBetween133() 
     { 
         Validate.inclusiveBetween("a", "c", "b"); 
         Validate.inclusiveBetween(0, 2, 1); 
         Validate.inclusiveBetween(0, 2, 2); 
         try { 
             Validate.inclusiveBetween(0, 5, 6); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testInclusiveBetween134() 
     { 
         Validate.inclusiveBetween("a", "c", "b"); 
         Validate.inclusiveBetween(0, 2, 1); 
         Validate.inclusiveBetween(0, 2, 2); 
         try { 
             Validate.inclusiveBetween(0, 5, 6); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("The value 6 is not in the specified inclusive range of 0 to 5", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testInclusiveBetween_withMessage135() 
     { 
         Validate.inclusiveBetween("a", "c", "b", "Error"); 
         Validate.inclusiveBetween(0, 2, 1, "Error"); 
         Validate.inclusiveBetween(0, 2, 2, "Error"); 
         try { 
             Validate.inclusiveBetween(0, 5, 6, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testInclusiveBetween_withMessage136() 
     { 
         Validate.inclusiveBetween("a", "c", "b", "Error"); 
         Validate.inclusiveBetween(0, 2, 1, "Error"); 
         Validate.inclusiveBetween(0, 2, 2, "Error"); 
         try { 
             Validate.inclusiveBetween(0, 5, 6, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testExclusiveBetween137() 
     { 
         Validate.exclusiveBetween("a", "c", "b"); 
         Validate.exclusiveBetween(0, 2, 1); 
         try { 
             Validate.exclusiveBetween(0, 5, 6); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("The value 6 is not in the specified exclusive range of 0 to 5", e.getMessage()); 
         } 
         try { 
             Validate.exclusiveBetween(0, 5, 5); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("The value 5 is not in the specified exclusive range of 0 to 5", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testExclusiveBetween138() 
     { 
         Validate.exclusiveBetween("a", "c", "b"); 
         Validate.exclusiveBetween(0, 2, 1); 
         try { 
             Validate.exclusiveBetween(0, 5, 6); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("The value 6 is not in the specified exclusive range of 0 to 5", e.getMessage()); 
         } 
         try { 
             Validate.exclusiveBetween(0, 5, 5); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("The value 5 is not in the specified exclusive range of 0 to 5", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testExclusiveBetween_withMessage139() 
     { 
         Validate.exclusiveBetween("a", "c", "b", "Error"); 
         Validate.exclusiveBetween(0, 2, 1, "Error"); 
         try { 
             Validate.exclusiveBetween(0, 5, 6, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
         try { 
             Validate.exclusiveBetween(0, 5, 5, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
  

@Test 
     public void testExclusiveBetween_withMessage140() 
     { 
         Validate.exclusiveBetween("a", "c", "b", "Error"); 
         Validate.exclusiveBetween(0, 2, 1, "Error"); 
         try { 
             Validate.exclusiveBetween(0, 5, 6, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
         try { 
             Validate.exclusiveBetween(0, 5, 5, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
  

@Test 
     public void testExclusiveBetween_withMessage141() 
     { 
         Validate.exclusiveBetween("a", "c", "b", "Error"); 
         Validate.exclusiveBetween(0, 2, 1, "Error"); 
         try { 
             Validate.exclusiveBetween(0, 5, 6, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
         try { 
             Validate.exclusiveBetween(0, 5, 5, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
  

@Test 
     public void testIsInstanceOfExceptionMessage142() { 
         try { 
             Validate.isInstanceOf(List.class, "hi"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsInstanceOfExceptionMessage143() { 
         try { 
             Validate.isInstanceOf(List.class, "hi"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsInstanceOfExceptionMessage144() { 
         try { 
              Validate.isInstanceOf(List.class, "hi"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsInstanceOf_withMessage145() { 
         Validate.isInstanceOf(String.class, "hi", "Error"); 
         Validate.isInstanceOf(Integer.class, 1, "Error"); 
         try { 
             Validate.isInstanceOf(List.class, "hi", "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsInstanceOf_withMessage146() { 
         Validate.isInstanceOf(String.class, "hi", "Error"); 
         Validate.isInstanceOf(Integer.class, 1, "Error"); 
         try { 
             Validate.isInstanceOf(List.class, "hi", "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsInstanceOf_withMessage147() { 
         Validate.isInstanceOf(String.class, "hi", "Error"); 
         Validate.isInstanceOf(Integer.class, 1, "Error"); 
         try { 
             Validate.isInstanceOf(List.class, "hi", "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsAssignableExceptionMessage148() { 
         try { 
             Validate.isAssignableFrom(List.class, String.class); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Cannot assign a java.lang.String to a java.util.List", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsAssignableExceptionMessage149() { 
         try { 
             Validate.isAssignableFrom(List.class, String.class); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Cannot assign a java.lang.String to a java.util.List", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsAssignableExceptionMessage150() { 
         try { 
             Validate.isAssignableFrom(List.class, String.class); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Cannot assign a java.lang.String to a java.util.List", e.getMessage()); 
         } 
     } 
      

@Test 
     public void testIsAssignable_withMessage151() { 
         Validate.isAssignableFrom(CharSequence.class, String.class, "Error"); 
         Validate.isAssignableFrom(AbstractList.class, ArrayList.class, "Error"); 
         try { 
             Validate.isAssignableFrom(List.class, String.class, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
  
 } 

@Test 
     public void testIsAssignable_withMessage152() { 
         Validate.isAssignableFrom(CharSequence.class, String.class, "Error"); 
         Validate.isAssignableFrom(AbstractList.class, ArrayList.class, "Error"); 
         try { 
             Validate.isAssignableFrom(List.class, String.class, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
  
 } 

@Test 
     public void testIsAssignable_withMessage153() { 
         Validate.isAssignableFrom(CharSequence.class, String.class, "Error"); 
         Validate.isAssignableFrom(AbstractList.class, ArrayList.class, "Error"); 
         try { 
             Validate.isAssignableFrom(List.class, String.class, "Error"); 
             fail("Expecting IllegalArgumentException"); 
         } catch(final IllegalArgumentException e) { 
             assertEquals("Error", e.getMessage()); 
         } 
     } 
  
 } 

@Test 
     public void test_changeDefault_Locale_DateInstance154() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance155() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void testCheckDefaults156() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

@Test 
     public void testCheckDefaults157() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

@Test 
     public void testCheckDefaults158() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

@Test 
     public void testCheckDefaults159() { 
         final FastDateFormat format = FastDateFormat.getInstance(); 
         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); 
         assertEquals(medium, format); 
          
         final SimpleDateFormat sdf = new SimpleDateFormat(); 
         assertEquals(sdf.toPattern(), format.getPattern()); 
          
         assertEquals(Locale.getDefault(), format.getLocale()); 
         assertEquals(TimeZone.getDefault(), format.getTimeZone());         
     } 
  

@Test 
     public void test_getInstance_String_TimeZone_Locale160() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); 
  
             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", 
                  TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", 
                     TimeZone.getDefault(), Locale.GERMANY); 
  
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); 
             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); 
             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
          
@Test 
     public void test_getInstance_String_TimeZone_Locale161() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); 
  
             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", 
                  TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", 
                     TimeZone.getDefault(), Locale.GERMANY); 
  
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); 
             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); 
             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
          
@Test 
     public void test_getInstance_String_TimeZone_Locale162() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); 
  
             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", 
                  TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", 
                     TimeZone.getDefault(), Locale.GERMANY); 
  
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); 
             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); 
             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
          
@Test 
     public void test_getInstance_String_TimeZone_Locale163() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); 
  
             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", 
                  TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", 
                     TimeZone.getDefault(), Locale.GERMANY); 
  
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); 
             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); 
             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
          
@Test 
     public void test_getInstance_String_TimeZone_Locale164() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); 
  
             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", 
                  TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", 
                     TimeZone.getDefault(), Locale.GERMANY); 
  
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); 
             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); 
             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
          
@Test 
     public void test_getInstance_String_TimeZone_Locale165() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); 
  
             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", 
                  TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", 
                     TimeZone.getDefault(), Locale.GERMANY); 
  
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); 
             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); 
             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
          
@Test 
     public void test_changeDefault_Locale_DateInstance166() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance167() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance168() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance169() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void testDateDefaults170() { 
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
          
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testDateDefaults171() { 
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
          
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testDateDefaults172() { 
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
          
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testDateDefaults173() { 
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, Locale.CANADA),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
          
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateInstance(FastDateFormat.LONG),  
                 FastDateFormat.getDateInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults174() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults175() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults176() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults177() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults178() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults179() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults180() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults181() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults182() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults183() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults184() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults185() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults186() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults187() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults188() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDefaults189() { 
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), 
                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance190() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance191() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance192() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void testParseSync193() throws InterruptedException { 
         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; 
         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); 
          
         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { 
                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable 
  
                         @Override 
                         public Object parseObject(final String formattedDate) throws ParseException { 
                             synchronized(this) { 
                                 return super.parse(formattedDate); 
                             } 
                         } 
         }); 
          
         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); 
          
         final String times= ">>FastDateFormatTest: FastDate
@Test 
     public void testParseSync194() throws InterruptedException { 
         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; 
         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); 
          
         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { 
                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable 
  
                         @Override 
                         public Object parseObject(final String formattedDate) throws ParseException { 
                             synchronized(this) { 
                                 return super.parse(formattedDate); 
                             } 
                         } 
         }); 
          
         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); 
          
         final String times= ">>FastDateFormatTest: FastDate
