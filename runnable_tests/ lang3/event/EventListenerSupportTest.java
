@Test 
     public void testIncrement506() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.increment(); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement507() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement508() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testAddValuePrimitive509() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.add(Long.valueOf(1)); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testAddValuePrimitive510() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.add(Long.valueOf(1)); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testAddValueObject511() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.add(Long.valueOf(1)); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testAddValueObject512() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.add(Long.valueOf(1)); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testSubtractValueObject513() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.subtract(Long.valueOf(1)); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testSubtractValueObject514() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.subtract(Long.valueOf(1)); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testSubtractValueObject515() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.subtract(Long.valueOf(1)); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testSubtractValueObject516() { 
         final MutableLong mutNum = new MutableLong(1); 
         mutNum.subtract(Long.valueOf(1)); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement517() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement518() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement519() { 
         final MutableInt mutNum = new MutableInt(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement520() { 
         final MutableInt mutNum = new MutableInt(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testPrimitiveValues521() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues522() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues523() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues524() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testToLong525() { 
         assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong()); 
         assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong()); 
     } 
  

@Test 
     public void testToLong526() { 
         assertEquals(Long.valueOf(0L), new MutableLong(0L).toLong()); 
         assertEquals(Long.valueOf(123L), new MutableLong(123L).toLong()); 
     } 
  

@Test 
     public void testEquals527() { 
         final MutableLong mutNumA = new MutableLong(0); 
         final MutableLong mutNumB = new MutableLong(0); 
         final MutableLong mutNumC = new MutableLong(1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Long.valueOf(0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals528() { 
         final MutableLong mutNumA = new MutableLong(0); 
         final MutableLong mutNumB = new MutableLong(0); 
         final MutableLong mutNumC = new MutableLong(1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Long.valueOf(0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals529() { 
         final MutableLong mutNumA = new MutableLong(0); 
         final MutableLong mutNumB = new MutableLong(0); 
         final MutableLong mutNumC = new MutableLong(1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Long.valueOf(0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals530() { 
         final MutableLong mutNumA = new MutableLong(0); 
         final MutableLong mutNumB = new MutableLong(0); 
         final MutableLong mutNumC = new MutableLong(1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Long.valueOf(0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testHashCode531() { 
         final MutableLong mutNumA = new MutableLong(0); 
         final MutableLong mutNumB = new MutableLong(0); 
         final MutableLong mutNumC = new MutableLong(1); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode()); 
     } 
  

@Test 
     public void testHashCode532() { 
         final MutableLong mutNumA = new MutableLong(0); 
         final MutableLong mutNumB = new MutableLong(0); 
         final MutableLong mutNumC = new MutableLong(1); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode()); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull533() { 
         final MutableLong mutNum = new MutableLong(0); 
         mutNum.compareTo(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull534() { 
         final MutableLong mutNum = new MutableLong(0); 
         mutNum.compareTo(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull535() { 
         final MutableLong mutNum = new MutableLong(0); 
         mutNum.compareTo(null); 
     } 
  

@Test 
     public void testToString536() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testToString537() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testEscapeXmlAllCharacters538() { 
         // http://www.w3.org/TR/xml/#charsets says: 
         // Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character, 
         // excluding the surrogate blocks, FFFE, and FFFF. */ 
         final CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML 
                 .with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19), 
                         NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000)); 
  
         assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008")); 
         assertEquals("\t", escapeXml.translate("\t")); // 0x9 
         assertEquals("\n", escapeXml.translate("\n")); // 0xA 
   
@Test 
     public void testEscapeXmlAllCharacters539() { 
         // http://www.w3.org/TR/xml/#charsets says: 
         // Char ::= #x9 | #xA | #xD | [#x20-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF] /* any Unicode character, 
         // excluding the surrogate blocks, FFFE, and FFFF. */ 
         final CharSequenceTranslator escapeXml = StringEscapeUtils.ESCAPE_XML 
                 .with(NumericEntityEscaper.below(9), NumericEntityEscaper.between(0xB, 0xC), NumericEntityEscaper.between(0xE, 0x19), 
                         NumericEntityEscaper.between(0xD800, 0xDFFF), NumericEntityEscaper.between(0xFFFE, 0xFFFF), NumericEntityEscaper.above(0x110000)); 
  
         assertEquals("&#0;&#1;&#2;&#3;&#4;&#5;&#6;&#7;&#8;", escapeXml.translate("\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008")); 
         assertEquals("\t", escapeXml.translate("\t")); // 0x9 
         assertEquals("\n", escapeXml.translate("\n")); // 0xA 
   
@Test 
     public void testEscapeSurrogatePairsLang858540() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

@Test 
     public void testEscapeSurrogatePairsLang858541() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

@Test 
     public void testEscapeSurrogatePairsLang858542() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

@Test 
     public void testEscapeSurrogatePairsLang858543() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

@Test 
     public void testEscapeSurrogatePairsLang858544() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

@Test 
     public void testEscapeSurrogatePairsLang858545() throws Exception { 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 
         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 
     } 
      

@Test 
     public void testConstructor546() { 
         assertNotNull(new RandomStringUtils()); 
         final Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors(); 
         assertEquals(1, cons.length); 
         assertTrue(Modifier.isPublic(cons[0].getModifiers())); 
         assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers())); 
         assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers())); 
     } 
      
     //----------------------------------------------------------------------- 
     /** 
      * Test the implementation 
      */ 

