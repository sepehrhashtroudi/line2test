@Test 
     public void testEquals1295() { 
         final MutableByte mutNumA = new MutableByte((byte) 0); 
         final MutableByte mutNumB = new MutableByte((byte) 0); 
         final MutableByte mutNumC = new MutableByte((byte) 1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1296() { 
         final MutableByte mutNumA = new MutableByte((byte) 0); 
         final MutableByte mutNumB = new MutableByte((byte) 0); 
         final MutableByte mutNumC = new MutableByte((byte) 1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testHashCode1297() { 
         final MutableInt mutNumA = new MutableInt(0); 
         final MutableInt mutNumB = new MutableInt(0); 
         final MutableInt mutNumC = new MutableInt(1); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode()); 
     } 
  

@Test 
     public void testHashCode1298() { 
         final MutableInt mutNumA = new MutableInt(0); 
         final MutableInt mutNumB = new MutableInt(0); 
         final MutableInt mutNumC = new MutableInt(1); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode()); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1299() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         mutNum.compareTo(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1300() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         mutNum.compareTo(null); 
     } 
  

@Test 
     public void testCompareTo1301() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
  
         assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0))); 
     } 
  

@Test 
     public void testToString1302() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testToString1303() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testGetSet1304() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

