@Test 
     public void testLongArray364() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBadStates600() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates603() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates604() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates630() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testLang315631() { 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.suspend(); 
         final long suspendTime = watch.getTime(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long totalTime = watch.getTime(); 
         assertTrue( suspendTime == totalTime ); 
     } 
  
     // test bad states 

@Test 
     public void testLang315632() { 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.suspend(); 
         final long suspendTime = watch.getTime(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long totalTime = watch.getTime(); 
         assertTrue( suspendTime == totalTime ); 
     } 
  
     // test bad states 

@Test 
     public void testBadStates633() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates634() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates635() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates636() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates637() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testLang315638() { 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.suspend(); 
         final long suspendTime = watch.getTime(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long totalTime = watch.getTime(); 
         assertTrue( suspendTime == totalTime ); 
     } 
  
     // test bad states 

@Test 
     public void testLang315639() { 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.suspend(); 
         final long suspendTime = watch.getTime(); 
             try {Thread.sleep(200);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long totalTime = watch.getTime(); 
         assertTrue( suspendTime == totalTime ); 
     } 
  
     // test bad states 

@Test 
     public void testStopWatchSimpleGet640(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSimpleGet641(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSimpleGet642(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSimpleGet643(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSimpleGet644(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSimpleGet645(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSimpleGet646(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testBadStates647() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates648() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates649() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates650() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates651() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates652() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testGetStartTime653() { 
         final long beforeStopWatch = System.currentTimeMillis(); 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on an unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
         watch.start(); 
         try { 
             watch.getStartTime(); 
             Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); 
         } catch (final IllegalStateException ex) { 
             fail("Start time should be available: " + ex.getMessage()); 
         } 
         watch.reset(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
     } 
  
 } [
@Test 
     public void testGetStartTime654() { 
         final long beforeStopWatch = System.currentTimeMillis(); 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on an unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
         watch.start(); 
         try { 
             watch.getStartTime(); 
             Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); 
         } catch (final IllegalStateException ex) { 
             fail("Start time should be available: " + ex.getMessage()); 
         } 
         watch.reset(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
     } 
  
 } [
@Test 
     public void testGetStartTime655() { 
         final long beforeStopWatch = System.currentTimeMillis(); 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on an unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
         watch.start(); 
         try { 
             watch.getStartTime(); 
             Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); 
         } catch (final IllegalStateException ex) { 
             fail("Start time should be available: " + ex.getMessage()); 
         } 
         watch.reset(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
     } 
  
 } [
@Test 
     public void testGetStartTime656() { 
         final long beforeStopWatch = System.currentTimeMillis(); 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on an unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
         watch.start(); 
         try { 
             watch.getStartTime(); 
             Assert.assertTrue(watch.getStartTime() >= beforeStopWatch); 
         } catch (final IllegalStateException ex) { 
             fail("Start time should be available: " + ex.getMessage()); 
         } 
         watch.reset(); 
         try { 
             watch.getStartTime(); 
             fail("Calling getStartTime on a reset, but unstarted StopWatch should throw an exception"); 
         } catch (final IllegalStateException expected) { 
             // expected 
         } 
     } 
  
 } [
@Test 
     public void testStopWatchSimpleGet657(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSimpleGet658(){ 
         final StopWatch watch = new StopWatch(); 
         assertEquals(0, watch.getTime()); 
         assertEquals("0:00:00.000", watch.toString()); 
          
         watch.start(); 
             try {Thread.sleep(500);} catch (final InterruptedException ex) {} 
         assertTrue(watch.getTime() < 2000); 
     } 
      

@Test 
     public void testStopWatchSplit659(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.split(); 
         final long splitTime = watch.getSplitTime(); 
         final String splitStr = watch.toSplitString(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.unsplit(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long totalTime = watch.getTime(); 
  
         assertEquals("Formatted split string not the correct length",  
                      splitStr.length(), 11); 
         assertTrue(splitTime >= 500); 
         assertTrue(splitTime < 700); 
         assertTrue(totalTime >= 1500); 
         assertTrue(totalTime < 1900); 
     } 
      

@Test 
     public void testStopWatchSplit660(){ 
         final StopWatch watch = new StopWatch(); 
         watch.start(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.split(); 
         final long splitTime = watch.getSplitTime(); 
         final String splitStr = watch.toSplitString(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.unsplit(); 
             try {Thread.sleep(550);} catch (final InterruptedException ex) {} 
         watch.stop(); 
         final long totalTime = watch.getTime(); 
  
         assertEquals("Formatted split string not the correct length",  
                      splitStr.length(), 11); 
         assertTrue(splitTime >= 500); 
         assertTrue(splitTime < 700); 
         assertTrue(totalTime >= 1500); 
         assertTrue(totalTime < 1900); 
     } 
      

@Test 
     public void testObjectArray661() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray662() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray663() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray664() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray665() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray666() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray667() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray668() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray669() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray670() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray671() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray672() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray673() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray674() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray675() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray676() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray677() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray678() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testSetArraySeparator679() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArraySeparator(null); 
         assertEquals("", style.getArraySeparator()); 
     } 
  

@Test 
     public void testSetArraySeparator680() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArraySeparator(null); 
         assertEquals("", style.getArraySeparator()); 
     } 
  

@Test 
     public void testAppendSuper681() { 
         assertEquals("", new ToStringBuilder(base).appendSuper("").toString()); 
         assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString()); 
          
         assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString()); 
         assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString()); 
         assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

@Test 
     public void testAppendSuper682() { 
         assertEquals("", new ToStringBuilder(base).appendSuper("").toString()); 
         assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString()); 
          
         assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString()); 
         assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString()); 
         assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

@Test 
     public void testAppendSuper688() { 
         assertEquals("", new ToStringBuilder(base).appendSuper("").toString()); 
         assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString()); 
          
         assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString()); 
         assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString()); 
         assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

@Test 
     public void testAppendSuper689() { 
         assertEquals("", new ToStringBuilder(base).appendSuper("").toString()); 
         assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString()); 
          
         assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString()); 
         assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString()); 
         assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

@Test 
     public void testAppendSuper690() { 
         assertEquals("", new ToStringBuilder(base).appendSuper("").toString()); 
         assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString()); 
          
         assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString()); 
         assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString()); 
         assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

@Test 
     public void testAppendSuper691() { 
         assertEquals("", new ToStringBuilder(base).appendSuper("").toString()); 
         assertEquals("<null>", new ToStringBuilder(base).appendSuper("<null>").toString()); 
          
         assertEquals("hello", new ToStringBuilder(base).appendSuper("").append("a", "hello").toString()); 
         assertEquals("<null>,hello", new ToStringBuilder(base).appendSuper("<null>").append("a", "hello").toString()); 
         assertEquals("hello", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); 
     } 
      

@Test 
     public void testObjectArray692() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray693() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray694() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray695() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray696() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray697() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray698() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray699() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray700() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray701() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray702() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray703() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray704() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testObjectArray706() { 
         Object[] array = new Object[] {null, base, new int[] {3, 6}}; 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testReflectionFloatArrayArray923() { 
         float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  
  

@Test 
     public void testReflectionFloatArrayArray924() { 
         float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  
  

@Test 
     public void testReflectionFloatArrayArray925() { 
         float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  
  

@Test 
     public void testSetArrayStart995() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArrayStart(null); 
         assertEquals("", style.getArrayStart()); 
     } 
  

@Test 
     public void testSetArrayStart996() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArrayStart(null); 
         assertEquals("", style.getArrayStart()); 
     } 
  

@Test 
     public void testFormat1209() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), Date
