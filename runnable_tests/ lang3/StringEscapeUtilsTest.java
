@Test 
     public void testPairOf220() throws Exception { 
         final Pair<Integer, String> pair = Pair.of(0, "foo"); 
         assertTrue(pair instanceof ImmutablePair<?, ?>); 
         assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue()); 
         assertEquals("foo", ((ImmutablePair<Integer, String>) pair).right); 
         final Pair<Object, String> pair2 = Pair.of(null, "bar"); 
         assertTrue(pair2 instanceof ImmutablePair<?, ?>); 
         assertNull(((ImmutablePair<Object, String>) pair2).left); 
         assertEquals("bar", ((ImmutablePair<Object, String>) pair2).right); 
     } 
  

@Test 
     public void testCompatibilityBetweenPairs233() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

@Test 
     public void testLongArray366() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray368() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray371() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testObject970() { 
         final Integer i3 = Integer.valueOf(3); 
         final Integer i4 = Integer.valueOf(4); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); 
         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); 
         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); 
         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); 
         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); 
         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); 
         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); 
         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); 
         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); 
         assertEquals(baseStr + "[
@Test 
     public void testSetArrayStart993() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArrayStart(null); 
         assertEquals("", style.getArrayStart()); 
     } 
  

@Test 
     public void testSetArrayStart994() { 
         final ToStringStyle style = new ToStringStyleImpl(); 
         style.setArrayStart(null); 
         assertEquals("", style.getArrayStart()); 
     } 
  

