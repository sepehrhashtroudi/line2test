@Test 
     public void testPrimitiveValues1413() { 
         final MutableDouble mutNum = new MutableDouble(1.7); 
          
         assertEquals( 1.7F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.7, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1414() { 
         final MutableDouble mutNum = new MutableDouble(1.7); 
          
         assertEquals( 1.7F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.7, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1415() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1416() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testToDouble1417() { 
         assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble()); 
         assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble()); 
     } 
  

@Test 
     public void testToDouble1418() { 
         assertEquals(Double.valueOf(0d), new MutableDouble(0d).toDouble()); 
         assertEquals(Double.valueOf(12.3d), new MutableDouble(12.3d).toDouble()); 
     } 
  

@Test 
     public void testEquals1419() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Double.valueOf(0d))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1420() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Double.valueOf(0d))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testHashCode1421() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); 
     } 
  

@Test 
     public void testHashCode1422() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); 
     } 
  

@Test 
     public void testHashCode1423() { 
         final MutableDouble mutNumA = new MutableDouble(0d); 
         final MutableDouble mutNumB = new MutableDouble(0d); 
         final MutableDouble mutNumC = new MutableDouble(1d); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); 
         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1424() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         mutNum.compareTo(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1425() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         mutNum.compareTo(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1426() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         mutNum.compareTo(null); 
     } 
  

@Test 
     public void testToString1427() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testToString1428() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testEscapeCsvWriter1429() throws Exception { 
         checkCsvEscapeWriter("foo.bar",        "foo.bar"); 
         checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar"); 
         checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar"); 
         checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar"); 
         checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); 
         checkCsvEscapeWriter("", null); 
         checkCsvEscapeWriter("", ""); 
     } 
  
     private void checkCsvEscapeWriter(final String expected, final String value) { 
         try { 
             final StringWriter writer = new StringWriter(); 
             StringEscapeUtils.ESCAPE_CSV.translate(value, writer); 
             assertEquals(expected, writer.toString()); 
         } catch (final IOException e) { 
             fail("Threw: " + e); 
         } 
     } 
  

@Test 
     public void testEscapeCsvWriter1430() throws Exception { 
         checkCsvEscapeWriter("foo.bar",        "foo.bar"); 
         checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar"); 
         checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar"); 
         checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar"); 
         checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); 
         checkCsvEscapeWriter("", null); 
         checkCsvEscapeWriter("", ""); 
     } 
  
     private void checkCsvEscapeWriter(final String expected, final String value) { 
         try { 
             final StringWriter writer = new StringWriter(); 
             StringEscapeUtils.ESCAPE_CSV.translate(value, writer); 
             assertEquals(expected, writer.toString()); 
         } catch (final IOException e) { 
             fail("Threw: " + e); 
         } 
     } 
  

@Test 
     public void testEscapeCsvWriter1431() throws Exception { 
         checkCsvEscapeWriter("foo.bar",        "foo.bar"); 
         checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar"); 
         checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar"); 
         checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar"); 
         checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); 
         checkCsvEscapeWriter("", null); 
         checkCsvEscapeWriter("", ""); 
     } 
  
     private void checkCsvEscapeWriter(final String expected, final String value) { 
         try { 
             final StringWriter writer = new StringWriter(); 
             StringEscapeUtils.ESCAPE_CSV.translate(value, writer); 
             assertEquals(expected, writer.toString()); 
         } catch (final IOException e) { 
             fail("Threw: " + e); 
         } 
     } 
  

@Test 
     public void testEscapeCsvWriter1432() throws Exception { 
         checkCsvEscapeWriter("foo.bar",        "foo.bar"); 
         checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar"); 
         checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar"); 
         checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar"); 
         checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); 
         checkCsvEscapeWriter("", null); 
         checkCsvEscapeWriter("", ""); 
     } 
  
     private void checkCsvEscapeWriter(final String expected, final String value) { 
         try { 
             final StringWriter writer = new StringWriter(); 
             StringEscapeUtils.ESCAPE_CSV.translate(value, writer); 
             assertEquals(expected, writer.toString()); 
         } catch (final IOException e) { 
             fail("Threw: " + e); 
         } 
     } 
  

@Test 
     public void testEscapeCsvWriter1433() throws Exception { 
         checkCsvEscapeWriter("foo.bar",        "foo.bar"); 
         checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar"); 
         checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar"); 
         checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar"); 
         checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); 
         checkCsvEscapeWriter("", null); 
         checkCsvEscapeWriter("", ""); 
     } 
  
     private void checkCsvEscapeWriter(final String expected, final String value) { 
         try { 
             final StringWriter writer = new StringWriter(); 
             StringEscapeUtils.ESCAPE_CSV.translate(value, writer); 
             assertEquals(expected, writer.toString()); 
         } catch (final IOException e) { 
             fail("Threw: " + e); 
         } 
     } 
  

@Test 
     public void testEscapeCsvWriter1434() throws Exception { 
         checkCsvEscapeWriter("foo.bar",        "foo.bar"); 
         checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar"); 
         checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar"); 
         checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar"); 
         checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); 
         checkCsvEscapeWriter("", null); 
         checkCsvEscapeWriter("", ""); 
     } 
  
     private void checkCsvEscapeWriter(final String expected, final String value) { 
         try { 
             final StringWriter writer = new StringWriter(); 
             StringEscapeUtils.ESCAPE_CSV.translate(value, writer); 
             assertEquals(expected, writer.toString()); 
         } catch (final IOException e) { 
             fail("Threw: " + e); 
         } 
     } 
  

@Test 
     public void testEscapeCsvWriter1435() throws Exception { 
         checkCsvEscapeWriter("foo.bar",        "foo.bar"); 
         checkCsvEscapeWriter("\"foo,bar\"",    "foo,bar"); 
         checkCsvEscapeWriter("\"foo\nbar\"",   "foo\nbar"); 
         checkCsvEscapeWriter("\"foo\rbar\"",   "foo\rbar"); 
         checkCsvEscapeWriter("\"foo\"\"bar\"", "foo\"bar"); 
         checkCsvEscapeWriter("", null); 
         checkCsvEscapeWriter("", ""); 
     } 
  
     private void checkCsvEscapeWriter(final String expected, final String value) { 
         try { 
             final StringWriter writer = new StringWriter(); 
             StringEscapeUtils.ESCAPE_CSV.translate(value, writer); 
             assertEquals(expected, writer.toString()); 
         } catch (final IOException e) { 
             fail("Threw: " + e); 
         } 
     } 
  

