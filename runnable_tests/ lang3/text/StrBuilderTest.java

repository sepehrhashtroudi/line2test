@Test 
     public void testCompatibilityBetweenPairs234() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

@Test 
     public void testHashCode235() throws Exception { 
         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); 
     } 
  

@Test 
     public void testHashCode236() throws Exception { 
         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); 
     } 
  

@Test 
     public void testToStringCustom240() throws Exception { 
         final Calendar date = Calendar.getInstance(); 
         date.set(2011, Calendar.APRIL, 25); 
         final Pair<String, Calendar> pair = Pair.of("DOB", date); 
         assertEquals("Test created on " + "04-25-2011", pair.toString("Test created on %2$tm-%2$td-%2$tY")); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowable251() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
      

@Test 
     public void testContextedExceptionStringThrowable252() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE)); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
      

@Test 
     public void testContextedExceptionStringThrowableContext253() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowableContext254() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowableContext255() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowableContext256() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowableContext257() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testNullExceptionPassing258() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) 
         .addContextValue("test1", null) 
         .addContextValue("test2", "some value") 
         .addContextValue("test Date", new Date()) 
         .addContextValue("test Nbr", Integer.valueOf(5)) 
         .addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); 
          
         final String message = exceptionContext.getMessage(); 
         assertTrue(message != null); 
     } 
  

@Test 
     public void testNullExceptionPassing259() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) 
         .addContextValue("test1", null) 
         .addContextValue("test2", "some value") 
         .addContextValue("test Date", new Date()) 
         .addContextValue("test Nbr", Integer.valueOf(5)) 
         .addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); 
          
         final String message = exceptionContext.getMessage(); 
         assertTrue(message != null); 
     } 
  

@Test 
     public void testNullExceptionPassing260() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) 
         .addContextValue("test1", null) 
         .addContextValue("test2", "some value") 
         .addContextValue("test Date", new Date()) 
         .addContextValue("test Nbr", Integer.valueOf(5)) 
         .addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); 
          
         final String message = exceptionContext.getMessage(); 
         assertTrue(message != null); 
     } 
  

@Test 
     public void testGetContextValues261() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

@Test 
     public void testGetContextValues262() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

@Test 
     public void testGetContextValues263() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

@Test 
     public void testGetContextValues264() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

@Test 
     public void testGetContextValues265() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

@Test 
     public void testGetContextValues266() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

@Test 
     public void testGetFirstContextValue267() { 
         exceptionContext.addContextValue("test2", "different value"); 
  
         assertTrue(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); 
         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); 
  
         exceptionContext.setContextValue("test2", "another"); 
  
         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); 
     } 
  

@Test 
     public void testGetContextLabels268() { 
         assertEquals(5, exceptionContext.getContextEntries().size()); 
          
         exceptionContext.addContextValue("test2", "different value"); 
  
         final Set<String> labels = exceptionContext.getContextLabels(); 
         assertEquals(6, exceptionContext.getContextEntries().size()); 
         assertEquals(5, labels.size()); 
         assertTrue(labels.contains("test1")); 
         assertTrue(labels.contains("test2")); 
         assertTrue(labels.contains("test Date")); 
         assertTrue(labels.contains("test Nbr")); 
     } 
  

@Test 
     public void testGetContextLabels269() { 
         assertEquals(5, exceptionContext.getContextEntries().size()); 
          
         exceptionContext.addContextValue("test2", "different value"); 
  
         final Set<String> labels = exceptionContext.getContextLabels(); 
         assertEquals(6, exceptionContext.getContextEntries().size()); 
         assertEquals(5, labels.size()); 
         assertTrue(labels.contains("test1")); 
         assertTrue(labels.contains("test2")); 
         assertTrue(labels.contains("test Date")); 
         assertTrue(labels.contains("test Nbr")); 
     } 
  

@Test 
     public void testGetContextLabels270() { 
         assertEquals(5, exceptionContext.getContextEntries().size()); 
          
         exceptionContext.addContextValue("test2", "different value"); 
  
         final Set<String> labels = exceptionContext.getContextLabels(); 
         assertEquals(6, exceptionContext.getContextEntries().size()); 
         assertEquals(5, labels.size()); 
         assertTrue(labels.contains("test1")); 
         assertTrue(labels.contains("test2")); 
         assertTrue(labels.contains("test Date")); 
         assertTrue(labels.contains("test Nbr")); 
     } 
  

@Test 
     public void testGetContextLabels271() { 
         assertEquals(5, exceptionContext.getContextEntries().size()); 
          
         exceptionContext.addContextValue("test2", "different value"); 
  
         final Set<String> labels = exceptionContext.getContextLabels(); 
         assertEquals(6, exceptionContext.getContextEntries().size()); 
         assertEquals(5, labels.size()); 
         assertTrue(labels.contains("test1")); 
         assertTrue(labels.contains("test2")); 
         assertTrue(labels.contains("test Date")); 
         assertTrue(labels.contains("test Nbr")); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowableContext272() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowableContext273() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testRawMessage274() { 
         assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); 
         exceptionContext = new ContextedException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         assertNull(exceptionContext.getRawMessage()); 
     } 
 } 

@Test 
     public void testRawMessage275() { 
         assertEquals(Exception.class.getName() + ": " + TEST_MESSAGE, exceptionContext.getRawMessage()); 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         assertEquals(TEST_MESSAGE_2, exceptionContext.getRawMessage()); 
         exceptionContext = new ContextedException(null, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         assertNull(exceptionContext.getRawMessage()); 
     } 
 } 

@Test 
     public void testContextedExceptionStringThrowableContext276() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testContextedExceptionStringThrowableContext277() { 
         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), new DefaultExceptionContext()); 
         final String message = exceptionContext.getMessage(); 
         final String trace = ExceptionUtils.getStackTrace(exceptionContext); 
         assertTrue(trace.indexOf("ContextedException")>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE)>=0); 
         assertTrue(trace.indexOf(TEST_MESSAGE_2)>=0); 
         assertTrue(message.indexOf(TEST_MESSAGE_2)>=0); 
     } 
  

@Test 
     public void testIntegerWithTransients278() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients279() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients280() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients281() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients282() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients283() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients284() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients285() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients286() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients287() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients288() { 
         testInteger(true); 
     } 
  

