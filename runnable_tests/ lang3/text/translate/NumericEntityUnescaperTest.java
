@Test 
     public void testFormat195() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(NEW_YORK); 
  
             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); 
             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); 
             final Date date1 = cal1.getTime(); 
             final Date date2 = cal2.getTime(); 
             final long millis1 = date1.getTime(); 
             final long millis2 = date2.getTime(); 
  
             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); 
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); 
             assertEquals(sdf.format(date1), fdf.format(date1)); 
             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test 
     public void testFormat196() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         final TimeZone realDefaultZone = TimeZone.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             TimeZone.setDefault(NEW_YORK); 
  
             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); 
             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); 
             final Date date1 = cal1.getTime(); 
             final Date date2 = cal2.getTime(); 
             final long millis1 = date1.getTime(); 
             final long millis2 = date2.getTime(); 
  
             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); 
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); 
             assertEquals(sdf.format(date1), fdf.format(date1)); 
             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test 
     public void testRoundDayOfMonth197() throws Exception { 
         final int calendarField = Calendar.DAY_OF_MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
  
         roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); 
         roundedDownDate = targetDayOfMonthDate; 
         lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
          
         //round to January 1 
         minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000"); 
         maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999"); 
         roundToJanuaryFirst(minDate, maxDate, calendarField); 
     } 
      
     /** 
      * Tests DateUtils.round()-method with Calendar.AM_PM 
      * Includes rounding the extremes of both AM and PM of one day  
      * Includes rounding to January 1 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

@Test 
     public void testRoundDayOfMonth198() throws Exception { 
         final int calendarField = Calendar.DAY_OF_MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
  
         roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); 
         roundedDownDate = targetDayOfMonthDate; 
         lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
          
         //round to January 1 
         minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000"); 
         maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999"); 
         roundToJanuaryFirst(minDate, maxDate, calendarField); 
     } 
      
     /** 
      * Tests DateUtils.round()-method with Calendar.AM_PM 
      * Includes rounding the extremes of both AM and PM of one day  
      * Includes rounding to January 1 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

@Test 
     public void testRoundDayOfMonth199() throws Exception { 
         final int calendarField = Calendar.DAY_OF_MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
  
         roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); 
         roundedDownDate = targetDayOfMonthDate; 
         lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
          
         //round to January 1 
         minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000"); 
         maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999"); 
         roundToJanuaryFirst(minDate, maxDate, calendarField); 
     } 
      
     /** 
      * Tests DateUtils.round()-method with Calendar.AM_PM 
      * Includes rounding the extremes of both AM and PM of one day  
      * Includes rounding to January 1 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

@Test 
     public void testRoundDayOfMonth200() throws Exception { 
         final int calendarField = Calendar.DAY_OF_MONTH; 
         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; 
         Date minDate, maxDate; 
  
         roundedUpDate = dateTimeParser.parse("June 2, 2008 0:00:00.000"); 
         roundedDownDate = targetDayOfMonthDate; 
         lastRoundedDownDate = dateTimeParser.parse("June 1, 2008 11:59:59.999"); 
         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); 
          
         //round to January 1 
         minDate = dateTimeParser.parse("December 31, 2007 12:00:00.000"); 
         maxDate = dateTimeParser.parse("January 1, 2008 11:59:59.999"); 
         roundToJanuaryFirst(minDate, maxDate, calendarField); 
     } 
      
     /** 
      * Tests DateUtils.round()-method with Calendar.AM_PM 
      * Includes rounding the extremes of both AM and PM of one day  
      * Includes rounding to January 1 
      *  
      * @throws Exception 
      * @since 3.0 
      */ 

@Test 
     public void testLocales_ShortNoEra_AD201() throws Exception { 
         testLocales(SHORT_FORMAT_NOERA, false); 
     } 
  

@Test 
     public void testLocales_ShortNoEra_AD202() throws Exception { 
         testLocales(SHORT_FORMAT_NOERA, false); 
     } 
  

@Test 
     public void testParseSync203() throws InterruptedException { 
         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; 
         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); 
          
         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { 
                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable 
  
                         @Override 
                         public Object parseObject(final String formattedDate) throws ParseException { 
                             synchronized(this) { 
                                 return super.parse(formattedDate); 
                             } 
                         } 
         }); 
          
         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); 
          
         final String times= ">>FastDateFormatTest: FastDate
@Test 
     public void testParseSync204() throws InterruptedException { 
         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; 
         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); 
          
         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { 
                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable 
  
                         @Override 
                         public Object parseObject(final String formattedDate) throws ParseException { 
                             synchronized(this) { 
                                 return super.parse(formattedDate); 
                             } 
                         } 
         }); 
          
         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); 
          
         final String times= ">>FastDateFormatTest: FastDate
@Test 
     public void test_getInstance_String205() { 
         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy"); 
         final FastDateFormat format2 = FastDateFormat.getInstance("MM-DD-yyyy"); 
         final FastDateFormat format3 = FastDateFormat.getInstance("MM-DD-yyyy"); 
  
         assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
         assertSame(format2, format3); 
         assertEquals("MM/DD/yyyy", format1.getPattern()); 
         assertEquals(TimeZone.getDefault(), format1.getTimeZone()); 
         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
     } 
  

@Test 
     public void test_getInstance_String206() { 
         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy"); 
         final FastDateFormat format2 = FastDateFormat.getInstance("MM-DD-yyyy"); 
         final FastDateFormat format3 = FastDateFormat.getInstance("MM-DD-yyyy"); 
  
         assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
         assertSame(format2, format3); 
         assertEquals("MM/DD/yyyy", format1.getPattern()); 
         assertEquals(TimeZone.getDefault(), format1.getTimeZone()); 
         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
     } 
  

@Test 
     public void test_getInstance_String207() { 
         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy"); 
         final FastDateFormat format2 = FastDateFormat.getInstance("MM-DD-yyyy"); 
         final FastDateFormat format3 = FastDateFormat.getInstance("MM-DD-yyyy"); 
  
         assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
         assertSame(format2, format3); 
         assertEquals("MM/DD/yyyy", format1.getPattern()); 
         assertEquals(TimeZone.getDefault(), format1.getTimeZone()); 
         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
     } 
  

@Test 
     public void test_getInstance_String208() { 
         final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy"); 
         final FastDateFormat format2 = FastDateFormat.getInstance("MM-DD-yyyy"); 
         final FastDateFormat format3 = FastDateFormat.getInstance("MM-DD-yyyy"); 
  
         assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
         assertSame(format2, format3); 
         assertEquals("MM/DD/yyyy", format1.getPattern()); 
         assertEquals(TimeZone.getDefault(), format1.getTimeZone()); 
         assertEquals(TimeZone.getDefault(), format2.getTimeZone()); 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance209() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void test_changeDefault_Locale_DateInstance210() { 
         final Locale realDefaultLocale = Locale.getDefault(); 
         try { 
             Locale.setDefault(Locale.US); 
             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); 
             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
             Locale.setDefault(Locale.GERMANY); 
             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); 
  
             assertSame(Locale.GERMANY, format1.getLocale()); 
             assertSame(Locale.US, format2.getLocale()); 
             assertSame(Locale.GERMANY, format3.getLocale()); 
             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); 
             assertTrue(format2 != format3); 
  
         } finally { 
             Locale.setDefault(realDefaultLocale); 
         } 
     } 
  

@Test 
     public void testTimeDateDefaults211() { 
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDateDefaults212() { 
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDateDefaults213() { 
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDateDefaults214() { 
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void testTimeDateDefaults215() { 
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); 
  
         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), 
                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); 
     } 
  

@Test 
     public void test_Equality_Hash216() { 
         final DateParser[] parsers= { 
             getInstance(yMdHmsSZ, NEW_YORK, Locale.US), 
             getInstance(DMY_DOT, NEW_YORK, Locale.US), 
             getInstance(YMD_SLASH, NEW_YORK, Locale.US), 
             getInstance(MDY_DASH, NEW_YORK, Locale.US), 
             getInstance(MDY_SLASH, NEW_YORK, Locale.US), 
             getInstance(MDY_SLASH, REYKJAVIK, Locale.US), 
             getInstance(MDY_SLASH, REYKJAVIK, SWEDEN) 
         }; 
  
         final Map<DateParser,Integer> map= new HashMap<DateParser,Integer>(); 
         int i= 0; 
         for(final DateParser parser:parsers) { 
             map.put(parser, Integer.valueOf(i++)); 
         } 
  
         i= 0; 
         for(final DateParser parser:parsers) { 
             assertEquals(i++, map.get(parser).
@Test 
     public void test_Equality_Hash217() { 
         final DateParser[] parsers= { 
             getInstance(yMdHmsSZ, NEW_YORK, Locale.US), 
             getInstance(DMY_DOT, NEW_YORK, Locale.US), 
             getInstance(YMD_SLASH, NEW_YORK, Locale.US), 
             getInstance(MDY_DASH, NEW_YORK, Locale.US), 
             getInstance(MDY_SLASH, NEW_YORK, Locale.US), 
             getInstance(MDY_SLASH, REYKJAVIK, Locale.US), 
             getInstance(MDY_SLASH, REYKJAVIK, SWEDEN) 
         }; 
  
         final Map<DateParser,Integer> map= new HashMap<DateParser,Integer>(); 
         int i= 0; 
         for(final DateParser parser:parsers) { 
             map.put(parser, Integer.valueOf(i++)); 
         } 
  
         i= 0; 
         for(final DateParser parser:parsers) { 
             assertEquals(i++, map.get(parser).
@Test 
     public void testToStringContainsName218() { 
         final DateParser parser= getInstance(YMD_SLASH); 
         assertTrue(parser.toString().startsWith("FastDate")); 
     } 
  

@Test 
     public void testToStringContainsName219() { 
         final DateParser parser= getInstance(YMD_SLASH); 
         assertTrue(parser.toString().startsWith("FastDate")); 
     } 
  

@Test 
     public void testPairOf221() throws Exception { 
         final Pair<Integer, String> pair = Pair.of(0, "foo"); 
         assertTrue(pair instanceof ImmutablePair<?, ?>); 
         assertEquals(0, ((ImmutablePair<Integer, String>) pair).left.intValue()); 
         assertEquals("foo", ((ImmutablePair<Integer, String>) pair).right); 
         final Pair<Object, String> pair2 = Pair.of(null, "bar"); 
         assertTrue(pair2 instanceof ImmutablePair<?, ?>); 
         assertNull(((ImmutablePair<Object, String>) pair2).left); 
         assertEquals("bar", ((ImmutablePair<Object, String>) pair2).right); 
     } 
  

@Test 
     public void testHashCode222() throws Exception { 
         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); 
     } 
  

@Test 
     public void testHashCode223() throws Exception { 
         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); 
     } 
  

@Test 
     public void testHashCode224() throws Exception { 
         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); 
     } 
  

@Test 
     public void testHashCode225() throws Exception { 
         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); 
     } 
  

@Test 
     public void testComparable1226() throws Exception { 
         final Pair<String, String> pair1 = Pair.of("A", "D"); 
         final Pair<String, String> pair2 = Pair.of("B", "C"); 
         assertTrue(pair1.compareTo(pair1) == 0); 
         assertTrue(pair1.compareTo(pair2) < 0); 
         assertTrue(pair2.compareTo(pair2) == 0); 
         assertTrue(pair2.compareTo(pair1) > 0); 
     } 
  

