@Test 
     public void testByteArrayArray881() { 
         byte[][] array = new byte[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testByteArrayArray882() { 
         byte[][] array = new byte[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testByteArrayArray883() { 
         byte[][] array = new byte[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testByteArrayArray884() { 
         byte[][] array = new byte[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testByteArrayArray885() { 
         byte[][] array = new byte[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testByteArrayArray886() { 
         byte[][] array = new byte[][] {{1, 2}, null, {5}}; 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testCharArray887() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testCharArray888() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testCharArray889() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testCharArray890() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testCharArray891() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testCharArray892() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testCharArray893() { 
         char[] array = new char[] {'A', '2', '_', 'D'}; 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testReflectionCharArrayArray894() { 
         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

@Test 
     public void testReflectionCharArrayArray895() { 
         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

@Test 
     public void testReflectionCharArrayArray896() { 
         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

@Test 
     public void testReflectionCharArrayArray897() { 
         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

@Test 
     public void testReflectionCharArrayArray898() { 
         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

@Test 
     public void testReflectionCharArrayArray899() { 
         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

@Test 
     public void testReflectionCharArrayArray900() { 
         char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } }; 
         final String baseStr = this.toBaseString(array); 
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array)); 
         array = null; 
         assertReflectionArray("<null>", array); 
     } 
  

@Test 
     public void testDoubleArray901() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testDoubleArray902() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testDoubleArray903() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

@Test 
     public void testDoubleArray904() { 
         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); 
         array = null; 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); 
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); 
     } 
  

