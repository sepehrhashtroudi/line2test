@Test 
     public void testByteArray381() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray382() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray383() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray384() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray385() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray386() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray387() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray388() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray389() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray390() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray391() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray392() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testNpeForNullElement393() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement394() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement395() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement396() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement397() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement398() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement399() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement400() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement401() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement402() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testNpeForNullElement403() { 
         final Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) }; 
         final Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) }; 
  
         // causes an NPE in 2.0 according to: 
         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067 
         new EqualsBuilder().append(x1, x2); 
     } 
  

@Test 
     public void testLongArray404() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray405() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray406() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray407() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray408() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray409() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray410() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray411() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray412() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray413() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testLongArray414() { 
         long[] obj1 = new long[2]; 
         obj1[0] = 5L; 
         obj1[1] = 6L; 
         long[] obj2 = new long[2]; 
         obj2[0] = 5L; 
         obj2[1] = 6L; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray415() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray416() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray417() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray418() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray419() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray420() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray421() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray422() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray423() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray424() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testIntArray425() { 
         int[] obj1 = new int[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         int[] obj2 = new int[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray426() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray427() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray428() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray429() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray430() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray431() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray432() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testShortArray433() { 
         short[] obj1 = new short[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         short[] obj2 = new short[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject434() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject435() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject436() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject437() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject438() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject439() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject440() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject441() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject442() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject443() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testCharArrayHiddenByObject444() { 
         final char[] array1 = new char[2]; 
         array1[0] = 5; 
         array1[1] = 6; 
         final char[] array2 = new char[2]; 
         array2[0] = 5; 
         array2[1] = 6; 
         final Object obj1 = array1; 
         final Object obj2 = array2; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); 
         array1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray445() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray446() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray447() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray448() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray449() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray450() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray451() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testByteArray452() { 
         byte[] obj1 = new byte[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         byte[] obj2 = new byte[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray453() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray454() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray455() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray456() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray457() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray458() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray459() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testDoubleArray460() { 
         double[] obj1 = new double[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         double[] obj2 = new double[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray461() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

