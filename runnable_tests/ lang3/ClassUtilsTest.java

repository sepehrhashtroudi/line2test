@Test 
     public void testFloatArray462() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray463() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray464() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray465() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray466() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray467() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray468() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray469() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray470() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testFloatArray471() { 
         float[] obj1 = new float[2]; 
         obj1[0] = 5; 
         obj1[1] = 6; 
         float[] obj2 = new float[2]; 
         obj2[0] = 5; 
         obj2[1] = 6; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = 7; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray472() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray473() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray474() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray475() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray476() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray477() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray478() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray479() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray480() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray481() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testObjectBuild482() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build()); 
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build()); 
         o2.setA(4); 
         assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build()); 
  
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build()); 
          
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build()); 
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build()); 
         assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, (Object) null).build()); 
     } 
  

@Test 
     public void testObjectBuild483() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o1).build()); 
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, o2).build()); 
         o2.setA(4); 
         assertEquals(Boolean.TRUE, new EqualsBuilder().append(o1, o2).build()); 
  
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, this).build()); 
          
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(o1, null).build()); 
         assertEquals(Boolean.FALSE, new EqualsBuilder().append(null, o2).build()); 
         assertEquals(Boolean.TRUE, new EqualsBuilder().append((Object) null, (Object) null).build()); 
     } 
  

@Test 
     public void testBooleanArray484() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testBooleanArray485() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testReset486() { 
         final EqualsBuilder equalsBuilder = new EqualsBuilder(); 
         assertTrue(equalsBuilder.isEquals()); 
         equalsBuilder.setEquals(false); 
         assertFalse(equalsBuilder.isEquals()); 
         equalsBuilder.reset(); 
         assertTrue(equalsBuilder.isEquals()); 
     } 
      

@Test 
     public void testReset487() { 
         final EqualsBuilder equalsBuilder = new EqualsBuilder(); 
         assertTrue(equalsBuilder.isEquals()); 
         equalsBuilder.setEquals(false); 
         assertFalse(equalsBuilder.isEquals()); 
         equalsBuilder.reset(); 
         assertTrue(equalsBuilder.isEquals()); 
     } 
      

@Test 
     public void testGetSet488() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet489() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet490() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet491() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet492() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull493() { 
         new MutableLong((Number)null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull494() { 
         new MutableLong((Number)null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull495() { 
         new MutableLong((Number)null); 
     } 
  

@Test 
     public void testConstructors496() { 
         assertEquals(0, new MutableLong().longValue()); 
          
         assertEquals(1, new MutableLong(1).longValue()); 
          
         assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); 
         assertEquals(3, new MutableLong(3)).longValue()); 
  
         assertEquals(3, new MutableLong(3).longValue()); 
         assertEquals(2, new MutableLong("2").longValue()); 
  
     } 
  

@Test 
     public void testConstructors497() { 
         assertEquals(0, new MutableLong().longValue()); 
          
         assertEquals(1, new MutableLong(1).longValue()); 
          
         assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); 
         assertEquals(3, new MutableLong(3)).longValue()); 
  
         assertEquals(3, new MutableLong(3).longValue()); 
         assertEquals(2, new MutableLong("2").longValue()); 
  
     } 
  

@Test 
     public void testConstructors498() { 
         assertEquals(0, new MutableLong().longValue()); 
          
         assertEquals(1, new MutableLong(1).longValue()); 
          
         assertEquals(2, new MutableLong(Long.valueOf(2)).longValue()); 
         assertEquals(3, new MutableLong(3)).longValue()); 
  
         assertEquals(3, new MutableLong(3).longValue()); 
         assertEquals(2, new MutableLong("2").longValue()); 
  
     } 
  

@Test 
     public void testGetSet499() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet500() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet501() { 
         final MutableLong mutNum = new MutableLong(0); 
         assertEquals(0, new MutableLong().longValue()); 
         assertEquals(Long.valueOf(0), new MutableLong().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1, mutNum.longValue()); 
         assertEquals(Long.valueOf(1), mutNum.getValue()); 
          
         mutNum.setValue(Long.valueOf(2)); 
         assertEquals(2, mutNum.longValue()); 
         assertEquals(Long.valueOf(2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableLong(3)); 
         assertEquals(3, mutNum.longValue()); 
         assertEquals(Long.valueOf(3), mutNum.getValue()); 
     } 
  

