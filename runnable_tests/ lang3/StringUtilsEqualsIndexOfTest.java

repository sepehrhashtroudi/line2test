@Test 
     public void testRandomStringUtils587() { 
         String r1 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r1.length()); 
         String r2 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r2.length()); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
          
         r1 = RandomStringUtils.randomAscii(50); 
         assertEquals("randomAscii(50) length", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); 
         }         
         r2 = RandomStringUtils.randomAscii(50); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
  
         r1 = RandomStringUtils.randomAlphabetic(50); 
         assertEquals("randomAlphabetic(50)", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
          
@Test 
     public void testExceptions588() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testRandomStringUtils589() { 
         String r1 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r1.length()); 
         String r2 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r2.length()); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
          
         r1 = RandomStringUtils.randomAscii(50); 
         assertEquals("randomAscii(50) length", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); 
         }         
         r2 = RandomStringUtils.randomAscii(50); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
  
         r1 = RandomStringUtils.randomAlphabetic(50); 
         assertEquals("randomAlphabetic(50)", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
          
@Test 
     public void testRandomStringUtils590() { 
         String r1 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r1.length()); 
         String r2 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r2.length()); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
          
         r1 = RandomStringUtils.randomAscii(50); 
         assertEquals("randomAscii(50) length", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); 
         }         
         r2 = RandomStringUtils.randomAscii(50); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
  
         r1 = RandomStringUtils.randomAlphabetic(50); 
         assertEquals("randomAlphabetic(50)", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
          
@Test 
     public void testRandomStringUtils591() { 
         String r1 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r1.length()); 
         String r2 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r2.length()); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
          
         r1 = RandomStringUtils.randomAscii(50); 
         assertEquals("randomAscii(50) length", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); 
         }         
         r2 = RandomStringUtils.randomAscii(50); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
  
         r1 = RandomStringUtils.randomAlphabetic(50); 
         assertEquals("randomAlphabetic(50)", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
          
@Test 
     public void testRandomStringUtils592() { 
         String r1 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r1.length()); 
         String r2 = RandomStringUtils.random(50); 
         assertEquals("random(50) length", 50, r2.length()); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
          
         r1 = RandomStringUtils.randomAscii(50); 
         assertEquals("randomAscii(50) length", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); 
         }         
         r2 = RandomStringUtils.randomAscii(50); 
         assertTrue("!r1.equals(r2)", !r1.equals(r2)); 
  
         r1 = RandomStringUtils.randomAlphabetic(50); 
         assertEquals("randomAlphabetic(50)", 50, r1.length()); 
         for(int i = 0; i < r1.length(); i++) { 
          
@Test 
     public void testExceptions593() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testExceptions594() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testExceptions595() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testExceptions596() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testExceptions597() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testExceptions598() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testExceptions599() { 
         final char[] DUMMY = new char[]{'a'}; // valid char array 
         try { 
             RandomStringUtils.random(-1); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, true, true); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, DUMMY); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
             RandomStringUtils.random(-1, ""); 
             fail(); 
         } catch (final IllegalArgumentException ex) {} 
         try { 
        
@Test 
     public void testBadStates601() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates602() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates605() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates606() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates607() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates608() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates609() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates610() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates611() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates612() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates613() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates614() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
@Test 
     public void testBadStates615() { 
         final StopWatch watch = new StopWatch(); 
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.stop(); 
             fail("Calling stop on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.suspend(); 
             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); 
         } catch(final IllegalStateException ise) { 
             // expected 
         } 
  
         try { 
             watch.split(); 
             fail("Calling split on a non-running StopWatch should throw an exception. "); 
         }
