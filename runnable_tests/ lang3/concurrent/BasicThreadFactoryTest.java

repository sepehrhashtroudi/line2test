@Test 
     public void testElementCompareTo1525() { 
         try { 
             intRange.elementCompareTo(null); 
             fail("NullPointerException should have been thrown"); 
         } catch(final NullPointerException npe) { 
             // expected 
         } 
          
         assertEquals(-1, intRange.elementCompareTo(5)); 
         assertEquals(0, intRange.elementCompareTo(10)); 
         assertEquals(0, intRange.elementCompareTo(15)); 
         assertEquals(0, intRange.elementCompareTo(20)); 
         assertEquals(1, intRange.elementCompareTo(25)); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testContainsRange1526() { 
  
         // null handling 
         assertFalse(intRange.containsRange(null)); 
  
         // easy inside range 
         assertTrue(intRange.containsRange(Range.between(12, 18))); 
  
         // outside range on each side 
         assertFalse(intRange.containsRange(Range.between(32, 45))); 
         assertFalse(intRange.containsRange(Range.between(2, 8))); 
  
         // equals range 
         assertTrue(intRange.containsRange(Range.between(10, 20))); 
  
         // overlaps 
         assertFalse(intRange.containsRange(Range.between(9, 14))); 
         assertFalse(intRange.containsRange(Range.between(16, 21))); 
  
         // touches lower boundary 
         assertTrue(intRange.containsRange(Range.between(10, 19))); 
         assertFalse(intRange.containsRange(Range.between(10, 21))); 
  
         // touches upper boundary 
         assertTrue(intRange.containsRange(Range.between(11, 20))); 
         assertFalse(intRange.containsRange(Range.between(9, 20)));
@Test 
     public void testContainsRange1527() { 
  
         // null handling 
         assertFalse(intRange.containsRange(null)); 
  
         // easy inside range 
         assertTrue(intRange.containsRange(Range.between(12, 18))); 
  
         // outside range on each side 
         assertFalse(intRange.containsRange(Range.between(32, 45))); 
         assertFalse(intRange.containsRange(Range.between(2, 8))); 
  
         // equals range 
         assertTrue(intRange.containsRange(Range.between(10, 20))); 
  
         // overlaps 
         assertFalse(intRange.containsRange(Range.between(9, 14))); 
         assertFalse(intRange.containsRange(Range.between(16, 21))); 
  
         // touches lower boundary 
         assertTrue(intRange.containsRange(Range.between(10, 19))); 
         assertFalse(intRange.containsRange(Range.between(10, 21))); 
  
         // touches upper boundary 
         assertTrue(intRange.containsRange(Range.between(11, 20))); 
         assertFalse(intRange.containsRange(Range.between(9, 20)));
@Test 
     public void testContainsRange1528() { 
  
         // null handling 
         assertFalse(intRange.containsRange(null)); 
  
         // easy inside range 
         assertTrue(intRange.containsRange(Range.between(12, 18))); 
  
         // outside range on each side 
         assertFalse(intRange.containsRange(Range.between(32, 45))); 
         assertFalse(intRange.containsRange(Range.between(2, 8))); 
  
         // equals range 
         assertTrue(intRange.containsRange(Range.between(10, 20))); 
  
         // overlaps 
         assertFalse(intRange.containsRange(Range.between(9, 14))); 
         assertFalse(intRange.containsRange(Range.between(16, 21))); 
  
         // touches lower boundary 
         assertTrue(intRange.containsRange(Range.between(10, 19))); 
         assertFalse(intRange.containsRange(Range.between(10, 21))); 
  
         // touches upper boundary 
         assertTrue(intRange.containsRange(Range.between(11, 20))); 
         assertFalse(intRange.containsRange(Range.between(9, 20)));
@Test 
     public void testContainsRange1529() { 
  
         // null handling 
         assertFalse(intRange.containsRange(null)); 
  
         // easy inside range 
         assertTrue(intRange.containsRange(Range.between(12, 18))); 
  
         // outside range on each side 
         assertFalse(intRange.containsRange(Range.between(32, 45))); 
         assertFalse(intRange.containsRange(Range.between(2, 8))); 
  
         // equals range 
         assertTrue(intRange.containsRange(Range.between(10, 20))); 
  
         // overlaps 
         assertFalse(intRange.containsRange(Range.between(9, 14))); 
         assertFalse(intRange.containsRange(Range.between(16, 21))); 
  
         // touches lower boundary 
         assertTrue(intRange.containsRange(Range.between(10, 19))); 
         assertFalse(intRange.containsRange(Range.between(10, 21))); 
  
         // touches upper boundary 
         assertTrue(intRange.containsRange(Range.between(11, 20))); 
         assertFalse(intRange.containsRange(Range.between(9, 20)));
@Test 
     public void testIsAfterRange1530() { 
         assertFalse(intRange.isAfterRange(null)); 
          
         assertTrue(intRange.isAfterRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isAfterRange(Range.between(5, 10))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 20))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 25))); 
         assertFalse(intRange.isAfterRange(Range.between(15, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIsAfterRange1531() { 
         assertFalse(intRange.isAfterRange(null)); 
          
         assertTrue(intRange.isAfterRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isAfterRange(Range.between(5, 10))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 20))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 25))); 
         assertFalse(intRange.isAfterRange(Range.between(15, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIsAfterRange1532() { 
         assertFalse(intRange.isAfterRange(null)); 
          
         assertTrue(intRange.isAfterRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isAfterRange(Range.between(5, 10))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 20))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 25))); 
         assertFalse(intRange.isAfterRange(Range.between(15, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIsAfterRange1533() { 
         assertFalse(intRange.isAfterRange(null)); 
          
         assertTrue(intRange.isAfterRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isAfterRange(Range.between(5, 10))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 20))); 
         assertFalse(intRange.isAfterRange(Range.between(5, 25))); 
         assertFalse(intRange.isAfterRange(Range.between(15, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isAfterRange(Range.between(10, 20))); 
     } 
  

@Test(expected = IllegalArgumentException.class) 
     public void testIntersectionWithNull1534() { 
         intRange.intersectionWith(null); 
     } 
  

@Test(expected = IllegalArgumentException.class) 
     public void testIntersectionWithNull1535() { 
         intRange.intersectionWith(null); 
     } 
  

@Test(expected = IllegalArgumentException.class) 
     public void testIntersectionWithNull1536() { 
         intRange.intersectionWith(null); 
     } 
  

@Test(expected = IllegalArgumentException.class) 
     public void testIntersectionWithNull1537() { 
         intRange.intersectionWith(null); 
     } 
  

@Test 
     public void testIsBeforeRange1538() { 
         assertFalse(intRange.isBeforeRange(null)); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 10))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 20))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 25))); 
         assertFalse(intRange.isBeforeRange(Range.between(15, 25))); 
          
         assertTrue(intRange.isBeforeRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIsBeforeRange1539() { 
         assertFalse(intRange.isBeforeRange(null)); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 10))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 20))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 25))); 
         assertFalse(intRange.isBeforeRange(Range.between(15, 25))); 
          
         assertTrue(intRange.isBeforeRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIsBeforeRange1540() { 
         assertFalse(intRange.isBeforeRange(null)); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 10))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 20))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 25))); 
         assertFalse(intRange.isBeforeRange(Range.between(15, 25))); 
          
         assertTrue(intRange.isBeforeRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIsBeforeRange1541() { 
         assertFalse(intRange.isBeforeRange(null)); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 10))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 20))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 25))); 
         assertFalse(intRange.isBeforeRange(Range.between(15, 25))); 
          
         assertTrue(intRange.isBeforeRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIntersectionWith1542() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

@Test(expected = IllegalArgumentException.class) 
     public void testIntersectionWithNull1543() { 
         intRange.intersectionWith(null); 
     } 
  

@Test(expected = IllegalArgumentException.class) 
     public void testIntersectionWithNull1544() { 
         intRange.intersectionWith(null); 
     } 
  

@Test 
     public void testIntersectionWith1545() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

@Test 
     public void testIntersectionWith1546() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

@Test 
     public void testIntersectionWith1547() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

@Test 
     public void testIntersectionWith1548() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

@Test 
     public void testIntersectionWith1549() { 
         assertSame(intRange, intRange.intersectionWith(intRange)); 
         assertSame(byteRange, byteRange.intersectionWith(byteRange)); 
         assertSame(longRange, longRange.intersectionWith(longRange)); 
         assertSame(floatRange, floatRange.intersectionWith(floatRange)); 
         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); 
  
         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); 
     } 
  

@Test 
     public void testEqualsObject1550() { 
         assertEquals(byteRange, byteRange); 
         assertEquals(byteRange, byteRange2); 
         assertEquals(byteRange2, byteRange2); 
         assertTrue(byteRange.equals(byteRange)); 
         assertTrue(byteRange2.equals(byteRange2)); 
         assertTrue(byteRange3.equals(byteRange3)); 
         assertFalse(byteRange2.equals(byteRange3)); 
         assertFalse(byteRange2.equals(null)); 
         assertFalse(byteRange2.equals("Ni!")); 
     } 
  

@Test 
     public void testEqualsObject1551() { 
         assertEquals(byteRange, byteRange); 
         assertEquals(byteRange, byteRange2); 
         assertEquals(byteRange2, byteRange2); 
         assertTrue(byteRange.equals(byteRange)); 
         assertTrue(byteRange2.equals(byteRange2)); 
         assertTrue(byteRange3.equals(byteRange3)); 
         assertFalse(byteRange2.equals(byteRange3)); 
         assertFalse(byteRange2.equals(null)); 
         assertFalse(byteRange2.equals("Ni!")); 
     } 
  

@Test 
     public void testEqualsObject1552() { 
         assertEquals(byteRange, byteRange); 
         assertEquals(byteRange, byteRange2); 
         assertEquals(byteRange2, byteRange2); 
         assertTrue(byteRange.equals(byteRange)); 
         assertTrue(byteRange2.equals(byteRange2)); 
         assertTrue(byteRange3.equals(byteRange3)); 
         assertFalse(byteRange2.equals(byteRange3)); 
         assertFalse(byteRange2.equals(null)); 
         assertFalse(byteRange2.equals("Ni!")); 
     } 
  

@Test 
     public void testEqualsObject1553() { 
         assertEquals(byteRange, byteRange); 
         assertEquals(byteRange, byteRange2); 
         assertEquals(byteRange2, byteRange2); 
         assertTrue(byteRange.equals(byteRange)); 
         assertTrue(byteRange2.equals(byteRange2)); 
         assertTrue(byteRange3.equals(byteRange3)); 
         assertFalse(byteRange2.equals(byteRange3)); 
         assertFalse(byteRange2.equals(null)); 
         assertFalse(byteRange2.equals("Ni!")); 
     } 
  

@Test 
     public void testEqualsObject1554() { 
         assertEquals(byteRange, byteRange); 
         assertEquals(byteRange, byteRange2); 
         assertEquals(byteRange2, byteRange2); 
         assertTrue(byteRange.equals(byteRange)); 
         assertTrue(byteRange2.equals(byteRange2)); 
         assertTrue(byteRange3.equals(byteRange3)); 
         assertFalse(byteRange2.equals(byteRange3)); 
         assertFalse(byteRange2.equals(null)); 
         assertFalse(byteRange2.equals("Ni!")); 
     } 
  

@Test 
     public void testDeserializeBytesOfNull1555() throws Exception { 
         final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); 
         final ObjectOutputStream oos = new ObjectOutputStream(streamReal); 
         oos.writeObject(null); 
         oos.flush(); 
         oos.close(); 
  
         final Object test = SerializationUtils.deserialize(streamReal.toByteArray()); 
         assertNull(test); 
     } 
  

@Test 
     public void testEqualsObject1556() { 
         assertEquals(byteRange, byteRange); 
         assertEquals(byteRange, byteRange2); 
         assertEquals(byteRange2, byteRange2); 
         assertTrue(byteRange.equals(byteRange)); 
         assertTrue(byteRange2.equals(byteRange2)); 
         assertTrue(byteRange3.equals(byteRange3)); 
         assertFalse(byteRange2.equals(byteRange3)); 
         assertFalse(byteRange2.equals(null)); 
         assertFalse(byteRange2.equals("Ni!")); 
     } 
  

@Test 
     public void testHashCode1557() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1558() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1559() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1560() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1561() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1562() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1563() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1564() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testHashCode1565() { 
         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); 
         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); 
          
         assertEquals(intRange.hashCode(), intRange.hashCode()); 
         assertTrue(intRange.hashCode() != 0); 
     } 
  

@Test 
     public void testToString1566() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1567() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1568() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1569() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1570() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1571() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1572() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1573() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1574() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1575() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1576() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToString1577() { 
         assertNotNull(byteRange.toString()); 
          
         final String str = intRange.toString(); 
         assertEquals("[10..20]", str); 
         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); 
     } 
  

@Test 
     public void testToStringFormat1578() { 
         final String str = intRange.toString("From %1$s to %2$s"); 
         assertEquals("From 10 to 20", str); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToStringFormat1579() { 
         final String str = intRange.toString("From %1$s to %2$s"); 
         assertEquals("From 10 to 20", str); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testIsBeforeRange1580() { 
         assertFalse(intRange.isBeforeRange(null)); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 10))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 20))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 25))); 
         assertFalse(intRange.isBeforeRange(Range.between(15, 25))); 
          
         assertTrue(intRange.isBeforeRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testIsBeforeRange1581() { 
         assertFalse(intRange.isBeforeRange(null)); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 9))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(5, 10))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 20))); 
         assertFalse(intRange.isBeforeRange(Range.between(5, 25))); 
         assertFalse(intRange.isBeforeRange(Range.between(15, 25))); 
          
         assertTrue(intRange.isBeforeRange(Range.between(21, 25))); 
          
         assertFalse(intRange.isBeforeRange(Range.between(10, 20))); 
     } 
  

@Test 
     public void testConstructors1582() { 
         assertEquals((short) 0, new MutableShort().shortValue()); 
          
         assertEquals((short) 1, new MutableShort((short) 1).shortValue()); 
          
         assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); 
         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); 
  
         assertEquals((short) 2, new MutableShort("2").shortValue()); 
  
         try { 
             new MutableShort((Number)null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testConstructors1583() { 
         assertEquals((short) 0, new MutableShort().shortValue()); 
          
         assertEquals((short) 1, new MutableShort((short) 1).shortValue()); 
          
         assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); 
         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); 
  
         assertEquals((short) 2, new MutableShort("2").shortValue()); 
  
         try { 
             new MutableShort((Number)null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testCompareTo1584() { 
         final MutableShort mutNum = new MutableShort((short) 0); 
  
         assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); 
         assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); 
         assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); 
         try { 
             mutNum.compareTo(null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testCompareTo1585() { 
         final MutableShort mutNum = new MutableShort((short) 0); 
  
         assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); 
         assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); 
         assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); 
         try { 
             mutNum.compareTo(null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testCompareTo1586() { 
         final MutableShort mutNum = new MutableShort((short) 0); 
  
         assertEquals((short) 0, mutNum.compareTo(new MutableShort((short) 0))); 
         assertEquals((short) +1, mutNum.compareTo(new MutableShort((short) -1))); 
         assertEquals((short) -1, mutNum.compareTo(new MutableShort((short) 1))); 
         try { 
             mutNum.compareTo(null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testConstructors1587() { 
         assertEquals((short) 0, new MutableShort().shortValue()); 
          
         assertEquals((short) 1, new MutableShort((short) 1).shortValue()); 
          
         assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); 
         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); 
  
         assertEquals((short) 2, new MutableShort("2").shortValue()); 
  
         try { 
             new MutableShort((Number)null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testConstructors1588() { 
         assertEquals((short) 0, new MutableShort().shortValue()); 
          
         assertEquals((short) 1, new MutableShort((short) 1).shortValue()); 
          
         assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); 
         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); 
  
         assertEquals((short) 2, new MutableShort("2").shortValue()); 
  
         try { 
             new MutableShort((Number)null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testConstructors1589() { 
         assertEquals((short) 0, new MutableShort().shortValue()); 
          
         assertEquals((short) 1, new MutableShort((short) 1).shortValue()); 
          
         assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); 
         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); 
  
         assertEquals((short) 2, new MutableShort("2").shortValue()); 
  
         try { 
             new MutableShort((Number)null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

@Test 
     public void testConstructors1590() { 
         assertEquals((short) 0, new MutableShort().shortValue()); 
          
         assertEquals((short) 1, new MutableShort((short) 1).shortValue()); 
          
         assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue()); 
         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue()); 
  
         assertEquals((short) 2, new MutableShort("2").shortValue()); 
  
         try { 
             new MutableShort((Number)null); 
             fail(); 
         } catch (final NullPointerException ex) {} 
     } 
  

