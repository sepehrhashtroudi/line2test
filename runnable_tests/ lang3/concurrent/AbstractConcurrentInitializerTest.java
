@Test 
     public void testLang8821() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testLang8822() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testLang8823() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testLang8824() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testLang8825() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testLang8826() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testLang8827() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testLang8828() throws IOException { 
         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { new StringBuffer("one"), new StringBuffer("two") } }); 
         final StringWriter out = new StringWriter(); 
         final int result = lt.translate(new StringBuffer("one"), 0, out); 
         assertEquals("Incorrect codepoint consumption", 3, result); 
         assertEquals("Incorrect value", "two", out.toString()); 
     } 
  
 } 

@Test 
     public void testComparable1227() throws Exception { 
         final Pair<String, String> pair1 = Pair.of("A", "D"); 
         final Pair<String, String> pair2 = Pair.of("B", "C"); 
         assertTrue(pair1.compareTo(pair1) == 0); 
         assertTrue(pair1.compareTo(pair2) < 0); 
         assertTrue(pair2.compareTo(pair2) == 0); 
         assertTrue(pair2.compareTo(pair1) > 0); 
     } 
  

@Test 
     public void testCompatibilityBetweenPairs228() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

@Test 
     public void testCompatibilityBetweenPairs229() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

@Test 
     public void testCompatibilityBetweenPairs230() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

@Test 
     public void testCompatibilityBetweenPairs231() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

@Test 
     public void testCompatibilityBetweenPairs232() throws Exception { 
         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); 
         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); 
         assertEquals(pair, pair2); 
         assertEquals(pair.hashCode(), pair2.hashCode()); 
         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); 
         set.add(pair); 
         assertTrue(set.contains(pair2)); 
  
         pair2.setValue("bar"); 
         assertFalse(pair.equals(pair2)); 
         assertFalse(pair.hashCode() == pair2.hashCode()); 
     } 
  

@Test 
     public void testFormatCalendar1221() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c
@Test 
     public void testFormatCalendar1222() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c
@Test 
     public void testGetSet1223() { 
         final MutableObject<String> mutNum = new MutableObject<String>(); 
         assertEquals(null, new MutableObject<Object>().getValue()); 
          
         mutNum.setValue("HELLO"); 
         assertSame("HELLO", mutNum.getValue()); 
          
         mutNum.setValue(null); 
         assertSame(null, mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet1224() { 
         final MutableObject<String> mutNum = new MutableObject<String>(); 
         assertEquals(null, new MutableObject<Object>().getValue()); 
          
         mutNum.setValue("HELLO"); 
         assertSame("HELLO", mutNum.getValue()); 
          
         mutNum.setValue(null); 
         assertSame(null, mutNum.getValue()); 
     } 
  

@Test 
     public void testHashCode1225() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); 
         assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); 
         assertEquals(0, mutNumD.hashCode()); 
     } 
  

@Test 
     public void testHashCode1226() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); 
         assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); 
         assertEquals(0, mutNumD.hashCode()); 
     } 
  

