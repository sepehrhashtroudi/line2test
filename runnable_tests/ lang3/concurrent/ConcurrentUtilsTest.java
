@Test 
     public void testEquals1234() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(mutNumD)); 
         assertTrue(mutNumD.equals(mutNumD)); 
          
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(new Object())); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1235() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(mutNumD)); 
         assertTrue(mutNumD.equals(mutNumD)); 
          
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(new Object())); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

