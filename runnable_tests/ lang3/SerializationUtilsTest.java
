@Test 
     public void testFormat1210() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), Date
@Test 
     public void testFormatCalendar1211() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c
@Test 
     public void testFormatCalendar1212() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c
@Test 
     public void testFormatCalendar1213() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c
@Test 
     public void testFormatCalendar1214() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         c.setTimeZone(TimeZone.getDefault()); 
         final StringBuilder buffer = new StringBuilder (); 
         final int year = c.get(Calendar.YEAR); 
         final int month = c.get(Calendar.MONTH) + 1; 
         final int day = c.get(Calendar.DAY_OF_MONTH); 
         final int hour = c.get(Calendar.HOUR_OF_DAY); 
         buffer.append (year); 
         buffer.append(month); 
         buffer.append(day); 
         buffer.append(hour); 
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); 
          
         assertEquals(buffer.toString(), DateFormatUtils.format(c
@Test 
     public void testDateTimeISO1215(){ 
         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); 
         final Calendar cal = Calendar.getInstance(timeZone); 
         cal.set(2002,1,23,9,11,12); 
         String text = DateFormatUtils.format(cal.getTime(),  
                         DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone); 
         assertEquals("2002-02-23T09:11:12", text); 
         text = DateFormatUtils.format(cal.getTime().getTime(),  
                       DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone); 
         assertEquals("2002-02-23T09:11:12", text); 
         text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal); 
         assertEquals("2002-02-23T09:11:12", text); 
          
         text = DateFormatUtils.format(cal.getTime(),  
                       DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone); 
         assertEquals("2002-02-23T09:11:12-03:00
