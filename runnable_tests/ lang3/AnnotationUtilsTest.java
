@Test 
     public void testEquals1236() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(mutNumD)); 
         assertTrue(mutNumD.equals(mutNumD)); 
          
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(new Object())); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1237() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(mutNumD)); 
         assertTrue(mutNumD.equals(mutNumD)); 
          
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(new Object())); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1238() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(mutNumD)); 
         assertTrue(mutNumD.equals(mutNumD)); 
          
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(new Object())); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1239() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(mutNumD)); 
         assertTrue(mutNumD.equals(mutNumD)); 
          
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(new Object())); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1240() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(mutNumD)); 
         assertTrue(mutNumD.equals(mutNumD)); 
          
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(new Object())); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testHashCode1241() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); 
         assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); 
         assertEquals(0, mutNumD.hashCode()); 
     } 
  

@Test 
     public void testHashCode1242() { 
         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); 
         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); 
         final MutableObject<String> mutNumD = new MutableObject<String>(null); 
  
         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumA.hashCode()); 
         assertFalse(mutNumA.hashCode() == mutNumD.hashCode()); 
         assertTrue(mutNumA.hashCode() == "ALPHA".hashCode()); 
         assertEquals(0, mutNumD.hashCode()); 
     } 
  

@Test 
     public void testToString1243() { 
         assertEquals("HI", new MutableObject<String>("HI").toString()); 
         assertEquals("10.0", new MutableObject<Double>(Double.valueOf(10)).toString()); 
         assertEquals("null", new MutableObject<Object>(null).toString()); 
     } 
  
 } 

@Test 
     public void testToString1244() { 
         assertEquals("HI", new MutableObject<String>("HI").toString()); 
         assertEquals("10.0", new MutableObject<Double>(Double.valueOf(10)).toString()); 
         assertEquals("null", new MutableObject<Object>(null).toString()); 
     } 
  
 } 

@Test 
     public void testOutOfBounds1245() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
  
         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); 
         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); 
         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); 
         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); 
     } 
  

@Test 
     public void testOutOfBounds1246() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
  
         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); 
         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); 
         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); 
         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); 
     } 
  

@Test 
     public void testOutOfBounds1247() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
  
         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); 
         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); 
         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); 
         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); 
     } 
  

@Test 
     public void testOutOfBounds1248() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
  
         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); 
         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); 
         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); 
         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); 
     } 
  

@Test 
     public void testOutOfBounds1249() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
  
         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); 
         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); 
         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); 
         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); 
     } 
  

@Test 
     public void testOutOfBounds1250() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
  
         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); 
         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); 
         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); 
         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); 
     } 
  

@Test 
     public void testOutOfBounds1251() { 
         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); 
  
         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); 
         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); 
         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); 
         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); 
     } 
  

@Test 
     public void testConstructors1252() { 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
          
         assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); 
          
         assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); 
         assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); 
  
         assertEquals((byte) 2, new MutableByte("2").byteValue()); 
  
     } 
  

@Test 
     public void testConstructors1253() { 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
          
         assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); 
          
         assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); 
         assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); 
  
         assertEquals((byte) 2, new MutableByte("2").byteValue()); 
  
     } 
  

@Test 
     public void testPrimitiveValues1254() { 
         final MutableByte mutNum = new MutableByte( (byte) 1 ); 
          
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1255() { 
         final MutableByte mutNum = new MutableByte( (byte) 1 ); 
          
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1256() { 
         final MutableByte mutNum = new MutableByte( (byte) 1 ); 
          
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1257() { 
         new MutableByte((byte)null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1258() { 
         new MutableByte((byte)null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1259() { 
         new MutableByte((byte)null); 
     } 
  

@Test 
     public void testConstructors1260() { 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
          
         assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); 
          
         assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); 
         assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); 
  
         assertEquals((byte) 2, new MutableByte("2").byteValue()); 
  
     } 
  

@Test 
     public void testConstructors1261() { 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
          
         assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); 
          
         assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); 
         assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); 
  
         assertEquals((byte) 2, new MutableByte("2").byteValue()); 
  
     } 
  

@Test 
     public void testConstructors1262() { 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
          
         assertEquals((byte) 1, new MutableByte((byte) 1).byteValue()); 
          
         assertEquals((byte) 2, new MutableByte(Byte.valueOf((byte) 2)).byteValue()); 
         assertEquals((byte) 3, new MutableByte(new MutableByte((byte) 3)).byteValue()); 
  
         assertEquals((byte) 2, new MutableByte("2").byteValue()); 
  
     } 
  

@Test 
     public void testGetSet1263() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); 
          
         mutNum.setValue((byte) 1); 
         assertEquals((byte) 1, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); 
          
         mutNum.setValue(Byte.valueOf((byte) 2)); 
         assertEquals((byte) 2, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableByte((byte) 3)); 
         assertEquals((byte) 3, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet1264() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); 
          
         mutNum.setValue((byte) 1); 
         assertEquals((byte) 1, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); 
          
         mutNum.setValue(Byte.valueOf((byte) 2)); 
         assertEquals((byte) 2, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableByte((byte) 3)); 
         assertEquals((byte) 3, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet1265() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); 
          
         mutNum.setValue((byte) 1); 
         assertEquals((byte) 1, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); 
          
         mutNum.setValue(Byte.valueOf((byte) 2)); 
         assertEquals((byte) 2, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableByte((byte) 3)); 
         assertEquals((byte) 3, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet1266() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         assertEquals((byte) 0, new MutableByte().byteValue()); 
         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); 
          
         mutNum.setValue((byte) 1); 
         assertEquals((byte) 1, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); 
          
         mutNum.setValue(Byte.valueOf((byte) 2)); 
         assertEquals((byte) 2, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); 
          
         mutNum.setValue(new MutableByte((byte) 3)); 
         assertEquals((byte) 3, mutNum.byteValue()); 
         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testSetNull1267() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         mutNum.setValue(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testSetNull1268() { 
         final MutableByte mutNum = new MutableByte((byte) 0); 
         mutNum.setValue(null); 
     } 
  

@Test 
     public void testIncrement1269() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.increment(); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testIncrement1270() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.increment(); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1271() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1272() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testAddValuePrimitive1273() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.add((byte)1); 
          
         assertEquals((byte) 2, mutNum.byteValue()); 
     } 
  

@Test 
     public void testAddValuePrimitive1274() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.add((byte)1); 
          
         assertEquals((byte) 2, mutNum.byteValue()); 
     } 
  

@Test 
     public void testAddValueObject1275() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.add(Integer.valueOf(1)); 
          
         assertEquals((byte) 2, mutNum.byteValue()); 
     } 
  

@Test 
     public void testAddValueObject1276() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.add(Integer.valueOf(1)); 
          
         assertEquals((byte) 2, mutNum.byteValue()); 
     } 
  

@Test 
     public void testSubtractValuePrimitive1277() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.subtract((byte) 1); 
          
         assertEquals((byte) 0, mutNum.byteValue()); 
     } 
  

@Test 
     public void testSubtractValuePrimitive1278() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.subtract((byte) 1); 
          
         assertEquals((byte) 0, mutNum.byteValue()); 
     } 
  

@Test 
     public void testSubtractValueObject1279() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.subtract(Integer.valueOf(1)); 
          
         assertEquals((byte) 0, mutNum.byteValue()); 
     } 
  

@Test 
     public void testSubtractValueObject1280() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.subtract(Integer.valueOf(1)); 
          
         assertEquals((byte) 0, mutNum.byteValue()); 
     } 
  

@Test 
     public void testPrimitiveValues1281() { 
         final MutableByte mutNum = new MutableByte( (byte) 1 ); 
          
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1282() { 
         final MutableByte mutNum = new MutableByte( (byte) 1 ); 
          
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1, mutNum.intValue() ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testDecrement1283() { 
         final MutableInt mutNum = new MutableInt(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1284() { 
         final MutableInt mutNum = new MutableInt(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1285() { 
         final MutableInt mutNum = new MutableInt(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1286() { 
         final MutableInt mutNum = new MutableInt(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testPrimitiveValues1287() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1288() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1289() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testPrimitiveValues1290() { 
         final MutableInt mutNum = new MutableInt(1); 
          
         assertEquals( (byte) 1, mutNum.byteValue() ); 
         assertEquals( (short) 1, mutNum.shortValue() ); 
         assertEquals( 1.0F, mutNum.floatValue(), 0 ); 
         assertEquals( 1.0, mutNum.doubleValue(), 0 ); 
         assertEquals( 1L, mutNum.longValue() ); 
     } 
  

@Test 
     public void testToByte1291() { 
         assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte()); 
         assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte()); 
     } 
  

@Test 
     public void testToByte1292() { 
         assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte()); 
         assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte()); 
     } 
  

@Test 
     public void testEquals1293() { 
         final MutableByte mutNumA = new MutableByte((byte) 0); 
         final MutableByte mutNumB = new MutableByte((byte) 0); 
         final MutableByte mutNumC = new MutableByte((byte) 1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

@Test 
     public void testEquals1294() { 
         final MutableByte mutNumA = new MutableByte((byte) 0); 
         final MutableByte mutNumB = new MutableByte((byte) 0); 
         final MutableByte mutNumC = new MutableByte((byte) 1); 
  
         assertTrue(mutNumA.equals(mutNumA)); 
         assertTrue(mutNumA.equals(mutNumB)); 
         assertTrue(mutNumB.equals(mutNumA)); 
         assertTrue(mutNumB.equals(mutNumB)); 
         assertFalse(mutNumA.equals(mutNumC)); 
         assertFalse(mutNumB.equals(mutNumC)); 
         assertTrue(mutNumC.equals(mutNumC)); 
         assertFalse(mutNumA.equals(null)); 
         assertFalse(mutNumA.equals(Byte.valueOf((byte) 0))); 
         assertFalse(mutNumA.equals("0")); 
     } 
  

