@Test 
     public void testGetSet1305() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1306() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1307() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1308() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1309() { 
         new MutableBoolean(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1310() { 
         new MutableBoolean(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1311() { 
         new MutableBoolean(null); 
     } 
  

@Test 
     public void testGetSet1312() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1313() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testCompareTo1314() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
  
         assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); 
         assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); 
         mutBool.setValue(true); 
         assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); 
         assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); 
     } 
      

@Test 
     public void testCompareTo1315() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
  
         assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); 
         assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); 
         mutBool.setValue(true); 
         assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); 
         assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); 
     } 
      

@Test 
     public void testGetSet1317() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1318() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1319() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1320() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1321() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1322() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1323() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1324() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testGetSet1325() { 
         assertFalse(new MutableBoolean().booleanValue()); 
         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); 
          
         final MutableBoolean mutBool = new MutableBoolean(false); 
         assertEquals(Boolean.FALSE, mutBool.toBoolean()); 
         assertFalse(mutBool.booleanValue()); 
         assertTrue(mutBool.isFalse()); 
         assertFalse(mutBool.isTrue()); 
  
         mutBool.setValue(Boolean.TRUE); 
         assertEquals(Boolean.TRUE, mutBool.toBoolean()); 
         assertTrue(mutBool.booleanValue()); 
         assertFalse(mutBool.isFalse()); 
         assertTrue(mutBool.isTrue()); 
  
         mutBool.setValue(false); 
         assertFalse(mutBool.booleanValue()); 
  
         mutBool.setValue(true); 
         assertTrue(mutBool.booleanValue()); 
  
     } 
  

@Test 
     public void testEquals1326() { 
         final MutableBoolean mutBoolA = new MutableBoolean(false); 
         final MutableBoolean mutBoolB = new MutableBoolean(false); 
         final MutableBoolean mutBoolC = new MutableBoolean(true); 
  
         assertTrue(mutBoolA.equals(mutBoolA)); 
         assertTrue(mutBoolA.equals(mutBoolB)); 
         assertTrue(mutBoolB.equals(mutBoolA)); 
         assertTrue(mutBoolB.equals(mutBoolB)); 
         assertFalse(mutBoolA.equals(mutBoolC)); 
         assertFalse(mutBoolB.equals(mutBoolC)); 
         assertTrue(mutBoolC.equals(mutBoolC)); 
         assertFalse(mutBoolA.equals(null)); 
         assertFalse(mutBoolA.equals(Boolean.FALSE)); 
         assertFalse(mutBoolA.equals("false")); 
     } 
  

@Test 
     public void testEquals1327() { 
         final MutableBoolean mutBoolA = new MutableBoolean(false); 
         final MutableBoolean mutBoolB = new MutableBoolean(false); 
         final MutableBoolean mutBoolC = new MutableBoolean(true); 
  
         assertTrue(mutBoolA.equals(mutBoolA)); 
         assertTrue(mutBoolA.equals(mutBoolB)); 
         assertTrue(mutBoolB.equals(mutBoolA)); 
         assertTrue(mutBoolB.equals(mutBoolB)); 
         assertFalse(mutBoolA.equals(mutBoolC)); 
         assertFalse(mutBoolB.equals(mutBoolC)); 
         assertTrue(mutBoolC.equals(mutBoolC)); 
         assertFalse(mutBoolA.equals(null)); 
         assertFalse(mutBoolA.equals(Boolean.FALSE)); 
         assertFalse(mutBoolA.equals("false")); 
     } 
  

@Test 
     public void testEquals1328() { 
         final MutableBoolean mutBoolA = new MutableBoolean(false); 
         final MutableBoolean mutBoolB = new MutableBoolean(false); 
         final MutableBoolean mutBoolC = new MutableBoolean(true); 
  
         assertTrue(mutBoolA.equals(mutBoolA)); 
         assertTrue(mutBoolA.equals(mutBoolB)); 
         assertTrue(mutBoolB.equals(mutBoolA)); 
         assertTrue(mutBoolB.equals(mutBoolB)); 
         assertFalse(mutBoolA.equals(mutBoolC)); 
         assertFalse(mutBoolB.equals(mutBoolC)); 
         assertTrue(mutBoolC.equals(mutBoolC)); 
         assertFalse(mutBoolA.equals(null)); 
         assertFalse(mutBoolA.equals(Boolean.FALSE)); 
         assertFalse(mutBoolA.equals("false")); 
     } 
  

@Test 
     public void testEquals1329() { 
         final MutableBoolean mutBoolA = new MutableBoolean(false); 
         final MutableBoolean mutBoolB = new MutableBoolean(false); 
         final MutableBoolean mutBoolC = new MutableBoolean(true); 
  
         assertTrue(mutBoolA.equals(mutBoolA)); 
         assertTrue(mutBoolA.equals(mutBoolB)); 
         assertTrue(mutBoolB.equals(mutBoolA)); 
         assertTrue(mutBoolB.equals(mutBoolB)); 
         assertFalse(mutBoolA.equals(mutBoolC)); 
         assertFalse(mutBoolB.equals(mutBoolC)); 
         assertTrue(mutBoolC.equals(mutBoolC)); 
         assertFalse(mutBoolA.equals(null)); 
         assertFalse(mutBoolA.equals(Boolean.FALSE)); 
         assertFalse(mutBoolA.equals("false")); 
     } 
  

@Test 
     public void testHashCode1330() { 
         final MutableBoolean mutBoolA = new MutableBoolean(false); 
         final MutableBoolean mutBoolB = new MutableBoolean(false); 
         final MutableBoolean mutBoolC = new MutableBoolean(true); 
  
         assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode()); 
         assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode()); 
         assertFalse(mutBoolA.hashCode() == mutBoolC.hashCode()); 
         assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode()); 
         assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode()); 
     } 
  

@Test 
     public void testHashCode1331() { 
         final MutableBoolean mutBoolA = new MutableBoolean(false); 
         final MutableBoolean mutBoolB = new MutableBoolean(false); 
         final MutableBoolean mutBoolC = new MutableBoolean(true); 
  
         assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode()); 
         assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode()); 
         assertFalse(mutBoolA.hashCode() == mutBoolC.hashCode()); 
         assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode()); 
         assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode()); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1332() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1333() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

@Test(expected=NullPointerException.class) 
     public void testCompareToNull1334() { 
         final MutableBoolean mutBool = new MutableBoolean(false); 
         mutBool.compareTo(null); 
     } 
  
     // ---------------------------------------------------------------- 

@Test 
     public void testToString1335() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testToString1336() { 
         assertEquals("0", new MutableByte((byte) 0).toString()); 
         assertEquals("10", new MutableByte((byte) 10).toString()); 
         assertEquals("-123", new MutableByte((byte) -123).toString()); 
     } 
  
 } 

@Test 
     public void testToString1337() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1338() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testToString1339() { 
         assertEquals("{}", ArrayUtils.toString(null)); 
         assertEquals("{}", ArrayUtils.toString(new Object[0])); 
         assertEquals("{}", ArrayUtils.toString(new String[0])); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); 
          
         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); 
         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); 
         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); 
         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testAtLeast1340() { 
         assertFalse("1.2 at least 1.5 passed", JAVA_1_1_6.atLeast(JAVA_1_5)); 
         assertFalse("1.5 at least 1.5 passed", JAVA_1_5.atLeast(JAVA_1_5)); 
     } 
  

@Test 
     public void testAtLeast1341() { 
         assertFalse("1.2 at least 1.5 passed", JAVA_1_1_6.atLeast(JAVA_1_5)); 
         assertFalse("1.5 at least 1.5 passed", JAVA_1_5.atLeast(JAVA_1_5)); 
     } 
  

@Test 
     public void testGetJavaVersion1342() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1343() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1344() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1345() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1346() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1347() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1348() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1349() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1350() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1351() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1352() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1353() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1354() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1355() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1356() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1357() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1358() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1359() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1360() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1361() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1362() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testGetJavaVersion1363() { 
         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); 
         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); 
         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); 
         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); 
         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); 
         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); 
         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); 
         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); 
         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); 
         assertNull("1.9 unexpectedly worked", get("1.9")); 
         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); 
     } 
  

@Test 
     public void testToString1364() { 
         assertEquals("1.2", JAVA_2_2.toString()); 
     } 
  
 } 

@Test 
     public void testToString1365() { 
         assertEquals("1.2", JAVA_2_2.toString()); 
     } 
  
 } 

@Test 
     public void testToString1366() throws Exception { 
         assertEquals("(null,null)", ImmutablePair.of(null, null).toString()); 
         assertEquals("(null,two)", ImmutablePair.of(null, "two").toString()); 
         assertEquals("(one,null)", ImmutablePair.of("one", null).toString()); 
         assertEquals("(one,two)", ImmutablePair.of("one", "two").toString()); 
     } 
  

@Test 
     public void testToString1367() throws Exception { 
         assertEquals("(null,null)", ImmutablePair.of(null, null).toString()); 
         assertEquals("(null,two)", ImmutablePair.of(null, "two").toString()); 
         assertEquals("(one,null)", ImmutablePair.of("one", null).toString()); 
         assertEquals("(one,two)", ImmutablePair.of("one", "two").toString()); 
     } 
  

@Test 
     public void testToString1368() throws Exception { 
         assertEquals("(null,null)", ImmutablePair.of(null, null).toString()); 
         assertEquals("(null,two)", ImmutablePair.of(null, "two").toString()); 
         assertEquals("(one,null)", ImmutablePair.of("one", null).toString()); 
         assertEquals("(one,two)", ImmutablePair.of("one", "two").toString()); 
     } 
  

@Test 
     public void testToString1369() throws Exception { 
         assertEquals("(null,null)", ImmutablePair.of(null, null).toString()); 
         assertEquals("(null,two)", ImmutablePair.of(null, "two").toString()); 
         assertEquals("(one,null)", ImmutablePair.of("one", null).toString()); 
         assertEquals("(one,two)", ImmutablePair.of("one", "two").toString()); 
     } 
  

@Test 
     public void testToString1370() throws Exception { 
         assertEquals("(null,null)", ImmutablePair.of(null, null).toString()); 
         assertEquals("(null,two)", ImmutablePair.of(null, "two").toString()); 
         assertEquals("(one,null)", ImmutablePair.of("one", null).toString()); 
         assertEquals("(one,two)", ImmutablePair.of("one", "two").toString()); 
     } 
  

@Test 
     public void testToString1371() throws Exception { 
         assertEquals("(null,null)", ImmutablePair.of(null, null).toString()); 
         assertEquals("(null,two)", ImmutablePair.of(null, "two").toString()); 
         assertEquals("(one,null)", ImmutablePair.of("one", null).toString()); 
         assertEquals("(one,two)", ImmutablePair.of("one", "two").toString()); 
     } 
  

@Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization1372() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

@Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization1373() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

@Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization1374() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

@Test 
     @SuppressWarnings("unchecked") 
     public void testSerialization1375() throws Exception { 
         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); 
         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
         final ObjectOutputStream out = new ObjectOutputStream(baos); 
         out.writeObject(origPair); 
         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( 
                 new ByteArrayInputStream(baos.toByteArray())).readObject(); 
         assertEquals(origPair, deserializedPair); 
         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); 
     } 
 } 

@Test 
     public void testConstructors1376() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test 
     public void testConstructors1377() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test 
     public void testConstructors1378() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test 
     public void testConstructors1379() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test 
     public void testConstructors1380() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1381() { 
         new MutableDouble((Number)null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1382() { 
         new MutableDouble((Number)null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testConstructorNull1383() { 
         new MutableDouble((Number)null); 
     } 
  

@Test 
     public void testConstructors1384() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test 
     public void testConstructors1385() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test 
     public void testConstructors1386() { 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
          
         assertEquals(1d, new MutableDouble(1d).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble(Double.valueOf(2d)).doubleValue(), 0.0001d); 
         assertEquals(3d, new MutableDouble(new MutableDouble(3d)).doubleValue(), 0.0001d); 
          
         assertEquals(2d, new MutableDouble("2.0").doubleValue(), 0.0001d); 
  
     } 
  

@Test 
     public void testGetSet1387() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(1d), mutNum.getValue()); 
          
         mutNum.setValue(Double.valueOf(2d)); 
         assertEquals(2d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(2d), mutNum.getValue()); 
          
         mutNum.setValue(new MutableDouble(3d)); 
         assertEquals(3d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(3d), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet1388() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(1d), mutNum.getValue()); 
          
         mutNum.setValue(Double.valueOf(2d)); 
         assertEquals(2d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(2d), mutNum.getValue()); 
          
         mutNum.setValue(new MutableDouble(3d)); 
         assertEquals(3d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(3d), mutNum.getValue()); 
     } 
  

@Test 
     public void testGetSet1389() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(1d), mutNum.getValue()); 
          
         mutNum.setValue(Double.valueOf(2d)); 
         assertEquals(2d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(2d), mutNum.getValue()); 
          
         mutNum.setValue(new MutableDouble(3d)); 
         assertEquals(3d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(3d, mutNum.doubleValue(), 0.0001d); 
     } 
  

@Test 
     public void testGetSet1390() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); 
          
         mutNum.setValue(1); 
         assertEquals(1d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(1d), mutNum.getValue()); 
          
         mutNum.setValue(Double.valueOf(2d)); 
         assertEquals(2d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(Double.valueOf(2d), mutNum.getValue()); 
          
         mutNum.setValue(new MutableDouble(3d)); 
         assertEquals(3d, mutNum.doubleValue(), 0.0001d); 
         assertEquals(3d, mutNum.doubleValue(), 0.0001d); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testSetNull1391() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         mutNum.setValue(null); 
     } 
  

@Test(expected=NullPointerException.class) 
     public void testSetNull1392() { 
         final MutableDouble mutNum = new MutableDouble(0d); 
         mutNum.setValue(null); 
     } 
  

@Test 
     public void testNanInfinite1393() { 
         MutableDouble mutNum = new MutableDouble(Double.NaN); 
         assertTrue(mutNum.isNaN()); 
          
         mutNum = new MutableDouble(Double.POSITIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
          
         mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
     } 
  

@Test 
     public void testNanInfinite1394() { 
         MutableDouble mutNum = new MutableDouble(Double.NaN); 
         assertTrue(mutNum.isNaN()); 
          
         mutNum = new MutableDouble(Double.POSITIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
          
         mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
     } 
  

@Test 
     public void testNanInfinite1395() { 
         MutableDouble mutNum = new MutableDouble(Double.NaN); 
         assertTrue(mutNum.isNaN()); 
          
         mutNum = new MutableDouble(Double.POSITIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
          
         mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
     } 
  

@Test 
     public void testNanInfinite1396() { 
         MutableDouble mutNum = new MutableDouble(Double.NaN); 
         assertTrue(mutNum.isNaN()); 
          
         mutNum = new MutableDouble(Double.POSITIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
          
         mutNum = new MutableDouble(Double.NEGATIVE_INFINITY); 
         assertTrue(mutNum.isInfinite()); 
     } 
  

@Test 
     public void testIncrement1397() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.increment(); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testIncrement1398() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.increment(); 
          
         assertEquals(2, mutNum.intValue()); 
         assertEquals(2L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1399() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1400() { 
         final MutableByte mutNum = new MutableByte((byte) 1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testAddValuePrimitive1401() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.add(Double.valueOf(1d)); 
          
         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testAddValuePrimitive1402() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.add(Double.valueOf(1d)); 
          
         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testAddValueObject1403() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.add(Double.valueOf(1.1d)); 
          
         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testAddValueObject1404() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.add(Double.valueOf(1.1d)); 
          
         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testSubtractValuePrimitive1405() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.subtract(Double.valueOf(0.9d)); 
          
         assertEquals(0.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testSubtractValuePrimitive1406() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.subtract(Double.valueOf(0.9d)); 
          
         assertEquals(0.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testSubtractValueObject1407() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.subtract(Double.valueOf(0.9d)); 
          
         assertEquals(0.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testSubtractValueObject1408() { 
         final MutableDouble mutNum = new MutableDouble(1); 
         mutNum.subtract(Double.valueOf(0.9d)); 
          
         assertEquals(0.1d, mutNum.doubleValue(), 0.01d); 
     } 
  

@Test 
     public void testDecrement1409() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1410() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1411() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

@Test 
     public void testDecrement1412() { 
         final MutableFloat mutNum = new MutableFloat(1); 
         mutNum.decrement(); 
          
         assertEquals(0, mutNum.intValue()); 
         assertEquals(0L, mutNum.longValue()); 
     } 
  

