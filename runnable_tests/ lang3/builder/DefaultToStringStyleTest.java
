@Test 
     public void testNotEmptyCollection155() { 
         final Collection<Integer> coll = new ArrayList<Integer>(); 
         try { 
             Validate.notEmpty((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         coll.add(Integer.valueOf(8)); 
         Validate.notEmpty(coll); 
          
         final Collection<Integer> test = Validate.notEmpty(coll); 
         assertSame(coll, test); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNotEmptyCollection156() { 
         final Collection<Integer> coll = new ArrayList<Integer>(); 
         try { 
             Validate.notEmpty((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         coll.add(Integer.valueOf(8)); 
         Validate.notEmpty(coll); 
          
         final Collection<Integer> test = Validate.notEmpty(coll); 
         assertSame(coll, test); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNotEmptyCollection157() { 
         final Collection<Integer> coll = new ArrayList<Integer>(); 
         try { 
             Validate.notEmpty((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         coll.add(Integer.valueOf(8)); 
         Validate.notEmpty(coll); 
          
         final Collection<Integer> test = Validate.notEmpty(coll); 
         assertSame(coll, test); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNotEmptyCollection160() { 
         final Collection<Integer> coll = new ArrayList<Integer>(); 
         try { 
             Validate.notEmpty((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         coll.add(Integer.valueOf(8)); 
         Validate.notEmpty(coll); 
          
         final Collection<Integer> test = Validate.notEmpty(coll); 
         assertSame(coll, test); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNotEmptyCollection161() { 
         final Collection<Integer> coll = new ArrayList<Integer>(); 
         try { 
             Validate.notEmpty((Collection<?>) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(coll); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated collection is empty", ex.getMessage()); 
         } 
         coll.add(Integer.valueOf(8)); 
         Validate.notEmpty(coll); 
          
         final Collection<Integer> test = Validate.notEmpty(coll); 
         assertSame(coll, test); 
     } 
  
     //----------------------------------------------------------------------- 

@Test 
     public void testNotEmptyString172() { 
         Validate.notEmpty("hjl"); 
         try { 
             Validate.notEmpty((String) null); 
             fail("Expecting NullPointerException"); 
         } catch (final NullPointerException ex) { 
             assertEquals("The validated character sequence is empty", ex.getMessage()); 
         } 
         try { 
             Validate.notEmpty(""); 
             fail("Expecting IllegalArgumentException"); 
         } catch (final IllegalArgumentException ex) { 
             assertEquals("The validated character sequence is empty", ex.getMessage()); 
         } 
          
         final String str = "Hi"; 
         final String testStr = Validate.notEmpty(str); 
         assertSame(str, testStr); 
     } 
  
     //----------------------------------------------------------------------- 

