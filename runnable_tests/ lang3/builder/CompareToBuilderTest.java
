@Test 
     public void testIntegerWithTransients303() { 
         testInteger(true); 
     } 
  

@Test 
     public void testBooleanArray304() { 
         boolean[] obj1 = new boolean[2]; 
         obj1[0] = true; 
         obj1[1] = false; 
         boolean[] obj2 = new boolean[2]; 
         obj2[0] = true; 
         obj2[1] = false; 
         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1[1] = true; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
  
         obj2 = null; 
         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); 
         obj1 = null; 
         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); 
     } 
  

@Test 
     public void testReflectionEquals305() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); 
         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); 
         o2.setA(4); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); 
         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); 
         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); 
     } 
      

@Test 
     public void testReflectionEquals306() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); 
         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); 
         o2.setA(4); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); 
         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); 
         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); 
     } 
      

@Test 
     public void testIntegerWithTransients307() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients308() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients309() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients310() { 
         testInteger(true); 
     } 
  

@Test 
     public void testReflectionEquals311() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); 
         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); 
         o2.setA(4); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); 
         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); 
         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); 
     } 
      

@Test 
     public void testIntegerWithTransients312() { 
         testInteger(true); 
     } 
  

@Test 
     public void testReflectionEquals313() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); 
         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); 
         o2.setA(4); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); 
         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); 
         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); 
     } 
      

@Test 
     public void testIntegerWithTransients314() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients315() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients316() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients317() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients318() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients319() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients320() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients321() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients322() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients323() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients324() { 
         testInteger(true); 
     } 
  

@Test 
     public void testReflectionEquals325() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); 
         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); 
         o2.setA(4); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); 
         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); 
         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); 
     } 
      

@Test 
     public void testIntegerWithTransients326() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients327() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients328() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients329() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients330() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients331() { 
         testInteger(true); 
     } 
  

@Test 
     public void testReflectionEquals332() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); 
         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); 
         o2.setA(4); 
         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); 
  
         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); 
         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); 
         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); 
     } 
      

@Test 
     public void testIntegerWithTransients333() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients334() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients335() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients336() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients337() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients338() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients339() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients340() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients341() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients342() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients343() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients344() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients345() { 
         testInteger(true); 
     } 
  

@Test 
     public void testIntegerWithTransients346() { 
         testInteger(true); 
     } 
  

@Test 
     public void testSuper347() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

@Test 
     public void testSuper348() { 
         final TestObject o1 = new TestObject(4); 
         final TestObject o2 = new TestObject(5); 
         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); 
         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); 
     } 
  

