@Test 
     public void testGetArrayComponentType1185() throws Exception { 
         final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); 
  
         final Type[] types = method.getGenericParameterTypes(); 
  
         Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); 
         Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); 
         Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); 
         Assert.assert
@Test 
     public void testGetArrayComponentType1186() throws Exception { 
         final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); 
  
         final Type[] types = method.getGenericParameterTypes(); 
  
         Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); 
         Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); 
         Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); 
         Assert.assert
@Test 
     public void testGetArrayComponentType1187() throws Exception { 
         final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); 
  
         final Type[] types = method.getGenericParameterTypes(); 
  
         Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); 
         Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); 
         Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); 
         Assert.assert
@Test 
     public void testGetArrayComponentType1188() throws Exception { 
         final Method method = getClass().getMethod("dummyMethod", List.class, List.class, List.class, 
                 List.class, List.class, List.class, List.class, List[].class, List[].class, 
                 List[].class, List[].class, List[].class, List[].class, List[].class); 
  
         final Type[] types = method.getGenericParameterTypes(); 
  
         Assert.assertNull(TypeUtils.getArrayComponentType(types[0])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[1])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[2])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[3])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[4])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[5])); 
         Assert.assertNull(TypeUtils.getArrayComponentType(types[6])); 
         Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7])); 
         Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8])); 
         Assert.assert
@Test 
     public void testConstructor1189() { 
         assertNotNull(new DateFormatUtils()); 
         final Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors(); 
         assertEquals(1, cons.length); 
         assertTrue(Modifier.isPublic(cons[0].getModifiers())); 
         assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers())); 
         assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers())); 
     } 
      
     //----------------------------------------------------------------------- 

@Test 
     public void testConstructor1190() { 
         assertNotNull(new DateFormatUtils()); 
         final Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors(); 
         assertEquals(1, cons.length); 
         assertTrue(Modifier.isPublic(cons[0].getModifiers())); 
         assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers())); 
         assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers())); 
     } 
      
     //----------------------------------------------------------------------- 

@Test 
     public void testFormatUTC1191() { 
         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); 
         c.set(2005,0,1,12,0,0); 
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); 
          
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); 
          
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); 
          
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); 
     } 
      

